<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="2781"><g><title>ahc30_a::Solver::new (1 samples, 0.04%)</title><rect x="0.0000%" y="485" width="0.0360%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>ahc30_a::Problem::new (1 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0360%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>ahc30_a::Mino::get_oks (1 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0360%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0360%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0360%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0360%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0360%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="0.0000%" y="373" width="0.0360%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0360%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>&lt;ahc30_a::grid::Coordinate as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="0.0000%" y="341" width="0.0360%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="0.0000%" y="325" width="0.0360%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="0.0000%" y="309" width="0.0360%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="0.0000%" y="293" width="0.0360%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="0.0000%" y="277" width="0.0360%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="0.0000%" y="261" width="0.0360%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.04%)</title><rect x="0.0000%" y="245" width="0.0360%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>&lt;&amp;usize as core::ops::arith::Add&lt;usize&gt;&gt;::add (1 samples, 0.04%)</title><rect x="0.0719%" y="469" width="0.0360%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="0.3219%" y="479.50"></text></g><g><title>&lt;ahc30_a::grid::Map2d&lt;T&gt; as core::ops::index::IndexMut&lt;ahc30_a::grid::Coordinate&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="0.1438%" y="437" width="0.0360%" height="15" fill="rgb(210,31,41)" fg:x="4" fg:w="1"/><text x="0.3938%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="0.2157%" y="373" width="0.0360%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.4657%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.18%)</title><rect x="0.2517%" y="373" width="0.1798%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="5"/><text x="0.5017%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.18%)</title><rect x="0.2517%" y="357" width="0.1798%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="5"/><text x="0.5017%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.18%)</title><rect x="0.2517%" y="341" width="0.1798%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="5"/><text x="0.5017%" y="351.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.18%)</title><rect x="0.2517%" y="325" width="0.1798%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="5"/><text x="0.5017%" y="335.50"></text></g><g><title>realloc (5 samples, 0.18%)</title><rect x="0.2517%" y="309" width="0.1798%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="5"/><text x="0.5017%" y="319.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="0.3236%" y="293" width="0.1079%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="3"/><text x="0.5736%" y="303.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="0.3236%" y="277" width="0.1079%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="3"/><text x="0.5736%" y="287.50"></text></g><g><title>ahc30_a::Mino::get_blocks (9 samples, 0.32%)</title><rect x="0.1798%" y="437" width="0.3236%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="9"/><text x="0.4298%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.32%)</title><rect x="0.1798%" y="421" width="0.3236%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="9"/><text x="0.4298%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.32%)</title><rect x="0.1798%" y="405" width="0.3236%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="9"/><text x="0.4298%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.29%)</title><rect x="0.2157%" y="389" width="0.2877%" height="15" fill="rgb(232,36,49)" fg:x="6" fg:w="8"/><text x="0.4657%" y="399.50"></text></g><g><title>core::cmp::max (2 samples, 0.07%)</title><rect x="0.4315%" y="373" width="0.0719%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="2"/><text x="0.6815%" y="383.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.07%)</title><rect x="0.4315%" y="357" width="0.0719%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="2"/><text x="0.6815%" y="367.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.07%)</title><rect x="0.4315%" y="341" width="0.0719%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="2"/><text x="0.6815%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="0.5034%" y="437" width="0.0360%" height="15" fill="rgb(254,191,54)" fg:x="14" fg:w="1"/><text x="0.7534%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="0.5034%" y="421" width="0.0360%" height="15" fill="rgb(241,83,37)" fg:x="14" fg:w="1"/><text x="0.7534%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="0.5034%" y="405" width="0.0360%" height="15" fill="rgb(233,36,39)" fg:x="14" fg:w="1"/><text x="0.7534%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="0.5034%" y="389" width="0.0360%" height="15" fill="rgb(226,3,54)" fg:x="14" fg:w="1"/><text x="0.7534%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="0.5034%" y="373" width="0.0360%" height="15" fill="rgb(245,192,40)" fg:x="14" fg:w="1"/><text x="0.7534%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="0.5034%" y="357" width="0.0360%" height="15" fill="rgb(238,167,29)" fg:x="14" fg:w="1"/><text x="0.7534%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="0.5034%" y="341" width="0.0360%" height="15" fill="rgb(232,182,51)" fg:x="14" fg:w="1"/><text x="0.7534%" y="351.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="0.5034%" y="325" width="0.0360%" height="15" fill="rgb(231,60,39)" fg:x="14" fg:w="1"/><text x="0.7534%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.5034%" y="309" width="0.0360%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="1"/><text x="0.7534%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.5034%" y="293" width="0.0360%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="1"/><text x="0.7534%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.04%)</title><rect x="0.5394%" y="437" width="0.0360%" height="15" fill="rgb(213,116,39)" fg:x="15" fg:w="1"/><text x="0.7894%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (1 samples, 0.04%)</title><rect x="0.5394%" y="421" width="0.0360%" height="15" fill="rgb(222,207,29)" fg:x="15" fg:w="1"/><text x="0.7894%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (1 samples, 0.04%)</title><rect x="0.5394%" y="405" width="0.0360%" height="15" fill="rgb(206,96,30)" fg:x="15" fg:w="1"/><text x="0.7894%" y="415.50"></text></g><g><title>ahc30_a::Candidate::update (16 samples, 0.58%)</title><rect x="0.1079%" y="453" width="0.5753%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="16"/><text x="0.3579%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ahc30_a::grid::Coordinate&gt;&gt; (3 samples, 0.11%)</title><rect x="0.5753%" y="437" width="0.1079%" height="15" fill="rgb(250,191,14)" fg:x="16" fg:w="3"/><text x="0.8253%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;ahc30_a::grid::Coordinate&gt;&gt; (3 samples, 0.11%)</title><rect x="0.5753%" y="421" width="0.1079%" height="15" fill="rgb(239,60,40)" fg:x="16" fg:w="3"/><text x="0.8253%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="0.5753%" y="405" width="0.1079%" height="15" fill="rgb(206,27,48)" fg:x="16" fg:w="3"/><text x="0.8253%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="0.5753%" y="389" width="0.1079%" height="15" fill="rgb(225,35,8)" fg:x="16" fg:w="3"/><text x="0.8253%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="0.5753%" y="373" width="0.1079%" height="15" fill="rgb(250,213,24)" fg:x="16" fg:w="3"/><text x="0.8253%" y="383.50"></text></g><g><title>free (3 samples, 0.11%)</title><rect x="0.5753%" y="357" width="0.1079%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="3"/><text x="0.8253%" y="367.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="0.5753%" y="341" width="0.1079%" height="15" fill="rgb(231,138,38)" fg:x="16" fg:w="3"/><text x="0.8253%" y="351.50"></text></g><g><title>ahc30_a::Candidate::from_ans (17 samples, 0.61%)</title><rect x="0.1079%" y="469" width="0.6113%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="17"/><text x="0.3579%" y="479.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.04%)</title><rect x="0.6832%" y="453" width="0.0360%" height="15" fill="rgb(251,118,11)" fg:x="19" fg:w="1"/><text x="0.9332%" y="463.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.04%)</title><rect x="0.6832%" y="437" width="0.0360%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="1"/><text x="0.9332%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="0.6832%" y="421" width="0.0360%" height="15" fill="rgb(247,81,37)" fg:x="19" fg:w="1"/><text x="0.9332%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="0.6832%" y="405" width="0.0360%" height="15" fill="rgb(209,12,38)" fg:x="19" fg:w="1"/><text x="0.9332%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="0.6832%" y="389" width="0.0360%" height="15" fill="rgb(227,1,9)" fg:x="19" fg:w="1"/><text x="0.9332%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="0.6832%" y="373" width="0.0360%" height="15" fill="rgb(248,47,43)" fg:x="19" fg:w="1"/><text x="0.9332%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="0.6832%" y="357" width="0.0360%" height="15" fill="rgb(221,10,30)" fg:x="19" fg:w="1"/><text x="0.9332%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="0.6832%" y="341" width="0.0360%" height="15" fill="rgb(210,229,1)" fg:x="19" fg:w="1"/><text x="0.9332%" y="351.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="0.6832%" y="325" width="0.0360%" height="15" fill="rgb(222,148,37)" fg:x="19" fg:w="1"/><text x="0.9332%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.6832%" y="309" width="0.0360%" height="15" fill="rgb(234,67,33)" fg:x="19" fg:w="1"/><text x="0.9332%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.04%)</title><rect x="0.7192%" y="421" width="0.0360%" height="15" fill="rgb(247,98,35)" fg:x="20" fg:w="1"/><text x="0.9692%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="0.7192%" y="405" width="0.0360%" height="15" fill="rgb(247,138,52)" fg:x="20" fg:w="1"/><text x="0.9692%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.04%)</title><rect x="0.7192%" y="389" width="0.0360%" height="15" fill="rgb(213,79,30)" fg:x="20" fg:w="1"/><text x="0.9692%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="0.7192%" y="373" width="0.0360%" height="15" fill="rgb(246,177,23)" fg:x="20" fg:w="1"/><text x="0.9692%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="0.7192%" y="357" width="0.0360%" height="15" fill="rgb(230,62,27)" fg:x="20" fg:w="1"/><text x="0.9692%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.04%)</title><rect x="0.7192%" y="341" width="0.0360%" height="15" fill="rgb(216,154,8)" fg:x="20" fg:w="1"/><text x="0.9692%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1 samples, 0.04%)</title><rect x="0.7192%" y="325" width="0.0360%" height="15" fill="rgb(244,35,45)" fg:x="20" fg:w="1"/><text x="0.9692%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="0.7192%" y="309" width="0.0360%" height="15" fill="rgb(251,115,12)" fg:x="20" fg:w="1"/><text x="0.9692%" y="319.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::choose_multiple (4 samples, 0.14%)</title><rect x="0.7192%" y="453" width="0.1438%" height="15" fill="rgb(240,54,50)" fg:x="20" fg:w="4"/><text x="0.9692%" y="463.50"></text></g><g><title>rand::seq::index::sample_inplace (4 samples, 0.14%)</title><rect x="0.7192%" y="437" width="0.1438%" height="15" fill="rgb(233,84,52)" fg:x="20" fg:w="4"/><text x="0.9692%" y="447.50"></text></g><g><title>rand::Rng::gen_range (3 samples, 0.11%)</title><rect x="0.7551%" y="421" width="0.1079%" height="15" fill="rgb(207,117,47)" fg:x="21" fg:w="3"/><text x="1.0051%" y="431.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (3 samples, 0.11%)</title><rect x="0.7551%" y="405" width="0.1079%" height="15" fill="rgb(249,43,39)" fg:x="21" fg:w="3"/><text x="1.0051%" y="415.50"></text></g><g><title>rand::Rng::gen (2 samples, 0.07%)</title><rect x="0.7911%" y="389" width="0.0719%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="2"/><text x="1.0411%" y="399.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.07%)</title><rect x="0.7911%" y="373" width="0.0719%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="2"/><text x="1.0411%" y="383.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (2 samples, 0.07%)</title><rect x="0.7911%" y="357" width="0.0719%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="2"/><text x="1.0411%" y="367.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.07%)</title><rect x="0.7911%" y="341" width="0.0719%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="2"/><text x="1.0411%" y="351.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.07%)</title><rect x="0.7911%" y="325" width="0.0719%" height="15" fill="rgb(253,215,40)" fg:x="22" fg:w="2"/><text x="1.0411%" y="335.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.07%)</title><rect x="0.7911%" y="309" width="0.0719%" height="15" fill="rgb(211,81,21)" fg:x="22" fg:w="2"/><text x="1.0411%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.07%)</title><rect x="0.7911%" y="293" width="0.0719%" height="15" fill="rgb(208,190,38)" fg:x="22" fg:w="2"/><text x="1.0411%" y="303.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.07%)</title><rect x="0.7911%" y="277" width="0.0719%" height="15" fill="rgb(235,213,38)" fg:x="22" fg:w="2"/><text x="1.0411%" y="287.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.07%)</title><rect x="0.7911%" y="261" width="0.0719%" height="15" fill="rgb(237,122,38)" fg:x="22" fg:w="2"/><text x="1.0411%" y="271.50"></text></g><g><title>rand_chacha::guts::refill_wide (2 samples, 0.07%)</title><rect x="0.7911%" y="245" width="0.0719%" height="15" fill="rgb(244,218,35)" fg:x="22" fg:w="2"/><text x="1.0411%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.07%)</title><rect x="0.7911%" y="229" width="0.0719%" height="15" fill="rgb(240,68,47)" fg:x="22" fg:w="2"/><text x="1.0411%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.07%)</title><rect x="0.7911%" y="213" width="0.0719%" height="15" fill="rgb(210,16,53)" fg:x="22" fg:w="2"/><text x="1.0411%" y="223.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.07%)</title><rect x="0.7911%" y="197" width="0.0719%" height="15" fill="rgb(235,124,12)" fg:x="22" fg:w="2"/><text x="1.0411%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as core::ops::bit::BitXor&gt;::bitxor (2 samples, 0.07%)</title><rect x="0.7911%" y="181" width="0.0719%" height="15" fill="rgb(224,169,11)" fg:x="22" fg:w="2"/><text x="1.0411%" y="191.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor (2 samples, 0.07%)</title><rect x="0.7911%" y="165" width="0.0719%" height="15" fill="rgb(250,166,2)" fg:x="22" fg:w="2"/><text x="1.0411%" y="175.50"></text></g><g><title>ppv_lite86::generic::omap2 (2 samples, 0.07%)</title><rect x="0.7911%" y="149" width="0.0719%" height="15" fill="rgb(242,216,29)" fg:x="22" fg:w="2"/><text x="1.0411%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor::{{closure}} (2 samples, 0.07%)</title><rect x="0.7911%" y="133" width="0.0719%" height="15" fill="rgb(230,116,27)" fg:x="22" fg:w="2"/><text x="1.0411%" y="143.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (3 samples, 0.11%)</title><rect x="0.8630%" y="453" width="0.1079%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="3"/><text x="1.1130%" y="463.50"></text></g><g><title>rand::seq::gen_index (3 samples, 0.11%)</title><rect x="0.8630%" y="437" width="0.1079%" height="15" fill="rgb(253,11,6)" fg:x="24" fg:w="3"/><text x="1.1130%" y="447.50"></text></g><g><title>rand::Rng::gen_range (3 samples, 0.11%)</title><rect x="0.8630%" y="421" width="0.1079%" height="15" fill="rgb(247,143,39)" fg:x="24" fg:w="3"/><text x="1.1130%" y="431.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (3 samples, 0.11%)</title><rect x="0.8630%" y="405" width="0.1079%" height="15" fill="rgb(236,97,10)" fg:x="24" fg:w="3"/><text x="1.1130%" y="415.50"></text></g><g><title>rand::Rng::gen (3 samples, 0.11%)</title><rect x="0.8630%" y="389" width="0.1079%" height="15" fill="rgb(233,208,19)" fg:x="24" fg:w="3"/><text x="1.1130%" y="399.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (3 samples, 0.11%)</title><rect x="0.8630%" y="373" width="0.1079%" height="15" fill="rgb(216,164,2)" fg:x="24" fg:w="3"/><text x="1.1130%" y="383.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (3 samples, 0.11%)</title><rect x="0.8630%" y="357" width="0.1079%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="3"/><text x="1.1130%" y="367.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.11%)</title><rect x="0.8630%" y="341" width="0.1079%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="3"/><text x="1.1130%" y="351.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (3 samples, 0.11%)</title><rect x="0.8630%" y="325" width="0.1079%" height="15" fill="rgb(242,107,0)" fg:x="24" fg:w="3"/><text x="1.1130%" y="335.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.07%)</title><rect x="0.8990%" y="309" width="0.0719%" height="15" fill="rgb(251,28,31)" fg:x="25" fg:w="2"/><text x="1.1490%" y="319.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.07%)</title><rect x="0.8990%" y="293" width="0.0719%" height="15" fill="rgb(233,223,10)" fg:x="25" fg:w="2"/><text x="1.1490%" y="303.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.07%)</title><rect x="0.8990%" y="277" width="0.0719%" height="15" fill="rgb(215,21,27)" fg:x="25" fg:w="2"/><text x="1.1490%" y="287.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.07%)</title><rect x="0.8990%" y="261" width="0.0719%" height="15" fill="rgb(232,23,21)" fg:x="25" fg:w="2"/><text x="1.1490%" y="271.50"></text></g><g><title>rand_chacha::guts::refill_wide (2 samples, 0.07%)</title><rect x="0.8990%" y="245" width="0.0719%" height="15" fill="rgb(244,5,23)" fg:x="25" fg:w="2"/><text x="1.1490%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.07%)</title><rect x="0.8990%" y="229" width="0.0719%" height="15" fill="rgb(226,81,46)" fg:x="25" fg:w="2"/><text x="1.1490%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.07%)</title><rect x="0.8990%" y="213" width="0.0719%" height="15" fill="rgb(247,70,30)" fg:x="25" fg:w="2"/><text x="1.1490%" y="223.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.07%)</title><rect x="0.8990%" y="197" width="0.0719%" height="15" fill="rgb(212,68,19)" fg:x="25" fg:w="2"/><text x="1.1490%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as core::ops::bit::BitXor&gt;::bitxor (2 samples, 0.07%)</title><rect x="0.8990%" y="181" width="0.0719%" height="15" fill="rgb(240,187,13)" fg:x="25" fg:w="2"/><text x="1.1490%" y="191.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor (2 samples, 0.07%)</title><rect x="0.8990%" y="165" width="0.0719%" height="15" fill="rgb(223,113,26)" fg:x="25" fg:w="2"/><text x="1.1490%" y="175.50"></text></g><g><title>ppv_lite86::generic::omap2 (2 samples, 0.07%)</title><rect x="0.8990%" y="149" width="0.0719%" height="15" fill="rgb(206,192,2)" fg:x="25" fg:w="2"/><text x="1.1490%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor::{{closure}} (2 samples, 0.07%)</title><rect x="0.8990%" y="133" width="0.0719%" height="15" fill="rgb(241,108,4)" fg:x="25" fg:w="2"/><text x="1.1490%" y="143.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="1.0068%" y="293" width="0.0360%" height="15" fill="rgb(247,173,49)" fg:x="28" fg:w="1"/><text x="1.2568%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="0.9709%" y="453" width="0.1079%" height="15" fill="rgb(224,114,35)" fg:x="27" fg:w="3"/><text x="1.2209%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="0.9709%" y="437" width="0.1079%" height="15" fill="rgb(245,159,27)" fg:x="27" fg:w="3"/><text x="1.2209%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="0.9709%" y="421" width="0.1079%" height="15" fill="rgb(245,172,44)" fg:x="27" fg:w="3"/><text x="1.2209%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="0.9709%" y="405" width="0.1079%" height="15" fill="rgb(236,23,11)" fg:x="27" fg:w="3"/><text x="1.2209%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="0.9709%" y="389" width="0.1079%" height="15" fill="rgb(205,117,38)" fg:x="27" fg:w="3"/><text x="1.2209%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="0.9709%" y="373" width="0.1079%" height="15" fill="rgb(237,72,25)" fg:x="27" fg:w="3"/><text x="1.2209%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.11%)</title><rect x="0.9709%" y="357" width="0.1079%" height="15" fill="rgb(244,70,9)" fg:x="27" fg:w="3"/><text x="1.2209%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="1.0068%" y="341" width="0.0719%" height="15" fill="rgb(217,125,39)" fg:x="28" fg:w="2"/><text x="1.2568%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="1.0068%" y="325" width="0.0719%" height="15" fill="rgb(235,36,10)" fg:x="28" fg:w="2"/><text x="1.2568%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="1.0068%" y="309" width="0.0719%" height="15" fill="rgb(251,123,47)" fg:x="28" fg:w="2"/><text x="1.2568%" y="319.50"></text></g><g><title>malloc@plt (1 samples, 0.04%)</title><rect x="1.0428%" y="293" width="0.0360%" height="15" fill="rgb(221,13,13)" fg:x="29" fg:w="1"/><text x="1.2928%" y="303.50"></text></g><g><title>ahc30_a::Problem::select_row (3 samples, 0.11%)</title><rect x="1.0787%" y="373" width="0.1079%" height="15" fill="rgb(238,131,9)" fg:x="30" fg:w="3"/><text x="1.3287%" y="383.50"></text></g><g><title>ahc30_a::Problem::cover (2 samples, 0.07%)</title><rect x="1.1147%" y="357" width="0.0719%" height="15" fill="rgb(211,50,8)" fg:x="31" fg:w="2"/><text x="1.3647%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="1.1507%" y="341" width="0.0360%" height="15" fill="rgb(245,182,24)" fg:x="32" fg:w="1"/><text x="1.4007%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="1.1507%" y="325" width="0.0360%" height="15" fill="rgb(242,14,37)" fg:x="32" fg:w="1"/><text x="1.4007%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="1.1507%" y="309" width="0.0360%" height="15" fill="rgb(246,228,12)" fg:x="32" fg:w="1"/><text x="1.4007%" y="319.50"></text></g><g><title>ahc30_a::Problem::cover (2 samples, 0.07%)</title><rect x="1.3305%" y="341" width="0.0719%" height="15" fill="rgb(213,55,15)" fg:x="37" fg:w="2"/><text x="1.5805%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="1.3305%" y="325" width="0.0719%" height="15" fill="rgb(209,9,3)" fg:x="37" fg:w="2"/><text x="1.5805%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="1.3305%" y="309" width="0.0719%" height="15" fill="rgb(230,59,30)" fg:x="37" fg:w="2"/><text x="1.5805%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="1.3305%" y="293" width="0.0719%" height="15" fill="rgb(209,121,21)" fg:x="37" fg:w="2"/><text x="1.5805%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="1.4024%" y="245" width="0.0360%" height="15" fill="rgb(220,109,13)" fg:x="39" fg:w="1"/><text x="1.6524%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="1.4024%" y="277" width="0.0719%" height="15" fill="rgb(232,18,1)" fg:x="39" fg:w="2"/><text x="1.6524%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="1.4024%" y="261" width="0.0719%" height="15" fill="rgb(215,41,42)" fg:x="39" fg:w="2"/><text x="1.6524%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="1.4383%" y="245" width="0.0360%" height="15" fill="rgb(224,123,36)" fg:x="40" fg:w="1"/><text x="1.6883%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="1.4383%" y="229" width="0.0360%" height="15" fill="rgb(240,125,3)" fg:x="40" fg:w="1"/><text x="1.6883%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="1.4383%" y="213" width="0.0360%" height="15" fill="rgb(205,98,50)" fg:x="40" fg:w="1"/><text x="1.6883%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="1.4383%" y="197" width="0.0360%" height="15" fill="rgb(205,185,37)" fg:x="40" fg:w="1"/><text x="1.6883%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="1.4383%" y="181" width="0.0360%" height="15" fill="rgb(238,207,15)" fg:x="40" fg:w="1"/><text x="1.6883%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="1.4383%" y="165" width="0.0360%" height="15" fill="rgb(213,199,42)" fg:x="40" fg:w="1"/><text x="1.6883%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="1.4383%" y="149" width="0.0360%" height="15" fill="rgb(235,201,11)" fg:x="40" fg:w="1"/><text x="1.6883%" y="159.50"></text></g><g><title>ahc30_a::Problem::select_row (12 samples, 0.43%)</title><rect x="1.2226%" y="357" width="0.4315%" height="15" fill="rgb(207,46,11)" fg:x="34" fg:w="12"/><text x="1.4726%" y="367.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (7 samples, 0.25%)</title><rect x="1.4024%" y="341" width="0.2517%" height="15" fill="rgb(241,35,35)" fg:x="39" fg:w="7"/><text x="1.6524%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (7 samples, 0.25%)</title><rect x="1.4024%" y="325" width="0.2517%" height="15" fill="rgb(243,32,47)" fg:x="39" fg:w="7"/><text x="1.6524%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (7 samples, 0.25%)</title><rect x="1.4024%" y="309" width="0.2517%" height="15" fill="rgb(247,202,23)" fg:x="39" fg:w="7"/><text x="1.6524%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (7 samples, 0.25%)</title><rect x="1.4024%" y="293" width="0.2517%" height="15" fill="rgb(219,102,11)" fg:x="39" fg:w="7"/><text x="1.6524%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (5 samples, 0.18%)</title><rect x="1.4743%" y="277" width="0.1798%" height="15" fill="rgb(243,110,44)" fg:x="41" fg:w="5"/><text x="1.7243%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (5 samples, 0.18%)</title><rect x="1.4743%" y="261" width="0.1798%" height="15" fill="rgb(222,74,54)" fg:x="41" fg:w="5"/><text x="1.7243%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (5 samples, 0.18%)</title><rect x="1.4743%" y="245" width="0.1798%" height="15" fill="rgb(216,99,12)" fg:x="41" fg:w="5"/><text x="1.7243%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (5 samples, 0.18%)</title><rect x="1.4743%" y="229" width="0.1798%" height="15" fill="rgb(226,22,26)" fg:x="41" fg:w="5"/><text x="1.7243%" y="239.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (1 samples, 0.04%)</title><rect x="1.6900%" y="245" width="0.0360%" height="15" fill="rgb(217,163,10)" fg:x="47" fg:w="1"/><text x="1.9400%" y="255.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.04%)</title><rect x="1.6900%" y="229" width="0.0360%" height="15" fill="rgb(213,25,53)" fg:x="47" fg:w="1"/><text x="1.9400%" y="239.50"></text></g><g><title>core::ptr::read_unaligned (1 samples, 0.04%)</title><rect x="1.6900%" y="213" width="0.0360%" height="15" fill="rgb(252,105,26)" fg:x="47" fg:w="1"/><text x="1.9400%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="1.6900%" y="197" width="0.0360%" height="15" fill="rgb(220,39,43)" fg:x="47" fg:w="1"/><text x="1.9400%" y="207.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="1.6541%" y="341" width="0.1079%" height="15" fill="rgb(229,68,48)" fg:x="46" fg:w="3"/><text x="1.9041%" y="351.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="1.6541%" y="325" width="0.1079%" height="15" fill="rgb(252,8,32)" fg:x="46" fg:w="3"/><text x="1.9041%" y="335.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="1.6541%" y="309" width="0.1079%" height="15" fill="rgb(223,20,43)" fg:x="46" fg:w="3"/><text x="1.9041%" y="319.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="1.6541%" y="293" width="0.1079%" height="15" fill="rgb(229,81,49)" fg:x="46" fg:w="3"/><text x="1.9041%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="1.6541%" y="277" width="0.1079%" height="15" fill="rgb(236,28,36)" fg:x="46" fg:w="3"/><text x="1.9041%" y="287.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.07%)</title><rect x="1.6900%" y="261" width="0.0719%" height="15" fill="rgb(249,185,26)" fg:x="47" fg:w="2"/><text x="1.9400%" y="271.50"></text></g><g><title>hashbrown::raw::neon::Group::match_full (1 samples, 0.04%)</title><rect x="1.7260%" y="245" width="0.0360%" height="15" fill="rgb(249,174,33)" fg:x="48" fg:w="1"/><text x="1.9760%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="1.7260%" y="229" width="0.0360%" height="15" fill="rgb(233,201,37)" fg:x="48" fg:w="1"/><text x="1.9760%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="2.1215%" y="325" width="0.0360%" height="15" fill="rgb(221,78,26)" fg:x="59" fg:w="1"/><text x="2.3715%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="2.1215%" y="309" width="0.0360%" height="15" fill="rgb(250,127,30)" fg:x="59" fg:w="1"/><text x="2.3715%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="2.1215%" y="293" width="0.0360%" height="15" fill="rgb(230,49,44)" fg:x="59" fg:w="1"/><text x="2.3715%" y="303.50"></text></g><g><title>ahc30_a::Problem::cover (11 samples, 0.40%)</title><rect x="2.1575%" y="325" width="0.3955%" height="15" fill="rgb(229,67,23)" fg:x="60" fg:w="11"/><text x="2.4075%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.25%)</title><rect x="2.3013%" y="309" width="0.2517%" height="15" fill="rgb(249,83,47)" fg:x="64" fg:w="7"/><text x="2.5513%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.25%)</title><rect x="2.3013%" y="293" width="0.2517%" height="15" fill="rgb(215,43,3)" fg:x="64" fg:w="7"/><text x="2.5513%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.25%)</title><rect x="2.3013%" y="277" width="0.2517%" height="15" fill="rgb(238,154,13)" fg:x="64" fg:w="7"/><text x="2.5513%" y="287.50"></text></g><g><title>ahc30_a::Problem::select_row (25 samples, 0.90%)</title><rect x="1.7620%" y="341" width="0.8990%" height="15" fill="rgb(219,56,2)" fg:x="49" fg:w="25"/><text x="2.0120%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (3 samples, 0.11%)</title><rect x="2.5530%" y="325" width="0.1079%" height="15" fill="rgb(233,0,4)" fg:x="71" fg:w="3"/><text x="2.8030%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (3 samples, 0.11%)</title><rect x="2.5530%" y="309" width="0.1079%" height="15" fill="rgb(235,30,7)" fg:x="71" fg:w="3"/><text x="2.8030%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.11%)</title><rect x="2.5530%" y="293" width="0.1079%" height="15" fill="rgb(250,79,13)" fg:x="71" fg:w="3"/><text x="2.8030%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.11%)</title><rect x="2.5530%" y="277" width="0.1079%" height="15" fill="rgb(211,146,34)" fg:x="71" fg:w="3"/><text x="2.8030%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.11%)</title><rect x="2.5530%" y="261" width="0.1079%" height="15" fill="rgb(228,22,38)" fg:x="71" fg:w="3"/><text x="2.8030%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (3 samples, 0.11%)</title><rect x="2.5530%" y="245" width="0.1079%" height="15" fill="rgb(235,168,5)" fg:x="71" fg:w="3"/><text x="2.8030%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (3 samples, 0.11%)</title><rect x="2.5530%" y="229" width="0.1079%" height="15" fill="rgb(221,155,16)" fg:x="71" fg:w="3"/><text x="2.8030%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (3 samples, 0.11%)</title><rect x="2.5530%" y="213" width="0.1079%" height="15" fill="rgb(215,215,53)" fg:x="71" fg:w="3"/><text x="2.8030%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="2.8407%" y="325" width="0.2157%" height="15" fill="rgb(223,4,10)" fg:x="79" fg:w="6"/><text x="3.0907%" y="335.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="2.8407%" y="309" width="0.2157%" height="15" fill="rgb(234,103,6)" fg:x="79" fg:w="6"/><text x="3.0907%" y="319.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="2.8407%" y="293" width="0.2157%" height="15" fill="rgb(227,97,0)" fg:x="79" fg:w="6"/><text x="3.0907%" y="303.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="2.8407%" y="277" width="0.2157%" height="15" fill="rgb(234,150,53)" fg:x="79" fg:w="6"/><text x="3.0907%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="2.8407%" y="261" width="0.2157%" height="15" fill="rgb(228,201,54)" fg:x="79" fg:w="6"/><text x="3.0907%" y="271.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.11%)</title><rect x="2.9486%" y="245" width="0.1079%" height="15" fill="rgb(222,22,37)" fg:x="82" fg:w="3"/><text x="3.1986%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="2.9486%" y="229" width="0.1079%" height="15" fill="rgb(237,53,32)" fg:x="82" fg:w="3"/><text x="3.1986%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.11%)</title><rect x="2.9486%" y="213" width="0.1079%" height="15" fill="rgb(233,25,53)" fg:x="82" fg:w="3"/><text x="3.1986%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.22%)</title><rect x="3.9195%" y="309" width="0.2157%" height="15" fill="rgb(210,40,34)" fg:x="109" fg:w="6"/><text x="4.1695%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.22%)</title><rect x="3.9195%" y="293" width="0.2157%" height="15" fill="rgb(241,220,44)" fg:x="109" fg:w="6"/><text x="4.1695%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.22%)</title><rect x="3.9195%" y="277" width="0.2157%" height="15" fill="rgb(235,28,35)" fg:x="109" fg:w="6"/><text x="4.1695%" y="287.50"></text></g><g><title>ahc30_a::Problem::cover (26 samples, 0.93%)</title><rect x="4.1352%" y="309" width="0.9349%" height="15" fill="rgb(210,56,17)" fg:x="115" fg:w="26"/><text x="4.3852%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.32%)</title><rect x="4.7465%" y="293" width="0.3236%" height="15" fill="rgb(224,130,29)" fg:x="132" fg:w="9"/><text x="4.9965%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.32%)</title><rect x="4.7465%" y="277" width="0.3236%" height="15" fill="rgb(235,212,8)" fg:x="132" fg:w="9"/><text x="4.9965%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.32%)</title><rect x="4.7465%" y="261" width="0.3236%" height="15" fill="rgb(223,33,50)" fg:x="132" fg:w="9"/><text x="4.9965%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="5.1061%" y="213" width="0.0360%" height="15" fill="rgb(219,149,13)" fg:x="142" fg:w="1"/><text x="5.3561%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="5.2140%" y="117" width="0.0719%" height="15" fill="rgb(250,156,29)" fg:x="145" fg:w="2"/><text x="5.4640%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="5.1420%" y="165" width="0.1798%" height="15" fill="rgb(216,193,19)" fg:x="143" fg:w="5"/><text x="5.3920%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="5.1420%" y="149" width="0.1798%" height="15" fill="rgb(216,135,14)" fg:x="143" fg:w="5"/><text x="5.3920%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="5.1420%" y="133" width="0.1798%" height="15" fill="rgb(241,47,5)" fg:x="143" fg:w="5"/><text x="5.3920%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="5.2859%" y="117" width="0.0360%" height="15" fill="rgb(233,42,35)" fg:x="147" fg:w="1"/><text x="5.5359%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.29%)</title><rect x="5.0701%" y="245" width="0.2877%" height="15" fill="rgb(231,13,6)" fg:x="141" fg:w="8"/><text x="5.3201%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.29%)</title><rect x="5.0701%" y="229" width="0.2877%" height="15" fill="rgb(207,181,40)" fg:x="141" fg:w="8"/><text x="5.3201%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.22%)</title><rect x="5.1420%" y="213" width="0.2157%" height="15" fill="rgb(254,173,49)" fg:x="143" fg:w="6"/><text x="5.3920%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (6 samples, 0.22%)</title><rect x="5.1420%" y="197" width="0.2157%" height="15" fill="rgb(221,1,38)" fg:x="143" fg:w="6"/><text x="5.3920%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.22%)</title><rect x="5.1420%" y="181" width="0.2157%" height="15" fill="rgb(206,124,46)" fg:x="143" fg:w="6"/><text x="5.3920%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.04%)</title><rect x="5.3218%" y="165" width="0.0360%" height="15" fill="rgb(249,21,11)" fg:x="148" fg:w="1"/><text x="5.5718%" y="175.50"></text></g><g><title>ahc30_a::Problem::select_row (68 samples, 2.45%)</title><rect x="3.0565%" y="325" width="2.4452%" height="15" fill="rgb(222,201,40)" fg:x="85" fg:w="68"/><text x="3.3065%" y="335.50">ah..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (12 samples, 0.43%)</title><rect x="5.0701%" y="309" width="0.4315%" height="15" fill="rgb(235,61,29)" fg:x="141" fg:w="12"/><text x="5.3201%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (12 samples, 0.43%)</title><rect x="5.0701%" y="293" width="0.4315%" height="15" fill="rgb(219,207,3)" fg:x="141" fg:w="12"/><text x="5.3201%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (12 samples, 0.43%)</title><rect x="5.0701%" y="277" width="0.4315%" height="15" fill="rgb(222,56,46)" fg:x="141" fg:w="12"/><text x="5.3201%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (12 samples, 0.43%)</title><rect x="5.0701%" y="261" width="0.4315%" height="15" fill="rgb(239,76,54)" fg:x="141" fg:w="12"/><text x="5.3201%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (4 samples, 0.14%)</title><rect x="5.3578%" y="245" width="0.1438%" height="15" fill="rgb(231,124,27)" fg:x="149" fg:w="4"/><text x="5.6078%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (4 samples, 0.14%)</title><rect x="5.3578%" y="229" width="0.1438%" height="15" fill="rgb(249,195,6)" fg:x="149" fg:w="4"/><text x="5.6078%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (4 samples, 0.14%)</title><rect x="5.3578%" y="213" width="0.1438%" height="15" fill="rgb(237,174,47)" fg:x="149" fg:w="4"/><text x="5.6078%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (4 samples, 0.14%)</title><rect x="5.3578%" y="197" width="0.1438%" height="15" fill="rgb(206,201,31)" fg:x="149" fg:w="4"/><text x="5.6078%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (1 samples, 0.04%)</title><rect x="5.4657%" y="181" width="0.0360%" height="15" fill="rgb(231,57,52)" fg:x="152" fg:w="1"/><text x="5.7157%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (1 samples, 0.04%)</title><rect x="5.4657%" y="165" width="0.0360%" height="15" fill="rgb(248,177,22)" fg:x="152" fg:w="1"/><text x="5.7157%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="5.9331%" y="213" width="0.1079%" height="15" fill="rgb(215,211,37)" fg:x="165" fg:w="3"/><text x="6.1831%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="5.9691%" y="197" width="0.0719%" height="15" fill="rgb(241,128,51)" fg:x="166" fg:w="2"/><text x="6.2191%" y="207.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="5.8252%" y="309" width="0.2517%" height="15" fill="rgb(227,165,31)" fg:x="162" fg:w="7"/><text x="6.0752%" y="319.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="5.8252%" y="293" width="0.2517%" height="15" fill="rgb(228,167,24)" fg:x="162" fg:w="7"/><text x="6.0752%" y="303.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="5.8252%" y="277" width="0.2517%" height="15" fill="rgb(228,143,12)" fg:x="162" fg:w="7"/><text x="6.0752%" y="287.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="5.8252%" y="261" width="0.2517%" height="15" fill="rgb(249,149,8)" fg:x="162" fg:w="7"/><text x="6.0752%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="5.8252%" y="245" width="0.2517%" height="15" fill="rgb(243,35,44)" fg:x="162" fg:w="7"/><text x="6.0752%" y="255.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (4 samples, 0.14%)</title><rect x="5.9331%" y="229" width="0.1438%" height="15" fill="rgb(246,89,9)" fg:x="165" fg:w="4"/><text x="6.1831%" y="239.50"></text></g><g><title>hashbrown::raw::neon::Group::match_full (1 samples, 0.04%)</title><rect x="6.0410%" y="213" width="0.0360%" height="15" fill="rgb(233,213,13)" fg:x="168" fg:w="1"/><text x="6.2910%" y="223.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="6.0410%" y="197" width="0.0360%" height="15" fill="rgb(233,141,41)" fg:x="168" fg:w="1"/><text x="6.2910%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.29%)</title><rect x="7.9468%" y="293" width="0.2877%" height="15" fill="rgb(239,167,4)" fg:x="221" fg:w="8"/><text x="8.1968%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.29%)</title><rect x="7.9468%" y="277" width="0.2877%" height="15" fill="rgb(209,217,16)" fg:x="221" fg:w="8"/><text x="8.1968%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.29%)</title><rect x="7.9468%" y="261" width="0.2877%" height="15" fill="rgb(219,88,35)" fg:x="221" fg:w="8"/><text x="8.1968%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.40%)</title><rect x="9.4930%" y="277" width="0.3955%" height="15" fill="rgb(220,193,23)" fg:x="264" fg:w="11"/><text x="9.7430%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.40%)</title><rect x="9.4930%" y="261" width="0.3955%" height="15" fill="rgb(230,90,52)" fg:x="264" fg:w="11"/><text x="9.7430%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.40%)</title><rect x="9.4930%" y="245" width="0.3955%" height="15" fill="rgb(252,106,19)" fg:x="264" fg:w="11"/><text x="9.7430%" y="255.50"></text></g><g><title>ahc30_a::Problem::cover (51 samples, 1.83%)</title><rect x="8.2344%" y="293" width="1.8339%" height="15" fill="rgb(206,74,20)" fg:x="229" fg:w="51"/><text x="8.4844%" y="303.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.18%)</title><rect x="9.8885%" y="277" width="0.1798%" height="15" fill="rgb(230,138,44)" fg:x="275" fg:w="5"/><text x="10.1385%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.18%)</title><rect x="9.8885%" y="261" width="0.1798%" height="15" fill="rgb(235,182,43)" fg:x="275" fg:w="5"/><text x="10.1385%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.18%)</title><rect x="9.8885%" y="245" width="0.1798%" height="15" fill="rgb(242,16,51)" fg:x="275" fg:w="5"/><text x="10.1385%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="10.2122%" y="133" width="0.0719%" height="15" fill="rgb(248,9,4)" fg:x="284" fg:w="2"/><text x="10.4622%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.29%)</title><rect x="10.0683%" y="197" width="0.2877%" height="15" fill="rgb(210,31,22)" fg:x="280" fg:w="8"/><text x="10.3183%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.29%)</title><rect x="10.0683%" y="181" width="0.2877%" height="15" fill="rgb(239,54,39)" fg:x="280" fg:w="8"/><text x="10.3183%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.29%)</title><rect x="10.0683%" y="165" width="0.2877%" height="15" fill="rgb(230,99,41)" fg:x="280" fg:w="8"/><text x="10.3183%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.25%)</title><rect x="10.1043%" y="149" width="0.2517%" height="15" fill="rgb(253,106,12)" fg:x="281" fg:w="7"/><text x="10.3543%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="10.2841%" y="133" width="0.0719%" height="15" fill="rgb(213,46,41)" fg:x="286" fg:w="2"/><text x="10.5341%" y="143.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="10.3560%" y="197" width="0.0360%" height="15" fill="rgb(215,133,35)" fg:x="288" fg:w="1"/><text x="10.6060%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="10.4639%" y="101" width="0.0360%" height="15" fill="rgb(213,28,5)" fg:x="291" fg:w="1"/><text x="10.7139%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="10.3919%" y="149" width="0.1798%" height="15" fill="rgb(215,77,49)" fg:x="289" fg:w="5"/><text x="10.6419%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="10.3919%" y="133" width="0.1798%" height="15" fill="rgb(248,100,22)" fg:x="289" fg:w="5"/><text x="10.6419%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="10.3919%" y="117" width="0.1798%" height="15" fill="rgb(208,67,9)" fg:x="289" fg:w="5"/><text x="10.6419%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.07%)</title><rect x="10.4998%" y="101" width="0.0719%" height="15" fill="rgb(219,133,21)" fg:x="292" fg:w="2"/><text x="10.7498%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.58%)</title><rect x="10.0683%" y="229" width="0.5753%" height="15" fill="rgb(246,46,29)" fg:x="280" fg:w="16"/><text x="10.3183%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.58%)</title><rect x="10.0683%" y="213" width="0.5753%" height="15" fill="rgb(246,185,52)" fg:x="280" fg:w="16"/><text x="10.3183%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.25%)</title><rect x="10.3919%" y="197" width="0.2517%" height="15" fill="rgb(252,136,11)" fg:x="289" fg:w="7"/><text x="10.6419%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (7 samples, 0.25%)</title><rect x="10.3919%" y="181" width="0.2517%" height="15" fill="rgb(219,138,53)" fg:x="289" fg:w="7"/><text x="10.6419%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.25%)</title><rect x="10.3919%" y="165" width="0.2517%" height="15" fill="rgb(211,51,23)" fg:x="289" fg:w="7"/><text x="10.6419%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.07%)</title><rect x="10.5717%" y="149" width="0.0719%" height="15" fill="rgb(247,221,28)" fg:x="294" fg:w="2"/><text x="10.8217%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="10.6437%" y="213" width="0.0360%" height="15" fill="rgb(251,222,45)" fg:x="296" fg:w="1"/><text x="10.8937%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="10.6437%" y="197" width="0.0360%" height="15" fill="rgb(217,162,53)" fg:x="296" fg:w="1"/><text x="10.8937%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.04%)</title><rect x="10.6437%" y="181" width="0.0360%" height="15" fill="rgb(229,93,14)" fg:x="296" fg:w="1"/><text x="10.8937%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="10.6437%" y="165" width="0.0360%" height="15" fill="rgb(209,67,49)" fg:x="296" fg:w="1"/><text x="10.8937%" y="175.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="10.6437%" y="149" width="0.0360%" height="15" fill="rgb(213,87,29)" fg:x="296" fg:w="1"/><text x="10.8937%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="10.6437%" y="133" width="0.0360%" height="15" fill="rgb(205,151,52)" fg:x="296" fg:w="1"/><text x="10.8937%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.04%)</title><rect x="11.0392%" y="165" width="0.0360%" height="15" fill="rgb(253,215,39)" fg:x="307" fg:w="1"/><text x="11.2892%" y="175.50"></text></g><g><title>ahc30_a::Problem::select_row (140 samples, 5.03%)</title><rect x="6.0770%" y="309" width="5.0342%" height="15" fill="rgb(221,220,41)" fg:x="169" fg:w="140"/><text x="6.3270%" y="319.50">ahc30_..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (29 samples, 1.04%)</title><rect x="10.0683%" y="293" width="1.0428%" height="15" fill="rgb(218,133,21)" fg:x="280" fg:w="29"/><text x="10.3183%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (29 samples, 1.04%)</title><rect x="10.0683%" y="277" width="1.0428%" height="15" fill="rgb(221,193,43)" fg:x="280" fg:w="29"/><text x="10.3183%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (29 samples, 1.04%)</title><rect x="10.0683%" y="261" width="1.0428%" height="15" fill="rgb(240,128,52)" fg:x="280" fg:w="29"/><text x="10.3183%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (29 samples, 1.04%)</title><rect x="10.0683%" y="245" width="1.0428%" height="15" fill="rgb(253,114,12)" fg:x="280" fg:w="29"/><text x="10.3183%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (13 samples, 0.47%)</title><rect x="10.6437%" y="229" width="0.4675%" height="15" fill="rgb(215,223,47)" fg:x="296" fg:w="13"/><text x="10.8937%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (12 samples, 0.43%)</title><rect x="10.6796%" y="213" width="0.4315%" height="15" fill="rgb(248,225,23)" fg:x="297" fg:w="12"/><text x="10.9296%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (12 samples, 0.43%)</title><rect x="10.6796%" y="197" width="0.4315%" height="15" fill="rgb(250,108,0)" fg:x="297" fg:w="12"/><text x="10.9296%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (12 samples, 0.43%)</title><rect x="10.6796%" y="181" width="0.4315%" height="15" fill="rgb(228,208,7)" fg:x="297" fg:w="12"/><text x="10.9296%" y="191.50"></text></g><g><title>hashbrown::raw::neon::Group::match_empty (1 samples, 0.04%)</title><rect x="11.0752%" y="165" width="0.0360%" height="15" fill="rgb(244,45,10)" fg:x="308" fg:w="1"/><text x="11.3252%" y="175.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (1 samples, 0.04%)</title><rect x="11.0752%" y="149" width="0.0360%" height="15" fill="rgb(207,125,25)" fg:x="308" fg:w="1"/><text x="11.3252%" y="159.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="11.0752%" y="133" width="0.0360%" height="15" fill="rgb(210,195,18)" fg:x="308" fg:w="1"/><text x="11.3252%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.50%)</title><rect x="12.0460%" y="197" width="0.5034%" height="15" fill="rgb(249,80,12)" fg:x="335" fg:w="14"/><text x="12.2960%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.36%)</title><rect x="12.1899%" y="181" width="0.3596%" height="15" fill="rgb(221,65,9)" fg:x="339" fg:w="10"/><text x="12.4399%" y="191.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.19%)</title><rect x="11.6864%" y="293" width="1.1866%" height="15" fill="rgb(235,49,36)" fg:x="325" fg:w="33"/><text x="11.9364%" y="303.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.19%)</title><rect x="11.6864%" y="277" width="1.1866%" height="15" fill="rgb(225,32,20)" fg:x="325" fg:w="33"/><text x="11.9364%" y="287.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.19%)</title><rect x="11.6864%" y="261" width="1.1866%" height="15" fill="rgb(215,141,46)" fg:x="325" fg:w="33"/><text x="11.9364%" y="271.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.19%)</title><rect x="11.6864%" y="245" width="1.1866%" height="15" fill="rgb(250,160,47)" fg:x="325" fg:w="33"/><text x="11.9364%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.19%)</title><rect x="11.6864%" y="229" width="1.1866%" height="15" fill="rgb(216,222,40)" fg:x="325" fg:w="33"/><text x="11.9364%" y="239.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (23 samples, 0.83%)</title><rect x="12.0460%" y="213" width="0.8270%" height="15" fill="rgb(234,217,39)" fg:x="335" fg:w="23"/><text x="12.2960%" y="223.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (9 samples, 0.32%)</title><rect x="12.5494%" y="197" width="0.3236%" height="15" fill="rgb(207,178,40)" fg:x="349" fg:w="9"/><text x="12.7994%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (9 samples, 0.32%)</title><rect x="12.5494%" y="181" width="0.3236%" height="15" fill="rgb(221,136,13)" fg:x="349" fg:w="9"/><text x="12.7994%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (9 samples, 0.32%)</title><rect x="12.5494%" y="165" width="0.3236%" height="15" fill="rgb(249,199,10)" fg:x="349" fg:w="9"/><text x="12.7994%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.32%)</title><rect x="12.5494%" y="149" width="0.3236%" height="15" fill="rgb(249,222,13)" fg:x="349" fg:w="9"/><text x="12.7994%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.76%)</title><rect x="16.1453%" y="277" width="0.7551%" height="15" fill="rgb(244,185,38)" fg:x="449" fg:w="21"/><text x="16.3953%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.76%)</title><rect x="16.1453%" y="261" width="0.7551%" height="15" fill="rgb(236,202,9)" fg:x="449" fg:w="21"/><text x="16.3953%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.76%)</title><rect x="16.1453%" y="245" width="0.7551%" height="15" fill="rgb(250,229,37)" fg:x="449" fg:w="21"/><text x="16.3953%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (29 samples, 1.04%)</title><rect x="19.7051%" y="261" width="1.0428%" height="15" fill="rgb(206,174,23)" fg:x="548" fg:w="29"/><text x="19.9551%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 1.04%)</title><rect x="19.7051%" y="245" width="1.0428%" height="15" fill="rgb(211,33,43)" fg:x="548" fg:w="29"/><text x="19.9551%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 1.04%)</title><rect x="19.7051%" y="229" width="1.0428%" height="15" fill="rgb(245,58,50)" fg:x="548" fg:w="29"/><text x="19.9551%" y="239.50"></text></g><g><title>ahc30_a::Problem::cover (109 samples, 3.92%)</title><rect x="16.9004%" y="277" width="3.9195%" height="15" fill="rgb(244,68,36)" fg:x="470" fg:w="109"/><text x="17.1504%" y="287.50">ahc3..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="20.7479%" y="261" width="0.0719%" height="15" fill="rgb(232,229,15)" fg:x="577" fg:w="2"/><text x="20.9979%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="20.7479%" y="245" width="0.0719%" height="15" fill="rgb(254,30,23)" fg:x="577" fg:w="2"/><text x="20.9979%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="20.7479%" y="229" width="0.0719%" height="15" fill="rgb(235,160,14)" fg:x="577" fg:w="2"/><text x="20.9979%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.18%)</title><rect x="21.1435%" y="117" width="0.1798%" height="15" fill="rgb(212,155,44)" fg:x="588" fg:w="5"/><text x="21.3935%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="21.0716%" y="181" width="0.3236%" height="15" fill="rgb(226,2,50)" fg:x="586" fg:w="9"/><text x="21.3216%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="21.0716%" y="165" width="0.3236%" height="15" fill="rgb(234,177,6)" fg:x="586" fg:w="9"/><text x="21.3216%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="21.0716%" y="149" width="0.3236%" height="15" fill="rgb(217,24,9)" fg:x="586" fg:w="9"/><text x="21.3216%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.25%)</title><rect x="21.1435%" y="133" width="0.2517%" height="15" fill="rgb(220,13,46)" fg:x="588" fg:w="7"/><text x="21.3935%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="21.3233%" y="117" width="0.0719%" height="15" fill="rgb(239,221,27)" fg:x="593" fg:w="2"/><text x="21.5733%" y="127.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="21.3952%" y="181" width="0.0360%" height="15" fill="rgb(222,198,25)" fg:x="595" fg:w="1"/><text x="21.6452%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.14%)</title><rect x="21.5750%" y="85" width="0.1438%" height="15" fill="rgb(211,99,13)" fg:x="600" fg:w="4"/><text x="21.8250%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="21.6828%" y="69" width="0.0360%" height="15" fill="rgb(232,111,31)" fg:x="603" fg:w="1"/><text x="21.9328%" y="79.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.36%)</title><rect x="21.4311%" y="133" width="0.3596%" height="15" fill="rgb(245,82,37)" fg:x="596" fg:w="10"/><text x="21.6811%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.36%)</title><rect x="21.4311%" y="117" width="0.3596%" height="15" fill="rgb(227,149,46)" fg:x="596" fg:w="10"/><text x="21.6811%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.36%)</title><rect x="21.4311%" y="101" width="0.3596%" height="15" fill="rgb(218,36,50)" fg:x="596" fg:w="10"/><text x="21.6811%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.07%)</title><rect x="21.7188%" y="85" width="0.0719%" height="15" fill="rgb(226,80,48)" fg:x="604" fg:w="2"/><text x="21.9688%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 1.04%)</title><rect x="20.8918%" y="213" width="1.0428%" height="15" fill="rgb(238,224,15)" fg:x="581" fg:w="29"/><text x="21.1418%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26 samples, 0.93%)</title><rect x="20.9996%" y="197" width="0.9349%" height="15" fill="rgb(241,136,10)" fg:x="584" fg:w="26"/><text x="21.2496%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.50%)</title><rect x="21.4311%" y="181" width="0.5034%" height="15" fill="rgb(208,32,45)" fg:x="596" fg:w="14"/><text x="21.6811%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (14 samples, 0.50%)</title><rect x="21.4311%" y="165" width="0.5034%" height="15" fill="rgb(207,135,9)" fg:x="596" fg:w="14"/><text x="21.6811%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.50%)</title><rect x="21.4311%" y="149" width="0.5034%" height="15" fill="rgb(206,86,44)" fg:x="596" fg:w="14"/><text x="21.6811%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (4 samples, 0.14%)</title><rect x="21.7907%" y="133" width="0.1438%" height="15" fill="rgb(245,177,15)" fg:x="606" fg:w="4"/><text x="22.0407%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="21.9705%" y="165" width="0.0360%" height="15" fill="rgb(206,64,50)" fg:x="611" fg:w="1"/><text x="22.2205%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="21.9705%" y="149" width="0.0360%" height="15" fill="rgb(234,36,40)" fg:x="611" fg:w="1"/><text x="22.2205%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.07%)</title><rect x="22.0065%" y="165" width="0.0719%" height="15" fill="rgb(213,64,8)" fg:x="612" fg:w="2"/><text x="22.2565%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="22.0065%" y="149" width="0.0719%" height="15" fill="rgb(210,75,36)" fg:x="612" fg:w="2"/><text x="22.2565%" y="159.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.07%)</title><rect x="22.0065%" y="133" width="0.0719%" height="15" fill="rgb(229,88,21)" fg:x="612" fg:w="2"/><text x="22.2565%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.07%)</title><rect x="22.0065%" y="117" width="0.0719%" height="15" fill="rgb(252,204,47)" fg:x="612" fg:w="2"/><text x="22.2565%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.18%)</title><rect x="21.9346%" y="197" width="0.1798%" height="15" fill="rgb(208,77,27)" fg:x="610" fg:w="5"/><text x="22.1846%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.18%)</title><rect x="21.9346%" y="181" width="0.1798%" height="15" fill="rgb(221,76,26)" fg:x="610" fg:w="5"/><text x="22.1846%" y="191.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (1 samples, 0.04%)</title><rect x="22.0784%" y="165" width="0.0360%" height="15" fill="rgb(225,139,18)" fg:x="614" fg:w="1"/><text x="22.3284%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="22.0784%" y="149" width="0.0360%" height="15" fill="rgb(230,137,11)" fg:x="614" fg:w="1"/><text x="22.3284%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::leading_zeros (1 samples, 0.04%)</title><rect x="22.8695%" y="149" width="0.0360%" height="15" fill="rgb(212,28,1)" fg:x="636" fg:w="1"/><text x="23.1195%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (1 samples, 0.04%)</title><rect x="22.8695%" y="133" width="0.0360%" height="15" fill="rgb(248,164,17)" fg:x="636" fg:w="1"/><text x="23.1195%" y="143.50"></text></g><g><title>ahc30_a::Problem::select_row (281 samples, 10.10%)</title><rect x="12.8731%" y="293" width="10.1043%" height="15" fill="rgb(222,171,42)" fg:x="358" fg:w="281"/><text x="13.1231%" y="303.50">ahc30_a::Proble..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (60 samples, 2.16%)</title><rect x="20.8198%" y="277" width="2.1575%" height="15" fill="rgb(243,84,45)" fg:x="579" fg:w="60"/><text x="21.0698%" y="287.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (60 samples, 2.16%)</title><rect x="20.8198%" y="261" width="2.1575%" height="15" fill="rgb(252,49,23)" fg:x="579" fg:w="60"/><text x="21.0698%" y="271.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (60 samples, 2.16%)</title><rect x="20.8198%" y="245" width="2.1575%" height="15" fill="rgb(215,19,7)" fg:x="579" fg:w="60"/><text x="21.0698%" y="255.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (60 samples, 2.16%)</title><rect x="20.8198%" y="229" width="2.1575%" height="15" fill="rgb(238,81,41)" fg:x="579" fg:w="60"/><text x="21.0698%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (29 samples, 1.04%)</title><rect x="21.9346%" y="213" width="1.0428%" height="15" fill="rgb(210,199,37)" fg:x="610" fg:w="29"/><text x="22.1846%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (24 samples, 0.86%)</title><rect x="22.1143%" y="197" width="0.8630%" height="15" fill="rgb(244,192,49)" fg:x="615" fg:w="24"/><text x="22.3643%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (24 samples, 0.86%)</title><rect x="22.1143%" y="181" width="0.8630%" height="15" fill="rgb(226,211,11)" fg:x="615" fg:w="24"/><text x="22.3643%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (24 samples, 0.86%)</title><rect x="22.1143%" y="165" width="0.8630%" height="15" fill="rgb(236,162,54)" fg:x="615" fg:w="24"/><text x="22.3643%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::trailing_zeros (2 samples, 0.07%)</title><rect x="22.9054%" y="149" width="0.0719%" height="15" fill="rgb(220,229,9)" fg:x="637" fg:w="2"/><text x="23.1554%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (2 samples, 0.07%)</title><rect x="22.9054%" y="133" width="0.0719%" height="15" fill="rgb(250,87,22)" fg:x="637" fg:w="2"/><text x="23.1554%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.47%)</title><rect x="25.0629%" y="181" width="0.4675%" height="15" fill="rgb(239,43,17)" fg:x="697" fg:w="13"/><text x="25.3129%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.25%)</title><rect x="25.2787%" y="165" width="0.2517%" height="15" fill="rgb(231,177,25)" fg:x="703" fg:w="7"/><text x="25.5287%" y="175.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (10 samples, 0.36%)</title><rect x="25.5304%" y="181" width="0.3596%" height="15" fill="rgb(219,179,1)" fg:x="710" fg:w="10"/><text x="25.7804%" y="191.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (10 samples, 0.36%)</title><rect x="25.5304%" y="165" width="0.3596%" height="15" fill="rgb(238,219,53)" fg:x="710" fg:w="10"/><text x="25.7804%" y="175.50"></text></g><g><title>core::ptr::read_unaligned (10 samples, 0.36%)</title><rect x="25.5304%" y="149" width="0.3596%" height="15" fill="rgb(232,167,36)" fg:x="710" fg:w="10"/><text x="25.7804%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.36%)</title><rect x="25.5304%" y="133" width="0.3596%" height="15" fill="rgb(244,19,51)" fg:x="710" fg:w="10"/><text x="25.7804%" y="143.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.65%)</title><rect x="24.3797%" y="277" width="1.6541%" height="15" fill="rgb(224,6,22)" fg:x="678" fg:w="46"/><text x="24.6297%" y="287.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.65%)</title><rect x="24.3797%" y="261" width="1.6541%" height="15" fill="rgb(224,145,5)" fg:x="678" fg:w="46"/><text x="24.6297%" y="271.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.65%)</title><rect x="24.3797%" y="245" width="1.6541%" height="15" fill="rgb(234,130,49)" fg:x="678" fg:w="46"/><text x="24.6297%" y="255.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.65%)</title><rect x="24.3797%" y="229" width="1.6541%" height="15" fill="rgb(254,6,2)" fg:x="678" fg:w="46"/><text x="24.6297%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.65%)</title><rect x="24.3797%" y="213" width="1.6541%" height="15" fill="rgb(208,96,46)" fg:x="678" fg:w="46"/><text x="24.6297%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (27 samples, 0.97%)</title><rect x="25.0629%" y="197" width="0.9709%" height="15" fill="rgb(239,3,39)" fg:x="697" fg:w="27"/><text x="25.3129%" y="207.50"></text></g><g><title>hashbrown::raw::neon::Group::match_full (4 samples, 0.14%)</title><rect x="25.8900%" y="181" width="0.1438%" height="15" fill="rgb(233,210,1)" fg:x="720" fg:w="4"/><text x="26.1400%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (4 samples, 0.14%)</title><rect x="25.8900%" y="165" width="0.1438%" height="15" fill="rgb(244,137,37)" fg:x="720" fg:w="4"/><text x="26.1400%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.40%)</title><rect x="29.7375%" y="261" width="0.3955%" height="15" fill="rgb(240,136,2)" fg:x="827" fg:w="11"/><text x="29.9875%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.40%)</title><rect x="29.7375%" y="245" width="0.3955%" height="15" fill="rgb(239,18,37)" fg:x="827" fg:w="11"/><text x="29.9875%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.40%)</title><rect x="29.7375%" y="229" width="0.3955%" height="15" fill="rgb(218,185,22)" fg:x="827" fg:w="11"/><text x="29.9875%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.83%)</title><rect x="32.2186%" y="245" width="0.8270%" height="15" fill="rgb(225,218,4)" fg:x="896" fg:w="23"/><text x="32.4686%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (23 samples, 0.83%)</title><rect x="32.2186%" y="229" width="0.8270%" height="15" fill="rgb(230,182,32)" fg:x="896" fg:w="23"/><text x="32.4686%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (23 samples, 0.83%)</title><rect x="32.2186%" y="213" width="0.8270%" height="15" fill="rgb(242,56,43)" fg:x="896" fg:w="23"/><text x="32.4686%" y="223.50"></text></g><g><title>ahc30_a::Problem::cover (83 samples, 2.98%)</title><rect x="30.1330%" y="261" width="2.9845%" height="15" fill="rgb(233,99,24)" fg:x="838" fg:w="83"/><text x="30.3830%" y="271.50">ahc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="33.0457%" y="245" width="0.0719%" height="15" fill="rgb(234,209,42)" fg:x="919" fg:w="2"/><text x="33.2957%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="33.0457%" y="229" width="0.0719%" height="15" fill="rgb(227,7,12)" fg:x="919" fg:w="2"/><text x="33.2957%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="33.0457%" y="213" width="0.0719%" height="15" fill="rgb(245,203,43)" fg:x="919" fg:w="2"/><text x="33.2957%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.14%)</title><rect x="33.4052%" y="101" width="0.1438%" height="15" fill="rgb(238,205,33)" fg:x="929" fg:w="4"/><text x="33.6552%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.40%)</title><rect x="33.2614%" y="165" width="0.3955%" height="15" fill="rgb(231,56,7)" fg:x="925" fg:w="11"/><text x="33.5114%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.40%)</title><rect x="33.2614%" y="149" width="0.3955%" height="15" fill="rgb(244,186,29)" fg:x="925" fg:w="11"/><text x="33.5114%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.40%)</title><rect x="33.2614%" y="133" width="0.3955%" height="15" fill="rgb(234,111,31)" fg:x="925" fg:w="11"/><text x="33.5114%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.32%)</title><rect x="33.3333%" y="117" width="0.3236%" height="15" fill="rgb(241,149,10)" fg:x="927" fg:w="9"/><text x="33.5833%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="33.5491%" y="101" width="0.1079%" height="15" fill="rgb(249,206,44)" fg:x="933" fg:w="3"/><text x="33.7991%" y="111.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.07%)</title><rect x="33.6570%" y="165" width="0.0719%" height="15" fill="rgb(251,153,30)" fg:x="936" fg:w="2"/><text x="33.9070%" y="175.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="33.6929%" y="149" width="0.0360%" height="15" fill="rgb(239,152,38)" fg:x="937" fg:w="1"/><text x="33.9429%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="33.6929%" y="133" width="0.0360%" height="15" fill="rgb(249,139,47)" fg:x="937" fg:w="1"/><text x="33.9429%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="33.6929%" y="117" width="0.0360%" height="15" fill="rgb(244,64,35)" fg:x="937" fg:w="1"/><text x="33.9429%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.29%)</title><rect x="33.9806%" y="69" width="0.2877%" height="15" fill="rgb(216,46,15)" fg:x="945" fg:w="8"/><text x="34.2306%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.18%)</title><rect x="34.0885%" y="53" width="0.1798%" height="15" fill="rgb(250,74,19)" fg:x="948" fg:w="5"/><text x="34.3385%" y="63.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.50%)</title><rect x="33.8367%" y="117" width="0.5034%" height="15" fill="rgb(249,42,33)" fg:x="941" fg:w="14"/><text x="34.0867%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.50%)</title><rect x="33.8367%" y="101" width="0.5034%" height="15" fill="rgb(242,149,17)" fg:x="941" fg:w="14"/><text x="34.0867%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.50%)</title><rect x="33.8367%" y="85" width="0.5034%" height="15" fill="rgb(244,29,21)" fg:x="941" fg:w="14"/><text x="34.0867%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.07%)</title><rect x="34.2682%" y="69" width="0.0719%" height="15" fill="rgb(220,130,37)" fg:x="953" fg:w="2"/><text x="34.5182%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (37 samples, 1.33%)</title><rect x="33.1176%" y="197" width="1.3305%" height="15" fill="rgb(211,67,2)" fg:x="921" fg:w="37"/><text x="33.3676%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (37 samples, 1.33%)</title><rect x="33.1176%" y="181" width="1.3305%" height="15" fill="rgb(235,68,52)" fg:x="921" fg:w="37"/><text x="33.3676%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (20 samples, 0.72%)</title><rect x="33.7289%" y="165" width="0.7192%" height="15" fill="rgb(246,142,3)" fg:x="938" fg:w="20"/><text x="33.9789%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (17 samples, 0.61%)</title><rect x="33.8367%" y="149" width="0.6113%" height="15" fill="rgb(241,25,7)" fg:x="941" fg:w="17"/><text x="34.0867%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.61%)</title><rect x="33.8367%" y="133" width="0.6113%" height="15" fill="rgb(242,119,39)" fg:x="941" fg:w="17"/><text x="34.0867%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.11%)</title><rect x="34.3402%" y="117" width="0.1079%" height="15" fill="rgb(241,98,45)" fg:x="955" fg:w="3"/><text x="34.5902%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (6 samples, 0.22%)</title><rect x="34.4480%" y="149" width="0.2157%" height="15" fill="rgb(254,28,30)" fg:x="958" fg:w="6"/><text x="34.6980%" y="159.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.22%)</title><rect x="34.4480%" y="133" width="0.2157%" height="15" fill="rgb(241,142,54)" fg:x="958" fg:w="6"/><text x="34.6980%" y="143.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (6 samples, 0.22%)</title><rect x="34.4480%" y="117" width="0.2157%" height="15" fill="rgb(222,85,15)" fg:x="958" fg:w="6"/><text x="34.6980%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.22%)</title><rect x="34.4480%" y="101" width="0.2157%" height="15" fill="rgb(210,85,47)" fg:x="958" fg:w="6"/><text x="34.6980%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.07%)</title><rect x="34.6638%" y="149" width="0.0719%" height="15" fill="rgb(224,206,25)" fg:x="964" fg:w="2"/><text x="34.9138%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.36%)</title><rect x="34.4480%" y="181" width="0.3596%" height="15" fill="rgb(243,201,19)" fg:x="958" fg:w="10"/><text x="34.6980%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.36%)</title><rect x="34.4480%" y="165" width="0.3596%" height="15" fill="rgb(236,59,4)" fg:x="958" fg:w="10"/><text x="34.6980%" y="175.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (2 samples, 0.07%)</title><rect x="34.7357%" y="149" width="0.0719%" height="15" fill="rgb(254,179,45)" fg:x="966" fg:w="2"/><text x="34.9857%" y="159.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.07%)</title><rect x="34.7357%" y="133" width="0.0719%" height="15" fill="rgb(226,14,10)" fg:x="966" fg:w="2"/><text x="34.9857%" y="143.50"></text></g><g><title>ahc30_a::Problem::select_row (268 samples, 9.64%)</title><rect x="26.0338%" y="277" width="9.6368%" height="15" fill="rgb(244,27,41)" fg:x="724" fg:w="268"/><text x="26.2838%" y="287.50">ahc30_a::Probl..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (71 samples, 2.55%)</title><rect x="33.1176%" y="261" width="2.5530%" height="15" fill="rgb(235,35,32)" fg:x="921" fg:w="71"/><text x="33.3676%" y="271.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (71 samples, 2.55%)</title><rect x="33.1176%" y="245" width="2.5530%" height="15" fill="rgb(218,68,31)" fg:x="921" fg:w="71"/><text x="33.3676%" y="255.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (71 samples, 2.55%)</title><rect x="33.1176%" y="229" width="2.5530%" height="15" fill="rgb(207,120,37)" fg:x="921" fg:w="71"/><text x="33.3676%" y="239.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (71 samples, 2.55%)</title><rect x="33.1176%" y="213" width="2.5530%" height="15" fill="rgb(227,98,0)" fg:x="921" fg:w="71"/><text x="33.3676%" y="223.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (34 samples, 1.22%)</title><rect x="34.4480%" y="197" width="1.2226%" height="15" fill="rgb(207,7,3)" fg:x="958" fg:w="34"/><text x="34.6980%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (24 samples, 0.86%)</title><rect x="34.8076%" y="181" width="0.8630%" height="15" fill="rgb(206,98,19)" fg:x="968" fg:w="24"/><text x="35.0576%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (24 samples, 0.86%)</title><rect x="34.8076%" y="165" width="0.8630%" height="15" fill="rgb(217,5,26)" fg:x="968" fg:w="24"/><text x="35.0576%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (24 samples, 0.86%)</title><rect x="34.8076%" y="149" width="0.8630%" height="15" fill="rgb(235,190,38)" fg:x="968" fg:w="24"/><text x="35.0576%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 1.04%)</title><rect x="37.5045%" y="165" width="1.0428%" height="15" fill="rgb(247,86,24)" fg:x="1043" fg:w="29"/><text x="37.7545%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (22 samples, 0.79%)</title><rect x="37.7562%" y="149" width="0.7911%" height="15" fill="rgb(205,101,16)" fg:x="1050" fg:w="22"/><text x="38.0062%" y="159.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (23 samples, 0.83%)</title><rect x="38.5473%" y="165" width="0.8270%" height="15" fill="rgb(246,168,33)" fg:x="1072" fg:w="23"/><text x="38.7973%" y="175.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (23 samples, 0.83%)</title><rect x="38.5473%" y="149" width="0.8270%" height="15" fill="rgb(231,114,1)" fg:x="1072" fg:w="23"/><text x="38.7973%" y="159.50"></text></g><g><title>core::ptr::read_unaligned (23 samples, 0.83%)</title><rect x="38.5473%" y="133" width="0.8270%" height="15" fill="rgb(207,184,53)" fg:x="1072" fg:w="23"/><text x="38.7973%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.83%)</title><rect x="38.5473%" y="117" width="0.8270%" height="15" fill="rgb(224,95,51)" fg:x="1072" fg:w="23"/><text x="38.7973%" y="127.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 2.77%)</title><rect x="36.8213%" y="261" width="2.7688%" height="15" fill="rgb(212,188,45)" fg:x="1024" fg:w="77"/><text x="37.0713%" y="271.50">&lt;s..</text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 2.77%)</title><rect x="36.8213%" y="245" width="2.7688%" height="15" fill="rgb(223,154,38)" fg:x="1024" fg:w="77"/><text x="37.0713%" y="255.50">&lt;h..</text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 2.77%)</title><rect x="36.8213%" y="229" width="2.7688%" height="15" fill="rgb(251,22,52)" fg:x="1024" fg:w="77"/><text x="37.0713%" y="239.50">&lt;h..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 2.77%)</title><rect x="36.8213%" y="213" width="2.7688%" height="15" fill="rgb(229,209,22)" fg:x="1024" fg:w="77"/><text x="37.0713%" y="223.50">&lt;h..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 2.77%)</title><rect x="36.8213%" y="197" width="2.7688%" height="15" fill="rgb(234,138,34)" fg:x="1024" fg:w="77"/><text x="37.0713%" y="207.50">&lt;h..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (58 samples, 2.09%)</title><rect x="37.5045%" y="181" width="2.0856%" height="15" fill="rgb(212,95,11)" fg:x="1043" fg:w="58"/><text x="37.7545%" y="191.50">h..</text></g><g><title>hashbrown::raw::neon::Group::match_full (6 samples, 0.22%)</title><rect x="39.3743%" y="165" width="0.2157%" height="15" fill="rgb(240,179,47)" fg:x="1095" fg:w="6"/><text x="39.6243%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (6 samples, 0.22%)</title><rect x="39.3743%" y="149" width="0.2157%" height="15" fill="rgb(240,163,11)" fg:x="1095" fg:w="6"/><text x="39.6243%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.47%)</title><rect x="40.9205%" y="245" width="0.4675%" height="15" fill="rgb(236,37,12)" fg:x="1138" fg:w="13"/><text x="41.1705%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.47%)</title><rect x="40.9205%" y="229" width="0.4675%" height="15" fill="rgb(232,164,16)" fg:x="1138" fg:w="13"/><text x="41.1705%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.47%)</title><rect x="40.9205%" y="213" width="0.4675%" height="15" fill="rgb(244,205,15)" fg:x="1138" fg:w="13"/><text x="41.1705%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.3880%" y="245" width="0.0360%" height="15" fill="rgb(223,117,47)" fg:x="1151" fg:w="1"/><text x="41.6380%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.3880%" y="229" width="0.0360%" height="15" fill="rgb(244,107,35)" fg:x="1151" fg:w="1"/><text x="41.6380%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.3880%" y="213" width="0.0360%" height="15" fill="rgb(205,140,8)" fg:x="1151" fg:w="1"/><text x="41.6380%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.25%)</title><rect x="42.6106%" y="229" width="0.2517%" height="15" fill="rgb(228,84,46)" fg:x="1185" fg:w="7"/><text x="42.8606%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.25%)</title><rect x="42.6106%" y="213" width="0.2517%" height="15" fill="rgb(254,188,9)" fg:x="1185" fg:w="7"/><text x="42.8606%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.25%)</title><rect x="42.6106%" y="197" width="0.2517%" height="15" fill="rgb(206,112,54)" fg:x="1185" fg:w="7"/><text x="42.8606%" y="207.50"></text></g><g><title>ahc30_a::Problem::cover (41 samples, 1.47%)</title><rect x="41.4239%" y="245" width="1.4743%" height="15" fill="rgb(216,84,49)" fg:x="1152" fg:w="41"/><text x="41.6739%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="42.8623%" y="229" width="0.0360%" height="15" fill="rgb(214,194,35)" fg:x="1192" fg:w="1"/><text x="43.1123%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="42.8623%" y="213" width="0.0360%" height="15" fill="rgb(249,28,3)" fg:x="1192" fg:w="1"/><text x="43.1123%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="42.8623%" y="197" width="0.0360%" height="15" fill="rgb(222,56,52)" fg:x="1192" fg:w="1"/><text x="43.1123%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="43.1140%" y="85" width="0.1079%" height="15" fill="rgb(245,217,50)" fg:x="1199" fg:w="3"/><text x="43.3640%" y="95.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="43.0421%" y="149" width="0.2517%" height="15" fill="rgb(213,201,24)" fg:x="1197" fg:w="7"/><text x="43.2921%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="43.0421%" y="133" width="0.2517%" height="15" fill="rgb(248,116,28)" fg:x="1197" fg:w="7"/><text x="43.2921%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="43.0421%" y="117" width="0.2517%" height="15" fill="rgb(219,72,43)" fg:x="1197" fg:w="7"/><text x="43.2921%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.22%)</title><rect x="43.0780%" y="101" width="0.2157%" height="15" fill="rgb(209,138,14)" fg:x="1198" fg:w="6"/><text x="43.3280%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="43.2219%" y="85" width="0.0719%" height="15" fill="rgb(222,18,33)" fg:x="1202" fg:w="2"/><text x="43.4719%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="43.5814%" y="37" width="0.0719%" height="15" fill="rgb(213,199,7)" fg:x="1212" fg:w="2"/><text x="43.8314%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.18%)</title><rect x="43.5095%" y="53" width="0.1798%" height="15" fill="rgb(250,110,10)" fg:x="1210" fg:w="5"/><text x="43.7595%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="43.6534%" y="37" width="0.0360%" height="15" fill="rgb(248,123,6)" fg:x="1214" fg:w="1"/><text x="43.9034%" y="47.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 0.40%)</title><rect x="43.3657%" y="101" width="0.3955%" height="15" fill="rgb(206,91,31)" fg:x="1206" fg:w="11"/><text x="43.6157%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.40%)</title><rect x="43.3657%" y="85" width="0.3955%" height="15" fill="rgb(211,154,13)" fg:x="1206" fg:w="11"/><text x="43.6157%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.40%)</title><rect x="43.3657%" y="69" width="0.3955%" height="15" fill="rgb(225,148,7)" fg:x="1206" fg:w="11"/><text x="43.6157%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.07%)</title><rect x="43.6893%" y="53" width="0.0719%" height="15" fill="rgb(220,160,43)" fg:x="1215" fg:w="2"/><text x="43.9393%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.90%)</title><rect x="42.9342%" y="181" width="0.8990%" height="15" fill="rgb(213,52,39)" fg:x="1194" fg:w="25"/><text x="43.1842%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.79%)</title><rect x="43.0421%" y="165" width="0.7911%" height="15" fill="rgb(243,137,7)" fg:x="1197" fg:w="22"/><text x="43.2921%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.54%)</title><rect x="43.2938%" y="149" width="0.5394%" height="15" fill="rgb(230,79,13)" fg:x="1204" fg:w="15"/><text x="43.5438%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (13 samples, 0.47%)</title><rect x="43.3657%" y="133" width="0.4675%" height="15" fill="rgb(247,105,23)" fg:x="1206" fg:w="13"/><text x="43.6157%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (13 samples, 0.47%)</title><rect x="43.3657%" y="117" width="0.4675%" height="15" fill="rgb(223,179,41)" fg:x="1206" fg:w="13"/><text x="43.6157%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.07%)</title><rect x="43.7612%" y="101" width="0.0719%" height="15" fill="rgb(218,9,34)" fg:x="1217" fg:w="2"/><text x="44.0112%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="43.8332%" y="133" width="0.0360%" height="15" fill="rgb(222,106,8)" fg:x="1219" fg:w="1"/><text x="44.0832%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="43.8691%" y="133" width="0.0360%" height="15" fill="rgb(211,220,0)" fg:x="1220" fg:w="1"/><text x="44.1191%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="43.8691%" y="117" width="0.0360%" height="15" fill="rgb(229,52,16)" fg:x="1220" fg:w="1"/><text x="44.1191%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.18%)</title><rect x="43.8332%" y="165" width="0.1798%" height="15" fill="rgb(212,155,18)" fg:x="1219" fg:w="5"/><text x="44.0832%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.18%)</title><rect x="43.8332%" y="149" width="0.1798%" height="15" fill="rgb(242,21,14)" fg:x="1219" fg:w="5"/><text x="44.0832%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.11%)</title><rect x="43.9051%" y="133" width="0.1079%" height="15" fill="rgb(222,19,48)" fg:x="1221" fg:w="3"/><text x="44.1551%" y="143.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.11%)</title><rect x="43.9051%" y="117" width="0.1079%" height="15" fill="rgb(232,45,27)" fg:x="1221" fg:w="3"/><text x="44.1551%" y="127.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.11%)</title><rect x="43.9051%" y="101" width="0.1079%" height="15" fill="rgb(249,103,42)" fg:x="1221" fg:w="3"/><text x="44.1551%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.11%)</title><rect x="43.9051%" y="85" width="0.1079%" height="15" fill="rgb(246,81,33)" fg:x="1221" fg:w="3"/><text x="44.1551%" y="95.50"></text></g><g><title>ahc30_a::Problem::select_row (142 samples, 5.11%)</title><rect x="39.5901%" y="261" width="5.1061%" height="15" fill="rgb(252,33,42)" fg:x="1101" fg:w="142"/><text x="39.8401%" y="271.50">ahc30_..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (50 samples, 1.80%)</title><rect x="42.8982%" y="245" width="1.7979%" height="15" fill="rgb(209,212,41)" fg:x="1193" fg:w="50"/><text x="43.1482%" y="255.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (50 samples, 1.80%)</title><rect x="42.8982%" y="229" width="1.7979%" height="15" fill="rgb(207,154,6)" fg:x="1193" fg:w="50"/><text x="43.1482%" y="239.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (50 samples, 1.80%)</title><rect x="42.8982%" y="213" width="1.7979%" height="15" fill="rgb(223,64,47)" fg:x="1193" fg:w="50"/><text x="43.1482%" y="223.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (50 samples, 1.80%)</title><rect x="42.8982%" y="197" width="1.7979%" height="15" fill="rgb(211,161,38)" fg:x="1193" fg:w="50"/><text x="43.1482%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (24 samples, 0.86%)</title><rect x="43.8332%" y="181" width="0.8630%" height="15" fill="rgb(219,138,40)" fg:x="1219" fg:w="24"/><text x="44.0832%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (19 samples, 0.68%)</title><rect x="44.0129%" y="165" width="0.6832%" height="15" fill="rgb(241,228,46)" fg:x="1224" fg:w="19"/><text x="44.2629%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (19 samples, 0.68%)</title><rect x="44.0129%" y="149" width="0.6832%" height="15" fill="rgb(223,209,38)" fg:x="1224" fg:w="19"/><text x="44.2629%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (19 samples, 0.68%)</title><rect x="44.0129%" y="133" width="0.6832%" height="15" fill="rgb(236,164,45)" fg:x="1224" fg:w="19"/><text x="44.2629%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="45.4513%" y="149" width="0.1079%" height="15" fill="rgb(231,15,5)" fg:x="1264" fg:w="3"/><text x="45.7013%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="45.4872%" y="133" width="0.0719%" height="15" fill="rgb(252,35,15)" fg:x="1265" fg:w="2"/><text x="45.7372%" y="143.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.68%)</title><rect x="45.0917%" y="245" width="0.6832%" height="15" fill="rgb(248,181,18)" fg:x="1254" fg:w="19"/><text x="45.3417%" y="255.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.68%)</title><rect x="45.0917%" y="229" width="0.6832%" height="15" fill="rgb(233,39,42)" fg:x="1254" fg:w="19"/><text x="45.3417%" y="239.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.68%)</title><rect x="45.0917%" y="213" width="0.6832%" height="15" fill="rgb(238,110,33)" fg:x="1254" fg:w="19"/><text x="45.3417%" y="223.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.68%)</title><rect x="45.0917%" y="197" width="0.6832%" height="15" fill="rgb(233,195,10)" fg:x="1254" fg:w="19"/><text x="45.3417%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.68%)</title><rect x="45.0917%" y="181" width="0.6832%" height="15" fill="rgb(254,105,3)" fg:x="1254" fg:w="19"/><text x="45.3417%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (9 samples, 0.32%)</title><rect x="45.4513%" y="165" width="0.3236%" height="15" fill="rgb(221,225,9)" fg:x="1264" fg:w="9"/><text x="45.7013%" y="175.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (6 samples, 0.22%)</title><rect x="45.5592%" y="149" width="0.2157%" height="15" fill="rgb(224,227,45)" fg:x="1267" fg:w="6"/><text x="45.8092%" y="159.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (6 samples, 0.22%)</title><rect x="45.5592%" y="133" width="0.2157%" height="15" fill="rgb(229,198,43)" fg:x="1267" fg:w="6"/><text x="45.8092%" y="143.50"></text></g><g><title>core::ptr::read_unaligned (6 samples, 0.22%)</title><rect x="45.5592%" y="117" width="0.2157%" height="15" fill="rgb(206,209,35)" fg:x="1267" fg:w="6"/><text x="45.8092%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="45.5592%" y="101" width="0.2157%" height="15" fill="rgb(245,195,53)" fg:x="1267" fg:w="6"/><text x="45.8092%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="45.7749%" y="245" width="0.0360%" height="15" fill="rgb(240,92,26)" fg:x="1273" fg:w="1"/><text x="46.0249%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1 samples, 0.04%)</title><rect x="45.8109%" y="245" width="0.0360%" height="15" fill="rgb(207,40,23)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="255.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1 samples, 0.04%)</title><rect x="45.8109%" y="229" width="0.0360%" height="15" fill="rgb(223,111,35)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1 samples, 0.04%)</title><rect x="45.8109%" y="213" width="0.0360%" height="15" fill="rgb(229,147,28)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.04%)</title><rect x="45.8109%" y="197" width="0.0360%" height="15" fill="rgb(211,29,28)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.04%)</title><rect x="45.8109%" y="181" width="0.0360%" height="15" fill="rgb(228,72,33)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.04%)</title><rect x="45.8109%" y="165" width="0.0360%" height="15" fill="rgb(205,214,31)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="45.8109%" y="149" width="0.0360%" height="15" fill="rgb(224,111,15)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="45.8109%" y="133" width="0.0360%" height="15" fill="rgb(253,21,26)" fg:x="1274" fg:w="1"/><text x="46.0609%" y="143.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.07%)</title><rect x="45.8468%" y="229" width="0.0719%" height="15" fill="rgb(245,139,43)" fg:x="1275" fg:w="2"/><text x="46.0968%" y="239.50"></text></g><g><title>std::time::Instant::duration_since (2 samples, 0.07%)</title><rect x="45.8468%" y="213" width="0.0719%" height="15" fill="rgb(252,170,7)" fg:x="1275" fg:w="2"/><text x="46.0968%" y="223.50"></text></g><g><title>std::time::Instant::checked_duration_since (2 samples, 0.07%)</title><rect x="45.8468%" y="197" width="0.0719%" height="15" fill="rgb(231,118,14)" fg:x="1275" fg:w="2"/><text x="46.0968%" y="207.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (2 samples, 0.07%)</title><rect x="45.8468%" y="181" width="0.0719%" height="15" fill="rgb(238,83,0)" fg:x="1275" fg:w="2"/><text x="46.0968%" y="191.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.07%)</title><rect x="45.8468%" y="165" width="0.0719%" height="15" fill="rgb(221,39,39)" fg:x="1275" fg:w="2"/><text x="46.0968%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="45.8828%" y="149" width="0.0360%" height="15" fill="rgb(222,119,46)" fg:x="1276" fg:w="1"/><text x="46.1328%" y="159.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="45.8828%" y="133" width="0.0360%" height="15" fill="rgb(222,165,49)" fg:x="1276" fg:w="1"/><text x="46.1328%" y="143.50"></text></g><g><title>__clock_gettime (39 samples, 1.40%)</title><rect x="45.9547%" y="181" width="1.4024%" height="15" fill="rgb(219,113,52)" fg:x="1278" fg:w="39"/><text x="46.2047%" y="191.50"></text></g><g><title>__kernel_clock_gettime (37 samples, 1.33%)</title><rect x="46.0266%" y="165" width="1.3305%" height="15" fill="rgb(214,7,15)" fg:x="1280" fg:w="37"/><text x="46.2766%" y="175.50"></text></g><g><title>ahc30_a::Problem::solve_problem (75 samples, 2.70%)</title><rect x="44.6962%" y="261" width="2.6969%" height="15" fill="rgb(235,32,4)" fg:x="1243" fg:w="75"/><text x="44.9462%" y="271.50">ah..</text></g><g><title>std::time::Instant::elapsed (43 samples, 1.55%)</title><rect x="45.8468%" y="245" width="1.5462%" height="15" fill="rgb(238,90,54)" fg:x="1275" fg:w="43"/><text x="46.0968%" y="255.50"></text></g><g><title>std::time::Instant::now (41 samples, 1.47%)</title><rect x="45.9187%" y="229" width="1.4743%" height="15" fill="rgb(213,208,19)" fg:x="1277" fg:w="41"/><text x="46.1687%" y="239.50"></text></g><g><title>std::sys::unix::time::Instant::now (41 samples, 1.47%)</title><rect x="45.9187%" y="213" width="1.4743%" height="15" fill="rgb(233,156,4)" fg:x="1277" fg:w="41"/><text x="46.1687%" y="223.50"></text></g><g><title>std::sys::unix::time::Timespec::now (41 samples, 1.47%)</title><rect x="45.9187%" y="197" width="1.4743%" height="15" fill="rgb(207,194,5)" fg:x="1277" fg:w="41"/><text x="46.1687%" y="207.50"></text></g><g><title>clock_gettime@plt (1 samples, 0.04%)</title><rect x="47.3571%" y="181" width="0.0360%" height="15" fill="rgb(206,111,30)" fg:x="1317" fg:w="1"/><text x="47.6071%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.50%)</title><rect x="49.1909%" y="245" width="0.5034%" height="15" fill="rgb(243,70,54)" fg:x="1368" fg:w="14"/><text x="49.4409%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14 samples, 0.50%)</title><rect x="49.1909%" y="229" width="0.5034%" height="15" fill="rgb(242,28,8)" fg:x="1368" fg:w="14"/><text x="49.4409%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.50%)</title><rect x="49.1909%" y="213" width="0.5034%" height="15" fill="rgb(219,106,18)" fg:x="1368" fg:w="14"/><text x="49.4409%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.43%)</title><rect x="51.4204%" y="229" width="0.4315%" height="15" fill="rgb(244,222,10)" fg:x="1430" fg:w="12"/><text x="51.6704%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (12 samples, 0.43%)</title><rect x="51.4204%" y="213" width="0.4315%" height="15" fill="rgb(236,179,52)" fg:x="1430" fg:w="12"/><text x="51.6704%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.43%)</title><rect x="51.4204%" y="197" width="0.4315%" height="15" fill="rgb(213,23,39)" fg:x="1430" fg:w="12"/><text x="51.6704%" y="207.50"></text></g><g><title>ahc30_a::Problem::uncover (62 samples, 2.23%)</title><rect x="49.6944%" y="245" width="2.2294%" height="15" fill="rgb(238,48,10)" fg:x="1382" fg:w="62"/><text x="49.9444%" y="255.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="51.8519%" y="229" width="0.0719%" height="15" fill="rgb(251,196,23)" fg:x="1442" fg:w="2"/><text x="52.1019%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="51.8519%" y="213" width="0.0719%" height="15" fill="rgb(250,152,24)" fg:x="1442" fg:w="2"/><text x="52.1019%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="51.8519%" y="197" width="0.0719%" height="15" fill="rgb(209,150,17)" fg:x="1442" fg:w="2"/><text x="52.1019%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="52.0316%" y="101" width="0.0360%" height="15" fill="rgb(234,202,34)" fg:x="1447" fg:w="1"/><text x="52.2816%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.18%)</title><rect x="51.9957%" y="165" width="0.1798%" height="15" fill="rgb(253,148,53)" fg:x="1446" fg:w="5"/><text x="52.2457%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.18%)</title><rect x="51.9957%" y="149" width="0.1798%" height="15" fill="rgb(218,129,16)" fg:x="1446" fg:w="5"/><text x="52.2457%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.18%)</title><rect x="51.9957%" y="133" width="0.1798%" height="15" fill="rgb(216,85,19)" fg:x="1446" fg:w="5"/><text x="52.2457%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.14%)</title><rect x="52.0316%" y="117" width="0.1438%" height="15" fill="rgb(235,228,7)" fg:x="1447" fg:w="4"/><text x="52.2816%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="52.0676%" y="101" width="0.1079%" height="15" fill="rgb(245,175,0)" fg:x="1448" fg:w="3"/><text x="52.3176%" y="111.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="52.1755%" y="165" width="0.0360%" height="15" fill="rgb(208,168,36)" fg:x="1451" fg:w="1"/><text x="52.4255%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="52.3193%" y="53" width="0.0719%" height="15" fill="rgb(246,171,24)" fg:x="1455" fg:w="2"/><text x="52.5693%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.11%)</title><rect x="52.3193%" y="69" width="0.1079%" height="15" fill="rgb(215,142,24)" fg:x="1455" fg:w="3"/><text x="52.5693%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="52.3912%" y="53" width="0.0360%" height="15" fill="rgb(250,187,7)" fg:x="1457" fg:w="1"/><text x="52.6412%" y="63.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="52.2834%" y="117" width="0.1798%" height="15" fill="rgb(228,66,33)" fg:x="1454" fg:w="5"/><text x="52.5334%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="52.2834%" y="101" width="0.1798%" height="15" fill="rgb(234,215,21)" fg:x="1454" fg:w="5"/><text x="52.5334%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.18%)</title><rect x="52.2834%" y="85" width="0.1798%" height="15" fill="rgb(222,191,20)" fg:x="1454" fg:w="5"/><text x="52.5334%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.04%)</title><rect x="52.4272%" y="69" width="0.0360%" height="15" fill="rgb(245,79,54)" fg:x="1458" fg:w="1"/><text x="52.6772%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.58%)</title><rect x="51.9957%" y="197" width="0.5753%" height="15" fill="rgb(240,10,37)" fg:x="1446" fg:w="16"/><text x="52.2457%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.58%)</title><rect x="51.9957%" y="181" width="0.5753%" height="15" fill="rgb(214,192,32)" fg:x="1446" fg:w="16"/><text x="52.2457%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.36%)</title><rect x="52.2114%" y="165" width="0.3596%" height="15" fill="rgb(209,36,54)" fg:x="1452" fg:w="10"/><text x="52.4614%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (8 samples, 0.29%)</title><rect x="52.2834%" y="149" width="0.2877%" height="15" fill="rgb(220,10,11)" fg:x="1454" fg:w="8"/><text x="52.5334%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.29%)</title><rect x="52.2834%" y="133" width="0.2877%" height="15" fill="rgb(221,106,17)" fg:x="1454" fg:w="8"/><text x="52.5334%" y="143.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.11%)</title><rect x="52.4631%" y="117" width="0.1079%" height="15" fill="rgb(251,142,44)" fg:x="1459" fg:w="3"/><text x="52.7131%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (2 samples, 0.07%)</title><rect x="52.5710%" y="197" width="0.0719%" height="15" fill="rgb(238,13,15)" fg:x="1462" fg:w="2"/><text x="52.8210%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="52.5710%" y="181" width="0.0719%" height="15" fill="rgb(208,107,27)" fg:x="1462" fg:w="2"/><text x="52.8210%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="52.5710%" y="165" width="0.0719%" height="15" fill="rgb(205,136,37)" fg:x="1462" fg:w="2"/><text x="52.8210%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="52.5710%" y="149" width="0.0719%" height="15" fill="rgb(250,205,27)" fg:x="1462" fg:w="2"/><text x="52.8210%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="52.6429%" y="181" width="0.0360%" height="15" fill="rgb(210,80,43)" fg:x="1464" fg:w="1"/><text x="52.8929%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="52.7868%" y="165" width="0.0360%" height="15" fill="rgb(247,160,36)" fg:x="1468" fg:w="1"/><text x="53.0368%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="52.7868%" y="149" width="0.0360%" height="15" fill="rgb(234,13,49)" fg:x="1468" fg:w="1"/><text x="53.0368%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.14%)</title><rect x="52.8227%" y="165" width="0.1438%" height="15" fill="rgb(234,122,0)" fg:x="1469" fg:w="4"/><text x="53.0727%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.14%)</title><rect x="52.8227%" y="149" width="0.1438%" height="15" fill="rgb(207,146,38)" fg:x="1469" fg:w="4"/><text x="53.0727%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.36%)</title><rect x="52.6429%" y="197" width="0.3596%" height="15" fill="rgb(207,177,25)" fg:x="1464" fg:w="10"/><text x="52.8929%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.32%)</title><rect x="52.6789%" y="181" width="0.3236%" height="15" fill="rgb(211,178,42)" fg:x="1465" fg:w="9"/><text x="52.9289%" y="191.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (1 samples, 0.04%)</title><rect x="52.9666%" y="165" width="0.0360%" height="15" fill="rgb(230,69,54)" fg:x="1473" fg:w="1"/><text x="53.2166%" y="175.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="52.9666%" y="149" width="0.0360%" height="15" fill="rgb(214,135,41)" fg:x="1473" fg:w="1"/><text x="53.2166%" y="159.50"></text></g><g><title>ahc30_a::Problem::unselect_row (157 samples, 5.65%)</title><rect x="47.3930%" y="261" width="5.6455%" height="15" fill="rgb(237,67,25)" fg:x="1318" fg:w="157"/><text x="47.6430%" y="271.50">ahc30_a..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (31 samples, 1.11%)</title><rect x="51.9238%" y="245" width="1.1147%" height="15" fill="rgb(222,189,50)" fg:x="1444" fg:w="31"/><text x="52.1738%" y="255.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (31 samples, 1.11%)</title><rect x="51.9238%" y="229" width="1.1147%" height="15" fill="rgb(245,148,34)" fg:x="1444" fg:w="31"/><text x="52.1738%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (31 samples, 1.11%)</title><rect x="51.9238%" y="213" width="1.1147%" height="15" fill="rgb(222,29,6)" fg:x="1444" fg:w="31"/><text x="52.1738%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="53.0025%" y="197" width="0.0360%" height="15" fill="rgb(221,189,43)" fg:x="1474" fg:w="1"/><text x="53.2525%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.04%)</title><rect x="53.0025%" y="181" width="0.0360%" height="15" fill="rgb(207,36,27)" fg:x="1474" fg:w="1"/><text x="53.2525%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="53.0385%" y="261" width="0.0719%" height="15" fill="rgb(217,90,24)" fg:x="1475" fg:w="2"/><text x="53.2885%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (2 samples, 0.07%)</title><rect x="53.1104%" y="261" width="0.0719%" height="15" fill="rgb(224,66,35)" fg:x="1477" fg:w="2"/><text x="53.3604%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="53.1104%" y="245" width="0.0719%" height="15" fill="rgb(221,13,50)" fg:x="1477" fg:w="2"/><text x="53.3604%" y="255.50"></text></g><g><title>core::time::Duration::as_secs_f64 (2 samples, 0.07%)</title><rect x="53.1823%" y="261" width="0.0719%" height="15" fill="rgb(236,68,49)" fg:x="1479" fg:w="2"/><text x="53.4323%" y="271.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_empty (2 samples, 0.07%)</title><rect x="53.2542%" y="261" width="0.0719%" height="15" fill="rgb(229,146,28)" fg:x="1481" fg:w="2"/><text x="53.5042%" y="271.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="53.2542%" y="245" width="0.0719%" height="15" fill="rgb(225,31,38)" fg:x="1481" fg:w="2"/><text x="53.5042%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="53.2542%" y="229" width="0.0719%" height="15" fill="rgb(250,208,3)" fg:x="1481" fg:w="2"/><text x="53.5042%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (2 samples, 0.07%)</title><rect x="53.2542%" y="213" width="0.0719%" height="15" fill="rgb(246,54,23)" fg:x="1481" fg:w="2"/><text x="53.5042%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="53.2542%" y="197" width="0.0719%" height="15" fill="rgb(243,76,11)" fg:x="1481" fg:w="2"/><text x="53.5042%" y="207.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (2 samples, 0.07%)</title><rect x="53.3261%" y="261" width="0.0719%" height="15" fill="rgb(245,21,50)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="271.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (2 samples, 0.07%)</title><rect x="53.3261%" y="245" width="0.0719%" height="15" fill="rgb(228,9,43)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (2 samples, 0.07%)</title><rect x="53.3261%" y="229" width="0.0719%" height="15" fill="rgb(208,100,47)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (2 samples, 0.07%)</title><rect x="53.3261%" y="213" width="0.0719%" height="15" fill="rgb(232,26,8)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (2 samples, 0.07%)</title><rect x="53.3261%" y="197" width="0.0719%" height="15" fill="rgb(216,166,38)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (2 samples, 0.07%)</title><rect x="53.3261%" y="181" width="0.0719%" height="15" fill="rgb(251,202,51)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="53.3261%" y="165" width="0.0719%" height="15" fill="rgb(254,216,34)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.07%)</title><rect x="53.3261%" y="149" width="0.0719%" height="15" fill="rgb(251,32,27)" fg:x="1483" fg:w="2"/><text x="53.5761%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (2 samples, 0.07%)</title><rect x="53.4340%" y="213" width="0.0719%" height="15" fill="rgb(208,127,28)" fg:x="1486" fg:w="2"/><text x="53.6840%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="53.5059%" y="165" width="0.0360%" height="15" fill="rgb(224,137,22)" fg:x="1488" fg:w="1"/><text x="53.7559%" y="175.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="53.5059%" y="149" width="0.0360%" height="15" fill="rgb(254,70,32)" fg:x="1488" fg:w="1"/><text x="53.7559%" y="159.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (5 samples, 0.18%)</title><rect x="53.4340%" y="245" width="0.1798%" height="15" fill="rgb(229,75,37)" fg:x="1486" fg:w="5"/><text x="53.6840%" y="255.50"></text></g><g><title>std::time::Instant::duration_since (5 samples, 0.18%)</title><rect x="53.4340%" y="229" width="0.1798%" height="15" fill="rgb(252,64,23)" fg:x="1486" fg:w="5"/><text x="53.6840%" y="239.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.11%)</title><rect x="53.5059%" y="213" width="0.1079%" height="15" fill="rgb(232,162,48)" fg:x="1488" fg:w="3"/><text x="53.7559%" y="223.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (3 samples, 0.11%)</title><rect x="53.5059%" y="197" width="0.1079%" height="15" fill="rgb(246,160,12)" fg:x="1488" fg:w="3"/><text x="53.7559%" y="207.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.11%)</title><rect x="53.5059%" y="181" width="0.1079%" height="15" fill="rgb(247,166,0)" fg:x="1488" fg:w="3"/><text x="53.7559%" y="191.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.07%)</title><rect x="53.5419%" y="165" width="0.0719%" height="15" fill="rgb(249,219,21)" fg:x="1489" fg:w="2"/><text x="53.7919%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (2 samples, 0.07%)</title><rect x="53.5419%" y="149" width="0.0719%" height="15" fill="rgb(205,209,3)" fg:x="1489" fg:w="2"/><text x="53.7919%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (2 samples, 0.07%)</title><rect x="53.5419%" y="133" width="0.0719%" height="15" fill="rgb(243,44,1)" fg:x="1489" fg:w="2"/><text x="53.7919%" y="143.50"></text></g><g><title>__clock_gettime (93 samples, 3.34%)</title><rect x="53.7576%" y="197" width="3.3441%" height="15" fill="rgb(206,159,16)" fg:x="1495" fg:w="93"/><text x="54.0076%" y="207.50">__c..</text></g><g><title>__kernel_clock_gettime (89 samples, 3.20%)</title><rect x="53.9015%" y="181" width="3.2003%" height="15" fill="rgb(244,77,30)" fg:x="1499" fg:w="89"/><text x="54.1515%" y="191.50">__k..</text></g><g><title>ahc30_a::Problem::solve_problem (597 samples, 21.47%)</title><rect x="35.6706%" y="277" width="21.4671%" height="15" fill="rgb(218,69,12)" fg:x="992" fg:w="597"/><text x="35.9206%" y="287.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (104 samples, 3.74%)</title><rect x="53.3981%" y="261" width="3.7397%" height="15" fill="rgb(212,87,7)" fg:x="1485" fg:w="104"/><text x="53.6481%" y="271.50">std:..</text></g><g><title>std::time::Instant::now (98 samples, 3.52%)</title><rect x="53.6138%" y="245" width="3.5239%" height="15" fill="rgb(245,114,25)" fg:x="1491" fg:w="98"/><text x="53.8638%" y="255.50">std..</text></g><g><title>std::sys::unix::time::Instant::now (98 samples, 3.52%)</title><rect x="53.6138%" y="229" width="3.5239%" height="15" fill="rgb(210,61,42)" fg:x="1491" fg:w="98"/><text x="53.8638%" y="239.50">std..</text></g><g><title>std::sys::unix::time::Timespec::now (98 samples, 3.52%)</title><rect x="53.6138%" y="213" width="3.5239%" height="15" fill="rgb(211,52,33)" fg:x="1491" fg:w="98"/><text x="53.8638%" y="223.50">std..</text></g><g><title>clock_gettime@plt (1 samples, 0.04%)</title><rect x="57.1018%" y="197" width="0.0360%" height="15" fill="rgb(234,58,33)" fg:x="1588" fg:w="1"/><text x="57.3518%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.40%)</title><rect x="60.8055%" y="261" width="0.3955%" height="15" fill="rgb(220,115,36)" fg:x="1691" fg:w="11"/><text x="61.0555%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.40%)</title><rect x="60.8055%" y="245" width="0.3955%" height="15" fill="rgb(243,153,54)" fg:x="1691" fg:w="11"/><text x="61.0555%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.40%)</title><rect x="60.8055%" y="229" width="0.3955%" height="15" fill="rgb(251,47,18)" fg:x="1691" fg:w="11"/><text x="61.0555%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="61.2010%" y="261" width="0.0360%" height="15" fill="rgb(242,102,42)" fg:x="1702" fg:w="1"/><text x="61.4510%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="61.2010%" y="245" width="0.0360%" height="15" fill="rgb(234,31,38)" fg:x="1702" fg:w="1"/><text x="61.4510%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="61.2010%" y="229" width="0.0360%" height="15" fill="rgb(221,117,51)" fg:x="1702" fg:w="1"/><text x="61.4510%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (29 samples, 1.04%)</title><rect x="63.9698%" y="245" width="1.0428%" height="15" fill="rgb(212,20,18)" fg:x="1779" fg:w="29"/><text x="64.2198%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29 samples, 1.04%)</title><rect x="63.9698%" y="229" width="1.0428%" height="15" fill="rgb(245,133,36)" fg:x="1779" fg:w="29"/><text x="64.2198%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29 samples, 1.04%)</title><rect x="63.9698%" y="213" width="1.0428%" height="15" fill="rgb(212,6,19)" fg:x="1779" fg:w="29"/><text x="64.2198%" y="223.50"></text></g><g><title>ahc30_a::Problem::uncover (110 samples, 3.96%)</title><rect x="61.2370%" y="261" width="3.9554%" height="15" fill="rgb(218,1,36)" fg:x="1703" fg:w="110"/><text x="61.4870%" y="271.50">ahc3..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.18%)</title><rect x="65.0126%" y="245" width="0.1798%" height="15" fill="rgb(246,84,54)" fg:x="1808" fg:w="5"/><text x="65.2626%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.18%)</title><rect x="65.0126%" y="229" width="0.1798%" height="15" fill="rgb(242,110,6)" fg:x="1808" fg:w="5"/><text x="65.2626%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.18%)</title><rect x="65.0126%" y="213" width="0.1798%" height="15" fill="rgb(214,47,5)" fg:x="1808" fg:w="5"/><text x="65.2626%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="65.5160%" y="133" width="0.0360%" height="15" fill="rgb(218,159,25)" fg:x="1822" fg:w="1"/><text x="65.7660%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="65.5160%" y="117" width="0.0360%" height="15" fill="rgb(215,211,28)" fg:x="1822" fg:w="1"/><text x="65.7660%" y="127.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="65.4441%" y="181" width="0.2517%" height="15" fill="rgb(238,59,32)" fg:x="1820" fg:w="7"/><text x="65.6941%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="65.4441%" y="165" width="0.2517%" height="15" fill="rgb(226,82,3)" fg:x="1820" fg:w="7"/><text x="65.6941%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="65.4441%" y="149" width="0.2517%" height="15" fill="rgb(240,164,32)" fg:x="1820" fg:w="7"/><text x="65.6941%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.14%)</title><rect x="65.5520%" y="133" width="0.1438%" height="15" fill="rgb(232,46,7)" fg:x="1823" fg:w="4"/><text x="65.8020%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="65.6239%" y="117" width="0.0719%" height="15" fill="rgb(229,129,53)" fg:x="1825" fg:w="2"/><text x="65.8739%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="65.8756%" y="69" width="0.1079%" height="15" fill="rgb(234,188,29)" fg:x="1832" fg:w="3"/><text x="66.1256%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.18%)</title><rect x="65.8756%" y="85" width="0.1798%" height="15" fill="rgb(246,141,4)" fg:x="1832" fg:w="5"/><text x="66.1256%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="65.9835%" y="69" width="0.0719%" height="15" fill="rgb(229,23,39)" fg:x="1835" fg:w="2"/><text x="66.2335%" y="79.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.43%)</title><rect x="65.7318%" y="133" width="0.4315%" height="15" fill="rgb(206,12,3)" fg:x="1828" fg:w="12"/><text x="65.9818%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 0.40%)</title><rect x="65.7677%" y="117" width="0.3955%" height="15" fill="rgb(252,226,20)" fg:x="1829" fg:w="11"/><text x="66.0177%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.40%)</title><rect x="65.7677%" y="101" width="0.3955%" height="15" fill="rgb(216,123,35)" fg:x="1829" fg:w="11"/><text x="66.0177%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.11%)</title><rect x="66.0554%" y="85" width="0.1079%" height="15" fill="rgb(212,68,40)" fg:x="1837" fg:w="3"/><text x="66.3054%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (28 samples, 1.01%)</title><rect x="65.3362%" y="213" width="1.0068%" height="15" fill="rgb(254,125,32)" fg:x="1817" fg:w="28"/><text x="65.5862%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (27 samples, 0.97%)</title><rect x="65.3722%" y="197" width="0.9709%" height="15" fill="rgb(253,97,22)" fg:x="1818" fg:w="27"/><text x="65.6222%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (18 samples, 0.65%)</title><rect x="65.6958%" y="181" width="0.6472%" height="15" fill="rgb(241,101,14)" fg:x="1827" fg:w="18"/><text x="65.9458%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (17 samples, 0.61%)</title><rect x="65.7318%" y="165" width="0.6113%" height="15" fill="rgb(238,103,29)" fg:x="1828" fg:w="17"/><text x="65.9818%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.61%)</title><rect x="65.7318%" y="149" width="0.6113%" height="15" fill="rgb(233,195,47)" fg:x="1828" fg:w="17"/><text x="65.9818%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (5 samples, 0.18%)</title><rect x="66.1633%" y="133" width="0.1798%" height="15" fill="rgb(246,218,30)" fg:x="1840" fg:w="5"/><text x="66.4133%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (2 samples, 0.07%)</title><rect x="66.3430%" y="213" width="0.0719%" height="15" fill="rgb(219,145,47)" fg:x="1845" fg:w="2"/><text x="66.5930%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="66.3430%" y="197" width="0.0719%" height="15" fill="rgb(243,12,26)" fg:x="1845" fg:w="2"/><text x="66.5930%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="66.3430%" y="181" width="0.0719%" height="15" fill="rgb(214,87,16)" fg:x="1845" fg:w="2"/><text x="66.5930%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="66.3430%" y="165" width="0.0719%" height="15" fill="rgb(208,99,42)" fg:x="1845" fg:w="2"/><text x="66.5930%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="66.4150%" y="197" width="0.0360%" height="15" fill="rgb(253,99,2)" fg:x="1847" fg:w="1"/><text x="66.6650%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="66.5588%" y="181" width="0.0360%" height="15" fill="rgb(220,168,23)" fg:x="1851" fg:w="1"/><text x="66.8088%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="66.5588%" y="165" width="0.0360%" height="15" fill="rgb(242,38,24)" fg:x="1851" fg:w="1"/><text x="66.8088%" y="175.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (7 samples, 0.25%)</title><rect x="66.5948%" y="181" width="0.2517%" height="15" fill="rgb(225,182,9)" fg:x="1852" fg:w="7"/><text x="66.8448%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.14%)</title><rect x="66.8465%" y="181" width="0.1438%" height="15" fill="rgb(243,178,37)" fg:x="1859" fg:w="4"/><text x="67.0965%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.14%)</title><rect x="66.8465%" y="165" width="0.1438%" height="15" fill="rgb(232,139,19)" fg:x="1859" fg:w="4"/><text x="67.0965%" y="175.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (2 samples, 0.07%)</title><rect x="66.9903%" y="181" width="0.0719%" height="15" fill="rgb(225,201,24)" fg:x="1863" fg:w="2"/><text x="67.2403%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (20 samples, 0.72%)</title><rect x="66.4150%" y="213" width="0.7192%" height="15" fill="rgb(221,47,46)" fg:x="1847" fg:w="20"/><text x="66.6650%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (19 samples, 0.68%)</title><rect x="66.4509%" y="197" width="0.6832%" height="15" fill="rgb(249,23,13)" fg:x="1848" fg:w="19"/><text x="66.7009%" y="207.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (2 samples, 0.07%)</title><rect x="67.0622%" y="181" width="0.0719%" height="15" fill="rgb(219,9,5)" fg:x="1865" fg:w="2"/><text x="67.3122%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.07%)</title><rect x="67.0622%" y="165" width="0.0719%" height="15" fill="rgb(254,171,16)" fg:x="1865" fg:w="2"/><text x="67.3122%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.04%)</title><rect x="67.1341%" y="197" width="0.0360%" height="15" fill="rgb(230,171,20)" fg:x="1867" fg:w="1"/><text x="67.3841%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.04%)</title><rect x="67.1341%" y="181" width="0.0360%" height="15" fill="rgb(210,71,41)" fg:x="1867" fg:w="1"/><text x="67.3841%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="67.1341%" y="165" width="0.0360%" height="15" fill="rgb(206,173,20)" fg:x="1867" fg:w="1"/><text x="67.3841%" y="175.50"></text></g><g><title>ahc30_a::Problem::unselect_row (281 samples, 10.10%)</title><rect x="57.1377%" y="277" width="10.1043%" height="15" fill="rgb(233,88,34)" fg:x="1589" fg:w="281"/><text x="57.3877%" y="287.50">ahc30_a::Proble..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (57 samples, 2.05%)</title><rect x="65.1924%" y="261" width="2.0496%" height="15" fill="rgb(223,209,46)" fg:x="1813" fg:w="57"/><text x="65.4424%" y="271.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (57 samples, 2.05%)</title><rect x="65.1924%" y="245" width="2.0496%" height="15" fill="rgb(250,43,18)" fg:x="1813" fg:w="57"/><text x="65.4424%" y="255.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (55 samples, 1.98%)</title><rect x="65.2643%" y="229" width="1.9777%" height="15" fill="rgb(208,13,10)" fg:x="1815" fg:w="55"/><text x="65.5143%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.11%)</title><rect x="67.1341%" y="213" width="0.1079%" height="15" fill="rgb(212,200,36)" fg:x="1867" fg:w="3"/><text x="67.3841%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (2 samples, 0.07%)</title><rect x="67.1701%" y="197" width="0.0719%" height="15" fill="rgb(225,90,30)" fg:x="1868" fg:w="2"/><text x="67.4201%" y="207.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (1 samples, 0.04%)</title><rect x="67.2060%" y="181" width="0.0360%" height="15" fill="rgb(236,182,39)" fg:x="1869" fg:w="1"/><text x="67.4560%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="67.2420%" y="277" width="0.0360%" height="15" fill="rgb(212,144,35)" fg:x="1870" fg:w="1"/><text x="67.4920%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="67.2780%" y="277" width="0.0360%" height="15" fill="rgb(228,63,44)" fg:x="1871" fg:w="1"/><text x="67.5280%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="67.2780%" y="261" width="0.0360%" height="15" fill="rgb(228,109,6)" fg:x="1871" fg:w="1"/><text x="67.5280%" y="271.50"></text></g><g><title>core::time::Duration::as_secs_f64 (2 samples, 0.07%)</title><rect x="67.3139%" y="277" width="0.0719%" height="15" fill="rgb(238,117,24)" fg:x="1872" fg:w="2"/><text x="67.5639%" y="287.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_empty (2 samples, 0.07%)</title><rect x="67.3858%" y="277" width="0.0719%" height="15" fill="rgb(242,26,26)" fg:x="1874" fg:w="2"/><text x="67.6358%" y="287.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="67.3858%" y="261" width="0.0719%" height="15" fill="rgb(221,92,48)" fg:x="1874" fg:w="2"/><text x="67.6358%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="67.3858%" y="245" width="0.0719%" height="15" fill="rgb(209,209,32)" fg:x="1874" fg:w="2"/><text x="67.6358%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (2 samples, 0.07%)</title><rect x="67.3858%" y="229" width="0.0719%" height="15" fill="rgb(221,70,22)" fg:x="1874" fg:w="2"/><text x="67.6358%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="67.3858%" y="213" width="0.0719%" height="15" fill="rgb(248,145,5)" fg:x="1874" fg:w="2"/><text x="67.6358%" y="223.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (2 samples, 0.07%)</title><rect x="67.4577%" y="277" width="0.0719%" height="15" fill="rgb(226,116,26)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="287.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (2 samples, 0.07%)</title><rect x="67.4577%" y="261" width="0.0719%" height="15" fill="rgb(244,5,17)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (2 samples, 0.07%)</title><rect x="67.4577%" y="245" width="0.0719%" height="15" fill="rgb(252,159,33)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (2 samples, 0.07%)</title><rect x="67.4577%" y="229" width="0.0719%" height="15" fill="rgb(206,71,0)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (2 samples, 0.07%)</title><rect x="67.4577%" y="213" width="0.0719%" height="15" fill="rgb(233,118,54)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (2 samples, 0.07%)</title><rect x="67.4577%" y="197" width="0.0719%" height="15" fill="rgb(234,83,48)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.07%)</title><rect x="67.4577%" y="181" width="0.0719%" height="15" fill="rgb(228,3,54)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.07%)</title><rect x="67.4577%" y="165" width="0.0719%" height="15" fill="rgb(226,155,13)" fg:x="1876" fg:w="2"/><text x="67.7077%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (2 samples, 0.07%)</title><rect x="67.6016%" y="229" width="0.0719%" height="15" fill="rgb(241,28,37)" fg:x="1880" fg:w="2"/><text x="67.8516%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (2 samples, 0.07%)</title><rect x="67.7454%" y="181" width="0.0719%" height="15" fill="rgb(233,93,10)" fg:x="1884" fg:w="2"/><text x="67.9954%" y="191.50"></text></g><g><title>core::cmp::PartialOrd::ge (2 samples, 0.07%)</title><rect x="67.7454%" y="165" width="0.0719%" height="15" fill="rgb(225,113,19)" fg:x="1884" fg:w="2"/><text x="67.9954%" y="175.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (9 samples, 0.32%)</title><rect x="67.6016%" y="261" width="0.3236%" height="15" fill="rgb(241,2,18)" fg:x="1880" fg:w="9"/><text x="67.8516%" y="271.50"></text></g><g><title>std::time::Instant::duration_since (9 samples, 0.32%)</title><rect x="67.6016%" y="245" width="0.3236%" height="15" fill="rgb(228,207,21)" fg:x="1880" fg:w="9"/><text x="67.8516%" y="255.50"></text></g><g><title>std::time::Instant::checked_duration_since (7 samples, 0.25%)</title><rect x="67.6735%" y="229" width="0.2517%" height="15" fill="rgb(213,211,35)" fg:x="1882" fg:w="7"/><text x="67.9235%" y="239.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (7 samples, 0.25%)</title><rect x="67.6735%" y="213" width="0.2517%" height="15" fill="rgb(209,83,10)" fg:x="1882" fg:w="7"/><text x="67.9235%" y="223.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (7 samples, 0.25%)</title><rect x="67.6735%" y="197" width="0.2517%" height="15" fill="rgb(209,164,1)" fg:x="1882" fg:w="7"/><text x="67.9235%" y="207.50"></text></g><g><title>core::time::Duration::new (3 samples, 0.11%)</title><rect x="67.8173%" y="181" width="0.1079%" height="15" fill="rgb(213,184,43)" fg:x="1886" fg:w="3"/><text x="68.0673%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (3 samples, 0.11%)</title><rect x="67.8173%" y="165" width="0.1079%" height="15" fill="rgb(231,61,34)" fg:x="1886" fg:w="3"/><text x="68.0673%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (3 samples, 0.11%)</title><rect x="67.8173%" y="149" width="0.1079%" height="15" fill="rgb(235,75,3)" fg:x="1886" fg:w="3"/><text x="68.0673%" y="159.50"></text></g><g><title>__clock_gettime (104 samples, 3.74%)</title><rect x="68.0690%" y="213" width="3.7397%" height="15" fill="rgb(220,106,47)" fg:x="1893" fg:w="104"/><text x="68.3190%" y="223.50">__cl..</text></g><g><title>__kernel_clock_gettime (102 samples, 3.67%)</title><rect x="68.1410%" y="197" width="3.6677%" height="15" fill="rgb(210,196,33)" fg:x="1895" fg:w="102"/><text x="68.3910%" y="207.50">__ke..</text></g><g><title>ahc30_a::Problem::solve_problem (1,361 samples, 48.94%)</title><rect x="22.9773%" y="293" width="48.9392%" height="15" fill="rgb(229,154,42)" fg:x="639" fg:w="1361"/><text x="23.2273%" y="303.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (122 samples, 4.39%)</title><rect x="67.5297%" y="277" width="4.3869%" height="15" fill="rgb(228,114,26)" fg:x="1878" fg:w="122"/><text x="67.7797%" y="287.50">std::..</text></g><g><title>std::time::Instant::now (111 samples, 3.99%)</title><rect x="67.9252%" y="261" width="3.9914%" height="15" fill="rgb(208,144,1)" fg:x="1889" fg:w="111"/><text x="68.1752%" y="271.50">std:..</text></g><g><title>std::sys::unix::time::Instant::now (111 samples, 3.99%)</title><rect x="67.9252%" y="245" width="3.9914%" height="15" fill="rgb(239,112,37)" fg:x="1889" fg:w="111"/><text x="68.1752%" y="255.50">std:..</text></g><g><title>std::sys::unix::time::Timespec::now (111 samples, 3.99%)</title><rect x="67.9252%" y="229" width="3.9914%" height="15" fill="rgb(210,96,50)" fg:x="1889" fg:w="111"/><text x="68.1752%" y="239.50">std:..</text></g><g><title>clock_gettime@plt (3 samples, 0.11%)</title><rect x="71.8087%" y="213" width="0.1079%" height="15" fill="rgb(222,178,2)" fg:x="1997" fg:w="3"/><text x="72.0587%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.47%)</title><rect x="74.8652%" y="277" width="0.4675%" height="15" fill="rgb(226,74,18)" fg:x="2082" fg:w="13"/><text x="75.1152%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.47%)</title><rect x="74.8652%" y="261" width="0.4675%" height="15" fill="rgb(225,67,54)" fg:x="2082" fg:w="13"/><text x="75.1152%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.47%)</title><rect x="74.8652%" y="245" width="0.4675%" height="15" fill="rgb(251,92,32)" fg:x="2082" fg:w="13"/><text x="75.1152%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 1.11%)</title><rect x="77.5980%" y="261" width="1.1147%" height="15" fill="rgb(228,149,22)" fg:x="2158" fg:w="31"/><text x="77.8480%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 1.11%)</title><rect x="77.5980%" y="245" width="1.1147%" height="15" fill="rgb(243,54,13)" fg:x="2158" fg:w="31"/><text x="77.8480%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 1.11%)</title><rect x="77.5980%" y="229" width="1.1147%" height="15" fill="rgb(243,180,28)" fg:x="2158" fg:w="31"/><text x="77.8480%" y="239.50"></text></g><g><title>ahc30_a::Problem::uncover (98 samples, 3.52%)</title><rect x="75.3326%" y="277" width="3.5239%" height="15" fill="rgb(208,167,24)" fg:x="2095" fg:w="98"/><text x="75.5826%" y="287.50">ahc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.14%)</title><rect x="78.7127%" y="261" width="0.1438%" height="15" fill="rgb(245,73,45)" fg:x="2189" fg:w="4"/><text x="78.9627%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.14%)</title><rect x="78.7127%" y="245" width="0.1438%" height="15" fill="rgb(237,203,48)" fg:x="2189" fg:w="4"/><text x="78.9627%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.14%)</title><rect x="78.7127%" y="229" width="0.1438%" height="15" fill="rgb(211,197,16)" fg:x="2189" fg:w="4"/><text x="78.9627%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="79.2521%" y="133" width="0.0719%" height="15" fill="rgb(243,99,51)" fg:x="2204" fg:w="2"/><text x="79.5021%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="79.0363%" y="197" width="0.3236%" height="15" fill="rgb(215,123,29)" fg:x="2198" fg:w="9"/><text x="79.2863%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="79.0363%" y="181" width="0.3236%" height="15" fill="rgb(239,186,37)" fg:x="2198" fg:w="9"/><text x="79.2863%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (9 samples, 0.32%)</title><rect x="79.0363%" y="165" width="0.3236%" height="15" fill="rgb(252,136,39)" fg:x="2198" fg:w="9"/><text x="79.2863%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.18%)</title><rect x="79.1802%" y="149" width="0.1798%" height="15" fill="rgb(223,213,32)" fg:x="2202" fg:w="5"/><text x="79.4302%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="79.3240%" y="133" width="0.0360%" height="15" fill="rgb(233,115,5)" fg:x="2206" fg:w="1"/><text x="79.5740%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.29%)</title><rect x="79.3959%" y="149" width="0.2877%" height="15" fill="rgb(207,226,44)" fg:x="2208" fg:w="8"/><text x="79.6459%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.29%)</title><rect x="79.3959%" y="133" width="0.2877%" height="15" fill="rgb(208,126,0)" fg:x="2208" fg:w="8"/><text x="79.6459%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.29%)</title><rect x="79.3959%" y="117" width="0.2877%" height="15" fill="rgb(244,66,21)" fg:x="2208" fg:w="8"/><text x="79.6459%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.11%)</title><rect x="79.5757%" y="101" width="0.1079%" height="15" fill="rgb(222,97,12)" fg:x="2213" fg:w="3"/><text x="79.8257%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="79.6476%" y="85" width="0.0360%" height="15" fill="rgb(219,213,19)" fg:x="2215" fg:w="1"/><text x="79.8976%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (24 samples, 0.86%)</title><rect x="78.9284%" y="229" width="0.8630%" height="15" fill="rgb(252,169,30)" fg:x="2195" fg:w="24"/><text x="79.1784%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 0.83%)</title><rect x="78.9644%" y="213" width="0.8270%" height="15" fill="rgb(206,32,51)" fg:x="2196" fg:w="23"/><text x="79.2144%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.43%)</title><rect x="79.3599%" y="197" width="0.4315%" height="15" fill="rgb(250,172,42)" fg:x="2207" fg:w="12"/><text x="79.6099%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (11 samples, 0.40%)</title><rect x="79.3959%" y="181" width="0.3955%" height="15" fill="rgb(209,34,43)" fg:x="2208" fg:w="11"/><text x="79.6459%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (11 samples, 0.40%)</title><rect x="79.3959%" y="165" width="0.3955%" height="15" fill="rgb(223,11,35)" fg:x="2208" fg:w="11"/><text x="79.6459%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.11%)</title><rect x="79.6836%" y="149" width="0.1079%" height="15" fill="rgb(251,219,26)" fg:x="2216" fg:w="3"/><text x="79.9336%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (1 samples, 0.04%)</title><rect x="79.7914%" y="229" width="0.0360%" height="15" fill="rgb(231,119,3)" fg:x="2219" fg:w="1"/><text x="80.0414%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="79.7914%" y="213" width="0.0360%" height="15" fill="rgb(216,97,11)" fg:x="2219" fg:w="1"/><text x="80.0414%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="79.7914%" y="197" width="0.0360%" height="15" fill="rgb(223,59,9)" fg:x="2219" fg:w="1"/><text x="80.0414%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="79.7914%" y="181" width="0.0360%" height="15" fill="rgb(233,93,31)" fg:x="2219" fg:w="1"/><text x="80.0414%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="79.8993%" y="197" width="0.0360%" height="15" fill="rgb(239,81,33)" fg:x="2222" fg:w="1"/><text x="80.1493%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="79.8993%" y="181" width="0.0360%" height="15" fill="rgb(213,120,34)" fg:x="2222" fg:w="1"/><text x="80.1493%" y="191.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (9 samples, 0.32%)</title><rect x="79.9353%" y="197" width="0.3236%" height="15" fill="rgb(243,49,53)" fg:x="2223" fg:w="9"/><text x="80.1853%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (6 samples, 0.22%)</title><rect x="80.2589%" y="197" width="0.2157%" height="15" fill="rgb(247,216,33)" fg:x="2232" fg:w="6"/><text x="80.5089%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (6 samples, 0.22%)</title><rect x="80.2589%" y="181" width="0.2157%" height="15" fill="rgb(226,26,14)" fg:x="2232" fg:w="6"/><text x="80.5089%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (6 samples, 0.22%)</title><rect x="80.4746%" y="197" width="0.2157%" height="15" fill="rgb(215,49,53)" fg:x="2238" fg:w="6"/><text x="80.7246%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (26 samples, 0.93%)</title><rect x="79.8274%" y="229" width="0.9349%" height="15" fill="rgb(245,162,40)" fg:x="2220" fg:w="26"/><text x="80.0774%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (26 samples, 0.93%)</title><rect x="79.8274%" y="213" width="0.9349%" height="15" fill="rgb(229,68,17)" fg:x="2220" fg:w="26"/><text x="80.0774%" y="223.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (2 samples, 0.07%)</title><rect x="80.6904%" y="197" width="0.0719%" height="15" fill="rgb(213,182,10)" fg:x="2244" fg:w="2"/><text x="80.9404%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.07%)</title><rect x="80.6904%" y="181" width="0.0719%" height="15" fill="rgb(245,125,30)" fg:x="2244" fg:w="2"/><text x="80.9404%" y="191.50"></text></g><g><title>ahc30_a::Problem::unselect_row (247 samples, 8.88%)</title><rect x="71.9166%" y="293" width="8.8817%" height="15" fill="rgb(232,202,2)" fg:x="2000" fg:w="247"/><text x="72.1666%" y="303.50">ahc30_a::Prob..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (54 samples, 1.94%)</title><rect x="78.8565%" y="277" width="1.9417%" height="15" fill="rgb(237,140,51)" fg:x="2193" fg:w="54"/><text x="79.1065%" y="287.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (54 samples, 1.94%)</title><rect x="78.8565%" y="261" width="1.9417%" height="15" fill="rgb(236,157,25)" fg:x="2193" fg:w="54"/><text x="79.1065%" y="271.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (54 samples, 1.94%)</title><rect x="78.8565%" y="245" width="1.9417%" height="15" fill="rgb(219,209,0)" fg:x="2193" fg:w="54"/><text x="79.1065%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="80.7623%" y="229" width="0.0360%" height="15" fill="rgb(240,116,54)" fg:x="2246" fg:w="1"/><text x="81.0123%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.04%)</title><rect x="80.7623%" y="213" width="0.0360%" height="15" fill="rgb(216,10,36)" fg:x="2246" fg:w="1"/><text x="81.0123%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (4 samples, 0.14%)</title><rect x="80.7983%" y="293" width="0.1438%" height="15" fill="rgb(222,72,44)" fg:x="2247" fg:w="4"/><text x="81.0483%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="80.7983%" y="277" width="0.1438%" height="15" fill="rgb(232,159,9)" fg:x="2247" fg:w="4"/><text x="81.0483%" y="287.50"></text></g><g><title>core::time::Duration::as_secs_f64 (1 samples, 0.04%)</title><rect x="80.9421%" y="293" width="0.0360%" height="15" fill="rgb(210,39,32)" fg:x="2251" fg:w="1"/><text x="81.1921%" y="303.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_empty (2 samples, 0.07%)</title><rect x="80.9781%" y="293" width="0.0719%" height="15" fill="rgb(216,194,45)" fg:x="2252" fg:w="2"/><text x="81.2281%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="80.9781%" y="277" width="0.0719%" height="15" fill="rgb(218,18,35)" fg:x="2252" fg:w="2"/><text x="81.2281%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="80.9781%" y="261" width="0.0719%" height="15" fill="rgb(207,83,51)" fg:x="2252" fg:w="2"/><text x="81.2281%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (2 samples, 0.07%)</title><rect x="80.9781%" y="245" width="0.0719%" height="15" fill="rgb(225,63,43)" fg:x="2252" fg:w="2"/><text x="81.2281%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="80.9781%" y="229" width="0.0719%" height="15" fill="rgb(207,57,36)" fg:x="2252" fg:w="2"/><text x="81.2281%" y="239.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1 samples, 0.04%)</title><rect x="81.0500%" y="293" width="0.0360%" height="15" fill="rgb(216,99,33)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1 samples, 0.04%)</title><rect x="81.0500%" y="277" width="0.0360%" height="15" fill="rgb(225,42,16)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1 samples, 0.04%)</title><rect x="81.0500%" y="261" width="0.0360%" height="15" fill="rgb(220,201,45)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.04%)</title><rect x="81.0500%" y="245" width="0.0360%" height="15" fill="rgb(225,33,4)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.04%)</title><rect x="81.0500%" y="229" width="0.0360%" height="15" fill="rgb(224,33,50)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.04%)</title><rect x="81.0500%" y="213" width="0.0360%" height="15" fill="rgb(246,198,51)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="81.0500%" y="197" width="0.0360%" height="15" fill="rgb(205,22,4)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="81.0500%" y="181" width="0.0360%" height="15" fill="rgb(206,3,8)" fg:x="2254" fg:w="1"/><text x="81.3000%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (1 samples, 0.04%)</title><rect x="81.1579%" y="245" width="0.0360%" height="15" fill="rgb(251,23,15)" fg:x="2257" fg:w="1"/><text x="81.4079%" y="255.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (2 samples, 0.07%)</title><rect x="81.1579%" y="277" width="0.0719%" height="15" fill="rgb(252,88,28)" fg:x="2257" fg:w="2"/><text x="81.4079%" y="287.50"></text></g><g><title>std::time::Instant::duration_since (2 samples, 0.07%)</title><rect x="81.1579%" y="261" width="0.0719%" height="15" fill="rgb(212,127,14)" fg:x="2257" fg:w="2"/><text x="81.4079%" y="271.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.04%)</title><rect x="81.1938%" y="245" width="0.0360%" height="15" fill="rgb(247,145,37)" fg:x="2258" fg:w="1"/><text x="81.4438%" y="255.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (1 samples, 0.04%)</title><rect x="81.1938%" y="229" width="0.0360%" height="15" fill="rgb(209,117,53)" fg:x="2258" fg:w="1"/><text x="81.4438%" y="239.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.04%)</title><rect x="81.1938%" y="213" width="0.0360%" height="15" fill="rgb(212,90,42)" fg:x="2258" fg:w="1"/><text x="81.4438%" y="223.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.04%)</title><rect x="81.1938%" y="197" width="0.0360%" height="15" fill="rgb(218,164,37)" fg:x="2258" fg:w="1"/><text x="81.4438%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (1 samples, 0.04%)</title><rect x="81.1938%" y="181" width="0.0360%" height="15" fill="rgb(246,65,34)" fg:x="2258" fg:w="1"/><text x="81.4438%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="81.1938%" y="165" width="0.0360%" height="15" fill="rgb(231,100,33)" fg:x="2258" fg:w="1"/><text x="81.4438%" y="175.50"></text></g><g><title>__clock_gettime (57 samples, 2.05%)</title><rect x="81.3736%" y="229" width="2.0496%" height="15" fill="rgb(228,126,14)" fg:x="2263" fg:w="57"/><text x="81.6236%" y="239.50">_..</text></g><g><title>__kernel_clock_gettime (52 samples, 1.87%)</title><rect x="81.5534%" y="213" width="1.8698%" height="15" fill="rgb(215,173,21)" fg:x="2268" fg:w="52"/><text x="81.8034%" y="223.50">_..</text></g><g><title>ahc30_a::Problem::solve_problem (2,012 samples, 72.35%)</title><rect x="11.1111%" y="309" width="72.3481%" height="15" fill="rgb(210,6,40)" fg:x="309" fg:w="2012"/><text x="11.3611%" y="319.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (66 samples, 2.37%)</title><rect x="81.0859%" y="293" width="2.3732%" height="15" fill="rgb(212,48,18)" fg:x="2255" fg:w="66"/><text x="81.3359%" y="303.50">st..</text></g><g><title>std::time::Instant::now (62 samples, 2.23%)</title><rect x="81.2298%" y="277" width="2.2294%" height="15" fill="rgb(230,214,11)" fg:x="2259" fg:w="62"/><text x="81.4798%" y="287.50">s..</text></g><g><title>std::sys::unix::time::Instant::now (62 samples, 2.23%)</title><rect x="81.2298%" y="261" width="2.2294%" height="15" fill="rgb(254,105,39)" fg:x="2259" fg:w="62"/><text x="81.4798%" y="271.50">s..</text></g><g><title>std::sys::unix::time::Timespec::now (62 samples, 2.23%)</title><rect x="81.2298%" y="245" width="2.2294%" height="15" fill="rgb(245,158,5)" fg:x="2259" fg:w="62"/><text x="81.4798%" y="255.50">s..</text></g><g><title>std::sys::unix::cvt (1 samples, 0.04%)</title><rect x="83.4232%" y="229" width="0.0360%" height="15" fill="rgb(249,208,11)" fg:x="2320" fg:w="1"/><text x="83.6732%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.18%)</title><rect x="85.5088%" y="293" width="0.1798%" height="15" fill="rgb(210,39,28)" fg:x="2378" fg:w="5"/><text x="85.7588%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.18%)</title><rect x="85.5088%" y="277" width="0.1798%" height="15" fill="rgb(211,56,53)" fg:x="2378" fg:w="5"/><text x="85.7588%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.18%)</title><rect x="85.5088%" y="261" width="0.1798%" height="15" fill="rgb(226,201,30)" fg:x="2378" fg:w="5"/><text x="85.7588%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (13 samples, 0.47%)</title><rect x="87.4506%" y="277" width="0.4675%" height="15" fill="rgb(239,101,34)" fg:x="2432" fg:w="13"/><text x="87.7006%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.47%)</title><rect x="87.4506%" y="261" width="0.4675%" height="15" fill="rgb(226,209,5)" fg:x="2432" fg:w="13"/><text x="87.7006%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.47%)</title><rect x="87.4506%" y="245" width="0.4675%" height="15" fill="rgb(250,105,47)" fg:x="2432" fg:w="13"/><text x="87.7006%" y="255.50"></text></g><g><title>ahc30_a::Problem::uncover (63 samples, 2.27%)</title><rect x="85.6886%" y="293" width="2.2654%" height="15" fill="rgb(230,72,3)" fg:x="2383" fg:w="63"/><text x="85.9386%" y="303.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="87.9180%" y="277" width="0.0360%" height="15" fill="rgb(232,218,39)" fg:x="2445" fg:w="1"/><text x="88.1680%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="87.9180%" y="261" width="0.0360%" height="15" fill="rgb(248,166,6)" fg:x="2445" fg:w="1"/><text x="88.1680%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="87.9180%" y="245" width="0.0360%" height="15" fill="rgb(247,89,20)" fg:x="2445" fg:w="1"/><text x="88.1680%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="88.1338%" y="149" width="0.0719%" height="15" fill="rgb(248,130,54)" fg:x="2451" fg:w="2"/><text x="88.3838%" y="159.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="87.9899%" y="213" width="0.2517%" height="15" fill="rgb(234,196,4)" fg:x="2447" fg:w="7"/><text x="88.2399%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="87.9899%" y="197" width="0.2517%" height="15" fill="rgb(250,143,31)" fg:x="2447" fg:w="7"/><text x="88.2399%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.25%)</title><rect x="87.9899%" y="181" width="0.2517%" height="15" fill="rgb(211,110,34)" fg:x="2447" fg:w="7"/><text x="88.2399%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.14%)</title><rect x="88.0978%" y="165" width="0.1438%" height="15" fill="rgb(215,124,48)" fg:x="2450" fg:w="4"/><text x="88.3478%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="88.2057%" y="149" width="0.0360%" height="15" fill="rgb(216,46,13)" fg:x="2453" fg:w="1"/><text x="88.4557%" y="159.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="88.2416%" y="213" width="0.0360%" height="15" fill="rgb(205,184,25)" fg:x="2454" fg:w="1"/><text x="88.4916%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="88.2416%" y="197" width="0.0360%" height="15" fill="rgb(228,1,10)" fg:x="2454" fg:w="1"/><text x="88.4916%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="88.2416%" y="181" width="0.0360%" height="15" fill="rgb(213,116,27)" fg:x="2454" fg:w="1"/><text x="88.4916%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="88.2416%" y="165" width="0.0360%" height="15" fill="rgb(241,95,50)" fg:x="2454" fg:w="1"/><text x="88.4916%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.50%)</title><rect x="87.9899%" y="245" width="0.5034%" height="15" fill="rgb(238,48,32)" fg:x="2447" fg:w="14"/><text x="88.2399%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.50%)</title><rect x="87.9899%" y="229" width="0.5034%" height="15" fill="rgb(235,113,49)" fg:x="2447" fg:w="14"/><text x="88.2399%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.22%)</title><rect x="88.2776%" y="213" width="0.2157%" height="15" fill="rgb(205,127,43)" fg:x="2455" fg:w="6"/><text x="88.5276%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.14%)</title><rect x="88.3495%" y="197" width="0.1438%" height="15" fill="rgb(250,162,2)" fg:x="2457" fg:w="4"/><text x="88.5995%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.14%)</title><rect x="88.3495%" y="181" width="0.1438%" height="15" fill="rgb(220,13,41)" fg:x="2457" fg:w="4"/><text x="88.5995%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.14%)</title><rect x="88.3495%" y="165" width="0.1438%" height="15" fill="rgb(249,221,25)" fg:x="2457" fg:w="4"/><text x="88.5995%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.14%)</title><rect x="88.3495%" y="149" width="0.1438%" height="15" fill="rgb(215,208,19)" fg:x="2457" fg:w="4"/><text x="88.5995%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.14%)</title><rect x="88.3495%" y="133" width="0.1438%" height="15" fill="rgb(236,175,2)" fg:x="2457" fg:w="4"/><text x="88.5995%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="88.4214%" y="117" width="0.0719%" height="15" fill="rgb(241,52,2)" fg:x="2459" fg:w="2"/><text x="88.6714%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="88.4574%" y="101" width="0.0360%" height="15" fill="rgb(248,140,14)" fg:x="2460" fg:w="1"/><text x="88.7074%" y="111.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (5 samples, 0.18%)</title><rect x="88.4933%" y="213" width="0.1798%" height="15" fill="rgb(253,22,42)" fg:x="2461" fg:w="5"/><text x="88.7433%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.11%)</title><rect x="88.6731%" y="213" width="0.1079%" height="15" fill="rgb(234,61,47)" fg:x="2466" fg:w="3"/><text x="88.9231%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.11%)</title><rect x="88.6731%" y="197" width="0.1079%" height="15" fill="rgb(208,226,15)" fg:x="2466" fg:w="3"/><text x="88.9231%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.04%)</title><rect x="88.7810%" y="213" width="0.0360%" height="15" fill="rgb(217,221,4)" fg:x="2469" fg:w="1"/><text x="89.0310%" y="223.50"></text></g><g><title>ahc30_a::Problem::unselect_row (151 samples, 5.43%)</title><rect x="83.4592%" y="309" width="5.4297%" height="15" fill="rgb(212,174,34)" fg:x="2321" fg:w="151"/><text x="83.7092%" y="319.50">ahc30_a..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (26 samples, 0.93%)</title><rect x="87.9540%" y="293" width="0.9349%" height="15" fill="rgb(253,83,4)" fg:x="2446" fg:w="26"/><text x="88.2040%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (26 samples, 0.93%)</title><rect x="87.9540%" y="277" width="0.9349%" height="15" fill="rgb(250,195,49)" fg:x="2446" fg:w="26"/><text x="88.2040%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 0.93%)</title><rect x="87.9540%" y="261" width="0.9349%" height="15" fill="rgb(241,192,25)" fg:x="2446" fg:w="26"/><text x="88.2040%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11 samples, 0.40%)</title><rect x="88.4933%" y="245" width="0.3955%" height="15" fill="rgb(208,124,10)" fg:x="2461" fg:w="11"/><text x="88.7433%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (11 samples, 0.40%)</title><rect x="88.4933%" y="229" width="0.3955%" height="15" fill="rgb(222,33,0)" fg:x="2461" fg:w="11"/><text x="88.7433%" y="239.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (2 samples, 0.07%)</title><rect x="88.8170%" y="213" width="0.0719%" height="15" fill="rgb(234,209,28)" fg:x="2470" fg:w="2"/><text x="89.0670%" y="223.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.07%)</title><rect x="88.8170%" y="197" width="0.0719%" height="15" fill="rgb(224,11,23)" fg:x="2470" fg:w="2"/><text x="89.0670%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="88.8889%" y="309" width="0.0360%" height="15" fill="rgb(232,99,1)" fg:x="2472" fg:w="1"/><text x="89.1389%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="88.9248%" y="309" width="0.0360%" height="15" fill="rgb(237,95,45)" fg:x="2473" fg:w="1"/><text x="89.1748%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="88.9248%" y="293" width="0.0360%" height="15" fill="rgb(208,109,11)" fg:x="2473" fg:w="1"/><text x="89.1748%" y="303.50"></text></g><g><title>core::time::Duration::as_secs_f64 (1 samples, 0.04%)</title><rect x="88.9608%" y="309" width="0.0360%" height="15" fill="rgb(216,190,48)" fg:x="2474" fg:w="1"/><text x="89.2108%" y="319.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="89.0327%" y="293" width="0.0360%" height="15" fill="rgb(251,171,36)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="303.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.04%)</title><rect x="89.0327%" y="277" width="0.0360%" height="15" fill="rgb(230,62,22)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="287.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.04%)</title><rect x="89.0327%" y="261" width="0.0360%" height="15" fill="rgb(225,114,35)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="271.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (1 samples, 0.04%)</title><rect x="89.0327%" y="245" width="0.0360%" height="15" fill="rgb(215,118,42)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="255.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.04%)</title><rect x="89.0327%" y="229" width="0.0360%" height="15" fill="rgb(243,119,21)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="89.0327%" y="213" width="0.0360%" height="15" fill="rgb(252,177,53)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="223.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="89.0327%" y="197" width="0.0360%" height="15" fill="rgb(237,209,29)" fg:x="2476" fg:w="1"/><text x="89.2827%" y="207.50"></text></g><g><title>__clock_gettime (32 samples, 1.15%)</title><rect x="89.1046%" y="245" width="1.1507%" height="15" fill="rgb(212,65,23)" fg:x="2478" fg:w="32"/><text x="89.3546%" y="255.50"></text></g><g><title>__kernel_clock_gettime (32 samples, 1.15%)</title><rect x="89.1046%" y="229" width="1.1507%" height="15" fill="rgb(230,222,46)" fg:x="2478" fg:w="32"/><text x="89.3546%" y="239.50"></text></g><g><title>ahc30_a::Problem::solve_problem (2,360 samples, 84.86%)</title><rect x="5.5016%" y="325" width="84.8616%" height="15" fill="rgb(215,135,32)" fg:x="153" fg:w="2360"/><text x="5.7516%" y="335.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (38 samples, 1.37%)</title><rect x="88.9968%" y="309" width="1.3664%" height="15" fill="rgb(246,101,22)" fg:x="2475" fg:w="38"/><text x="89.2468%" y="319.50"></text></g><g><title>std::time::Instant::now (36 samples, 1.29%)</title><rect x="89.0687%" y="293" width="1.2945%" height="15" fill="rgb(206,107,13)" fg:x="2477" fg:w="36"/><text x="89.3187%" y="303.50"></text></g><g><title>std::sys::unix::time::Instant::now (36 samples, 1.29%)</title><rect x="89.0687%" y="277" width="1.2945%" height="15" fill="rgb(250,100,44)" fg:x="2477" fg:w="36"/><text x="89.3187%" y="287.50"></text></g><g><title>std::sys::unix::time::Timespec::now (36 samples, 1.29%)</title><rect x="89.0687%" y="261" width="1.2945%" height="15" fill="rgb(231,147,38)" fg:x="2477" fg:w="36"/><text x="89.3187%" y="271.50"></text></g><g><title>clock_gettime@plt (3 samples, 0.11%)</title><rect x="90.2553%" y="245" width="0.1079%" height="15" fill="rgb(229,8,40)" fg:x="2510" fg:w="3"/><text x="90.5053%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.11%)</title><rect x="91.0823%" y="309" width="0.1079%" height="15" fill="rgb(221,135,30)" fg:x="2533" fg:w="3"/><text x="91.3323%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.11%)</title><rect x="91.0823%" y="293" width="0.1079%" height="15" fill="rgb(249,193,18)" fg:x="2533" fg:w="3"/><text x="91.3323%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.11%)</title><rect x="91.0823%" y="277" width="0.1079%" height="15" fill="rgb(209,133,39)" fg:x="2533" fg:w="3"/><text x="91.3323%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.32%)</title><rect x="91.8375%" y="293" width="0.3236%" height="15" fill="rgb(232,100,14)" fg:x="2554" fg:w="9"/><text x="92.0875%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.32%)</title><rect x="91.8375%" y="277" width="0.3236%" height="15" fill="rgb(224,185,1)" fg:x="2554" fg:w="9"/><text x="92.0875%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.32%)</title><rect x="91.8375%" y="261" width="0.3236%" height="15" fill="rgb(223,139,8)" fg:x="2554" fg:w="9"/><text x="92.0875%" y="271.50"></text></g><g><title>ahc30_a::Problem::uncover (29 samples, 1.04%)</title><rect x="91.1902%" y="309" width="1.0428%" height="15" fill="rgb(232,213,38)" fg:x="2536" fg:w="29"/><text x="91.4402%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="92.1611%" y="293" width="0.0719%" height="15" fill="rgb(207,94,22)" fg:x="2563" fg:w="2"/><text x="92.4111%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="92.1611%" y="277" width="0.0719%" height="15" fill="rgb(219,183,54)" fg:x="2563" fg:w="2"/><text x="92.4111%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="92.1611%" y="261" width="0.0719%" height="15" fill="rgb(216,185,54)" fg:x="2563" fg:w="2"/><text x="92.4111%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="92.3409%" y="165" width="0.0360%" height="15" fill="rgb(254,217,39)" fg:x="2568" fg:w="1"/><text x="92.5909%" y="175.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (4 samples, 0.14%)</title><rect x="92.3409%" y="229" width="0.1438%" height="15" fill="rgb(240,178,23)" fg:x="2568" fg:w="4"/><text x="92.5909%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (4 samples, 0.14%)</title><rect x="92.3409%" y="213" width="0.1438%" height="15" fill="rgb(218,11,47)" fg:x="2568" fg:w="4"/><text x="92.5909%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.14%)</title><rect x="92.3409%" y="197" width="0.1438%" height="15" fill="rgb(218,51,51)" fg:x="2568" fg:w="4"/><text x="92.5909%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.14%)</title><rect x="92.3409%" y="181" width="0.1438%" height="15" fill="rgb(238,126,27)" fg:x="2568" fg:w="4"/><text x="92.5909%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="92.3768%" y="165" width="0.1079%" height="15" fill="rgb(249,202,22)" fg:x="2569" fg:w="3"/><text x="92.6268%" y="175.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="92.4847%" y="229" width="0.0360%" height="15" fill="rgb(254,195,49)" fg:x="2572" fg:w="1"/><text x="92.7347%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="92.4847%" y="213" width="0.0360%" height="15" fill="rgb(208,123,14)" fg:x="2572" fg:w="1"/><text x="92.7347%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="92.4847%" y="197" width="0.0360%" height="15" fill="rgb(224,200,8)" fg:x="2572" fg:w="1"/><text x="92.7347%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="92.4847%" y="181" width="0.0360%" height="15" fill="rgb(217,61,36)" fg:x="2572" fg:w="1"/><text x="92.7347%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.32%)</title><rect x="92.2690%" y="261" width="0.3236%" height="15" fill="rgb(206,35,45)" fg:x="2566" fg:w="9"/><text x="92.5190%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.25%)</title><rect x="92.3409%" y="245" width="0.2517%" height="15" fill="rgb(217,65,33)" fg:x="2568" fg:w="7"/><text x="92.5909%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.07%)</title><rect x="92.5207%" y="229" width="0.0719%" height="15" fill="rgb(222,158,48)" fg:x="2573" fg:w="2"/><text x="92.7707%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.07%)</title><rect x="92.5207%" y="213" width="0.0719%" height="15" fill="rgb(254,2,54)" fg:x="2573" fg:w="2"/><text x="92.7707%" y="223.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.07%)</title><rect x="92.5207%" y="197" width="0.0719%" height="15" fill="rgb(250,143,38)" fg:x="2573" fg:w="2"/><text x="92.7707%" y="207.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="92.5207%" y="181" width="0.0719%" height="15" fill="rgb(248,25,0)" fg:x="2573" fg:w="2"/><text x="92.7707%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="92.5207%" y="165" width="0.0719%" height="15" fill="rgb(206,152,27)" fg:x="2573" fg:w="2"/><text x="92.7707%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="92.5207%" y="149" width="0.0719%" height="15" fill="rgb(240,77,30)" fg:x="2573" fg:w="2"/><text x="92.7707%" y="159.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (2 samples, 0.07%)</title><rect x="92.5926%" y="229" width="0.0719%" height="15" fill="rgb(231,5,3)" fg:x="2575" fg:w="2"/><text x="92.8426%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="92.6645%" y="229" width="0.0360%" height="15" fill="rgb(207,226,32)" fg:x="2577" fg:w="1"/><text x="92.9145%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="92.6645%" y="213" width="0.0360%" height="15" fill="rgb(222,207,47)" fg:x="2577" fg:w="1"/><text x="92.9145%" y="223.50"></text></g><g><title>ahc30_a::Problem::unselect_row (67 samples, 2.41%)</title><rect x="90.3632%" y="325" width="2.4092%" height="15" fill="rgb(229,115,45)" fg:x="2513" fg:w="67"/><text x="90.6132%" y="335.50">ah..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (15 samples, 0.54%)</title><rect x="92.2330%" y="309" width="0.5394%" height="15" fill="rgb(224,191,6)" fg:x="2565" fg:w="15"/><text x="92.4830%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (15 samples, 0.54%)</title><rect x="92.2330%" y="293" width="0.5394%" height="15" fill="rgb(230,227,24)" fg:x="2565" fg:w="15"/><text x="92.4830%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.50%)</title><rect x="92.2690%" y="277" width="0.5034%" height="15" fill="rgb(228,80,19)" fg:x="2566" fg:w="14"/><text x="92.5190%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (5 samples, 0.18%)</title><rect x="92.5926%" y="261" width="0.1798%" height="15" fill="rgb(247,229,0)" fg:x="2575" fg:w="5"/><text x="92.8426%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.18%)</title><rect x="92.5926%" y="245" width="0.1798%" height="15" fill="rgb(237,194,15)" fg:x="2575" fg:w="5"/><text x="92.8426%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (2 samples, 0.07%)</title><rect x="92.7005%" y="229" width="0.0719%" height="15" fill="rgb(219,203,20)" fg:x="2578" fg:w="2"/><text x="92.9505%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="92.7724%" y="325" width="0.0360%" height="15" fill="rgb(234,128,8)" fg:x="2580" fg:w="1"/><text x="93.0224%" y="335.50"></text></g><g><title>core::time::Duration::as_secs_f64 (1 samples, 0.04%)</title><rect x="92.8083%" y="325" width="0.0360%" height="15" fill="rgb(248,202,8)" fg:x="2581" fg:w="1"/><text x="93.0583%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (1 samples, 0.04%)</title><rect x="92.8443%" y="325" width="0.0360%" height="15" fill="rgb(206,104,37)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (1 samples, 0.04%)</title><rect x="92.8443%" y="309" width="0.0360%" height="15" fill="rgb(223,8,27)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (1 samples, 0.04%)</title><rect x="92.8443%" y="293" width="0.0360%" height="15" fill="rgb(216,217,28)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.04%)</title><rect x="92.8443%" y="277" width="0.0360%" height="15" fill="rgb(249,199,1)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.04%)</title><rect x="92.8443%" y="261" width="0.0360%" height="15" fill="rgb(240,85,17)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.04%)</title><rect x="92.8443%" y="245" width="0.0360%" height="15" fill="rgb(206,108,45)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="255.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="92.8443%" y="229" width="0.0360%" height="15" fill="rgb(245,210,41)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="92.8443%" y="213" width="0.0360%" height="15" fill="rgb(206,13,37)" fg:x="2582" fg:w="1"/><text x="93.0943%" y="223.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="92.9162%" y="309" width="0.0360%" height="15" fill="rgb(250,61,18)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="319.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.04%)</title><rect x="92.9162%" y="293" width="0.0360%" height="15" fill="rgb(235,172,48)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="303.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.04%)</title><rect x="92.9162%" y="277" width="0.0360%" height="15" fill="rgb(249,201,17)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="287.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (1 samples, 0.04%)</title><rect x="92.9162%" y="261" width="0.0360%" height="15" fill="rgb(219,208,6)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="271.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.04%)</title><rect x="92.9162%" y="245" width="0.0360%" height="15" fill="rgb(248,31,23)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="92.9162%" y="229" width="0.0360%" height="15" fill="rgb(245,15,42)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="239.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="92.9162%" y="213" width="0.0360%" height="15" fill="rgb(222,217,39)" fg:x="2584" fg:w="1"/><text x="93.1662%" y="223.50"></text></g><g><title>__clock_gettime (11 samples, 0.40%)</title><rect x="92.9881%" y="261" width="0.3955%" height="15" fill="rgb(210,219,27)" fg:x="2586" fg:w="11"/><text x="93.2381%" y="271.50"></text></g><g><title>__kernel_clock_gettime (10 samples, 0.36%)</title><rect x="93.0241%" y="245" width="0.3596%" height="15" fill="rgb(252,166,36)" fg:x="2587" fg:w="10"/><text x="93.2741%" y="255.50"></text></g><g><title>ahc30_a::Problem::solve_problem (2,525 samples, 90.79%)</title><rect x="2.6609%" y="341" width="90.7947%" height="15" fill="rgb(245,132,34)" fg:x="74" fg:w="2525"/><text x="2.9109%" y="351.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (16 samples, 0.58%)</title><rect x="92.8803%" y="325" width="0.5753%" height="15" fill="rgb(236,54,3)" fg:x="2583" fg:w="16"/><text x="93.1303%" y="335.50"></text></g><g><title>std::time::Instant::now (14 samples, 0.50%)</title><rect x="92.9522%" y="309" width="0.5034%" height="15" fill="rgb(241,173,43)" fg:x="2585" fg:w="14"/><text x="93.2022%" y="319.50"></text></g><g><title>std::sys::unix::time::Instant::now (14 samples, 0.50%)</title><rect x="92.9522%" y="293" width="0.5034%" height="15" fill="rgb(215,190,9)" fg:x="2585" fg:w="14"/><text x="93.2022%" y="303.50"></text></g><g><title>std::sys::unix::time::Timespec::now (14 samples, 0.50%)</title><rect x="92.9522%" y="277" width="0.5034%" height="15" fill="rgb(242,101,16)" fg:x="2585" fg:w="14"/><text x="93.2022%" y="287.50"></text></g><g><title>clock_gettime@plt (2 samples, 0.07%)</title><rect x="93.3837%" y="261" width="0.0719%" height="15" fill="rgb(223,190,21)" fg:x="2597" fg:w="2"/><text x="93.6337%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="93.8152%" y="325" width="0.0719%" height="15" fill="rgb(215,228,25)" fg:x="2609" fg:w="2"/><text x="94.0652%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="93.8152%" y="309" width="0.0719%" height="15" fill="rgb(225,36,22)" fg:x="2609" fg:w="2"/><text x="94.0652%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="93.8152%" y="293" width="0.0719%" height="15" fill="rgb(251,106,46)" fg:x="2609" fg:w="2"/><text x="94.0652%" y="303.50"></text></g><g><title>ahc30_a::Problem::uncover (15 samples, 0.54%)</title><rect x="93.8871%" y="325" width="0.5394%" height="15" fill="rgb(208,90,1)" fg:x="2611" fg:w="15"/><text x="94.1371%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.22%)</title><rect x="94.2107%" y="309" width="0.2157%" height="15" fill="rgb(243,10,4)" fg:x="2620" fg:w="6"/><text x="94.4607%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.22%)</title><rect x="94.2107%" y="293" width="0.2157%" height="15" fill="rgb(212,137,27)" fg:x="2620" fg:w="6"/><text x="94.4607%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.22%)</title><rect x="94.2107%" y="277" width="0.2157%" height="15" fill="rgb(231,220,49)" fg:x="2620" fg:w="6"/><text x="94.4607%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="94.4624%" y="197" width="0.0719%" height="15" fill="rgb(237,96,20)" fg:x="2627" fg:w="2"/><text x="94.7124%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="94.4624%" y="181" width="0.0719%" height="15" fill="rgb(239,229,30)" fg:x="2627" fg:w="2"/><text x="94.7124%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="94.4624%" y="165" width="0.0719%" height="15" fill="rgb(219,65,33)" fg:x="2627" fg:w="2"/><text x="94.7124%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="94.4984%" y="149" width="0.0360%" height="15" fill="rgb(243,134,7)" fg:x="2628" fg:w="1"/><text x="94.7484%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="94.4984%" y="133" width="0.0360%" height="15" fill="rgb(216,177,54)" fg:x="2628" fg:w="1"/><text x="94.7484%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="94.4624%" y="277" width="0.1079%" height="15" fill="rgb(211,160,20)" fg:x="2627" fg:w="3"/><text x="94.7124%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="94.4624%" y="261" width="0.1079%" height="15" fill="rgb(239,85,39)" fg:x="2627" fg:w="3"/><text x="94.7124%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.11%)</title><rect x="94.4624%" y="245" width="0.1079%" height="15" fill="rgb(232,125,22)" fg:x="2627" fg:w="3"/><text x="94.7124%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (3 samples, 0.11%)</title><rect x="94.4624%" y="229" width="0.1079%" height="15" fill="rgb(244,57,34)" fg:x="2627" fg:w="3"/><text x="94.7124%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.11%)</title><rect x="94.4624%" y="213" width="0.1079%" height="15" fill="rgb(214,203,32)" fg:x="2627" fg:w="3"/><text x="94.7124%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.04%)</title><rect x="94.5343%" y="197" width="0.0360%" height="15" fill="rgb(207,58,43)" fg:x="2629" fg:w="1"/><text x="94.7843%" y="207.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="94.5703%" y="245" width="0.0360%" height="15" fill="rgb(215,193,15)" fg:x="2630" fg:w="1"/><text x="94.8203%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.04%)</title><rect x="94.6063%" y="245" width="0.0360%" height="15" fill="rgb(232,15,44)" fg:x="2631" fg:w="1"/><text x="94.8563%" y="255.50"></text></g><g><title>ahc30_a::Problem::unselect_row (34 samples, 1.22%)</title><rect x="93.4556%" y="341" width="1.2226%" height="15" fill="rgb(212,3,48)" fg:x="2599" fg:w="34"/><text x="93.7056%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (7 samples, 0.25%)</title><rect x="94.4265%" y="325" width="0.2517%" height="15" fill="rgb(218,128,7)" fg:x="2626" fg:w="7"/><text x="94.6765%" y="335.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (7 samples, 0.25%)</title><rect x="94.4265%" y="309" width="0.2517%" height="15" fill="rgb(226,216,39)" fg:x="2626" fg:w="7"/><text x="94.6765%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.25%)</title><rect x="94.4265%" y="293" width="0.2517%" height="15" fill="rgb(243,47,51)" fg:x="2626" fg:w="7"/><text x="94.6765%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.11%)</title><rect x="94.5703%" y="277" width="0.1079%" height="15" fill="rgb(241,183,40)" fg:x="2630" fg:w="3"/><text x="94.8203%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.11%)</title><rect x="94.5703%" y="261" width="0.1079%" height="15" fill="rgb(231,217,32)" fg:x="2630" fg:w="3"/><text x="94.8203%" y="271.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (1 samples, 0.04%)</title><rect x="94.6422%" y="245" width="0.0360%" height="15" fill="rgb(229,61,38)" fg:x="2632" fg:w="1"/><text x="94.8922%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="94.6422%" y="229" width="0.0360%" height="15" fill="rgb(225,210,5)" fg:x="2632" fg:w="1"/><text x="94.8922%" y="239.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_empty (1 samples, 0.04%)</title><rect x="94.6782%" y="341" width="0.0360%" height="15" fill="rgb(231,79,45)" fg:x="2633" fg:w="1"/><text x="94.9282%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::is_empty (1 samples, 0.04%)</title><rect x="94.6782%" y="325" width="0.0360%" height="15" fill="rgb(224,100,7)" fg:x="2633" fg:w="1"/><text x="94.9282%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (1 samples, 0.04%)</title><rect x="94.6782%" y="309" width="0.0360%" height="15" fill="rgb(241,198,18)" fg:x="2633" fg:w="1"/><text x="94.9282%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (1 samples, 0.04%)</title><rect x="94.6782%" y="293" width="0.0360%" height="15" fill="rgb(252,97,53)" fg:x="2633" fg:w="1"/><text x="94.9282%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="94.6782%" y="277" width="0.0360%" height="15" fill="rgb(220,88,7)" fg:x="2633" fg:w="1"/><text x="94.9282%" y="287.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.04%)</title><rect x="94.7141%" y="325" width="0.0360%" height="15" fill="rgb(213,176,14)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="335.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.04%)</title><rect x="94.7141%" y="309" width="0.0360%" height="15" fill="rgb(246,73,7)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="319.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.04%)</title><rect x="94.7141%" y="293" width="0.0360%" height="15" fill="rgb(245,64,36)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="303.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (1 samples, 0.04%)</title><rect x="94.7141%" y="277" width="0.0360%" height="15" fill="rgb(245,80,10)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="287.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.04%)</title><rect x="94.7141%" y="261" width="0.0360%" height="15" fill="rgb(232,107,50)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.04%)</title><rect x="94.7141%" y="245" width="0.0360%" height="15" fill="rgb(253,3,0)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="255.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="94.7141%" y="229" width="0.0360%" height="15" fill="rgb(212,99,53)" fg:x="2634" fg:w="1"/><text x="94.9641%" y="239.50"></text></g><g><title>ahc30_a::Problem::solve_problem (2,593 samples, 93.24%)</title><rect x="1.6541%" y="357" width="93.2398%" height="15" fill="rgb(249,111,54)" fg:x="46" fg:w="2593"/><text x="1.9041%" y="367.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (5 samples, 0.18%)</title><rect x="94.7141%" y="341" width="0.1798%" height="15" fill="rgb(249,55,30)" fg:x="2634" fg:w="5"/><text x="94.9641%" y="351.50"></text></g><g><title>std::time::Instant::now (4 samples, 0.14%)</title><rect x="94.7501%" y="325" width="0.1438%" height="15" fill="rgb(237,47,42)" fg:x="2635" fg:w="4"/><text x="95.0001%" y="335.50"></text></g><g><title>std::sys::unix::time::Instant::now (4 samples, 0.14%)</title><rect x="94.7501%" y="309" width="0.1438%" height="15" fill="rgb(211,20,18)" fg:x="2635" fg:w="4"/><text x="95.0001%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::now (4 samples, 0.14%)</title><rect x="94.7501%" y="293" width="0.1438%" height="15" fill="rgb(231,203,46)" fg:x="2635" fg:w="4"/><text x="95.0001%" y="303.50"></text></g><g><title>__clock_gettime (4 samples, 0.14%)</title><rect x="94.7501%" y="277" width="0.1438%" height="15" fill="rgb(237,142,3)" fg:x="2635" fg:w="4"/><text x="95.0001%" y="287.50"></text></g><g><title>__kernel_clock_gettime (4 samples, 0.14%)</title><rect x="94.7501%" y="261" width="0.1438%" height="15" fill="rgb(241,107,1)" fg:x="2635" fg:w="4"/><text x="95.0001%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="94.9658%" y="341" width="0.0360%" height="15" fill="rgb(229,83,13)" fg:x="2641" fg:w="1"/><text x="95.2158%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="94.9658%" y="325" width="0.0360%" height="15" fill="rgb(241,91,40)" fg:x="2641" fg:w="1"/><text x="95.2158%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="94.9658%" y="309" width="0.0360%" height="15" fill="rgb(225,3,45)" fg:x="2641" fg:w="1"/><text x="95.2158%" y="319.50"></text></g><g><title>ahc30_a::Problem::uncover (8 samples, 0.29%)</title><rect x="95.0018%" y="341" width="0.2877%" height="15" fill="rgb(244,223,14)" fg:x="2642" fg:w="8"/><text x="95.2518%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.14%)</title><rect x="95.1456%" y="325" width="0.1438%" height="15" fill="rgb(224,124,37)" fg:x="2646" fg:w="4"/><text x="95.3956%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.14%)</title><rect x="95.1456%" y="309" width="0.1438%" height="15" fill="rgb(251,171,30)" fg:x="2646" fg:w="4"/><text x="95.3956%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.14%)</title><rect x="95.1456%" y="293" width="0.1438%" height="15" fill="rgb(236,46,54)" fg:x="2646" fg:w="4"/><text x="95.3956%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="95.2895%" y="293" width="0.0360%" height="15" fill="rgb(245,213,5)" fg:x="2650" fg:w="1"/><text x="95.5395%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="95.2895%" y="277" width="0.0360%" height="15" fill="rgb(230,144,27)" fg:x="2650" fg:w="1"/><text x="95.5395%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="95.2895%" y="261" width="0.0360%" height="15" fill="rgb(220,86,6)" fg:x="2650" fg:w="1"/><text x="95.5395%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="95.2895%" y="245" width="0.0360%" height="15" fill="rgb(240,20,13)" fg:x="2650" fg:w="1"/><text x="95.5395%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="95.2895%" y="229" width="0.0360%" height="15" fill="rgb(217,89,34)" fg:x="2650" fg:w="1"/><text x="95.5395%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.04%)</title><rect x="95.2895%" y="213" width="0.0360%" height="15" fill="rgb(229,13,5)" fg:x="2650" fg:w="1"/><text x="95.5395%" y="223.50"></text></g><g><title>ahc30_a::Problem::unselect_row (13 samples, 0.47%)</title><rect x="94.8939%" y="357" width="0.4675%" height="15" fill="rgb(244,67,35)" fg:x="2639" fg:w="13"/><text x="95.1439%" y="367.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (2 samples, 0.07%)</title><rect x="95.2895%" y="341" width="0.0719%" height="15" fill="rgb(221,40,2)" fg:x="2650" fg:w="2"/><text x="95.5395%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="95.2895%" y="325" width="0.0719%" height="15" fill="rgb(237,157,21)" fg:x="2650" fg:w="2"/><text x="95.5395%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.07%)</title><rect x="95.2895%" y="309" width="0.0719%" height="15" fill="rgb(222,94,11)" fg:x="2650" fg:w="2"/><text x="95.5395%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="95.3254%" y="293" width="0.0360%" height="15" fill="rgb(249,113,6)" fg:x="2651" fg:w="1"/><text x="95.5754%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="95.3254%" y="277" width="0.0360%" height="15" fill="rgb(238,137,36)" fg:x="2651" fg:w="1"/><text x="95.5754%" y="287.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="95.3254%" y="261" width="0.0360%" height="15" fill="rgb(210,102,26)" fg:x="2651" fg:w="1"/><text x="95.5754%" y="271.50"></text></g><g><title>ahc30_a::Problem::solve_problem (2,620 samples, 94.21%)</title><rect x="1.1866%" y="373" width="94.2107%" height="15" fill="rgb(218,30,30)" fg:x="33" fg:w="2620"/><text x="1.4366%" y="383.50">ahc30_a::Problem::solve_problem</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.04%)</title><rect x="95.3614%" y="357" width="0.0360%" height="15" fill="rgb(214,67,26)" fg:x="2652" fg:w="1"/><text x="95.6114%" y="367.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.04%)</title><rect x="95.3614%" y="341" width="0.0360%" height="15" fill="rgb(251,9,53)" fg:x="2652" fg:w="1"/><text x="95.6114%" y="351.50"></text></g><g><title>std::sys::unix::time::Instant::now (1 samples, 0.04%)</title><rect x="95.3614%" y="325" width="0.0360%" height="15" fill="rgb(228,204,25)" fg:x="2652" fg:w="1"/><text x="95.6114%" y="335.50"></text></g><g><title>std::sys::unix::time::Timespec::now (1 samples, 0.04%)</title><rect x="95.3614%" y="309" width="0.0360%" height="15" fill="rgb(207,153,8)" fg:x="2652" fg:w="1"/><text x="95.6114%" y="319.50"></text></g><g><title>__clock_gettime (1 samples, 0.04%)</title><rect x="95.3614%" y="293" width="0.0360%" height="15" fill="rgb(242,9,16)" fg:x="2652" fg:w="1"/><text x="95.6114%" y="303.50"></text></g><g><title>__kernel_clock_gettime (1 samples, 0.04%)</title><rect x="95.3614%" y="277" width="0.0360%" height="15" fill="rgb(217,211,10)" fg:x="2652" fg:w="1"/><text x="95.6114%" y="287.50"></text></g><g><title>ahc30_a::Problem::solve_problem (2,624 samples, 94.35%)</title><rect x="1.0787%" y="389" width="94.3545%" height="15" fill="rgb(219,228,52)" fg:x="30" fg:w="2624"/><text x="1.3287%" y="399.50">ahc30_a::Problem::solve_problem</text></g><g><title>ahc30_a::Problem::unselect_row (1 samples, 0.04%)</title><rect x="95.3973%" y="373" width="0.0360%" height="15" fill="rgb(231,92,29)" fg:x="2653" fg:w="1"/><text x="95.6473%" y="383.50"></text></g><g><title>ahc30_a::Problem::uncover (1 samples, 0.04%)</title><rect x="95.3973%" y="357" width="0.0360%" height="15" fill="rgb(232,8,23)" fg:x="2653" fg:w="1"/><text x="95.6473%" y="367.50"></text></g><g><title>ahc30_a::Problem::solve_problem (2,625 samples, 94.39%)</title><rect x="1.0787%" y="453" width="94.3905%" height="15" fill="rgb(216,211,34)" fg:x="30" fg:w="2625"/><text x="1.3287%" y="463.50">ahc30_a::Problem::solve_problem</text></g><g><title>ahc30_a::Problem::solve_problem (2,625 samples, 94.39%)</title><rect x="1.0787%" y="437" width="94.3905%" height="15" fill="rgb(236,151,0)" fg:x="30" fg:w="2625"/><text x="1.3287%" y="447.50">ahc30_a::Problem::solve_problem</text></g><g><title>ahc30_a::Problem::solve_problem (2,625 samples, 94.39%)</title><rect x="1.0787%" y="421" width="94.3905%" height="15" fill="rgb(209,168,3)" fg:x="30" fg:w="2625"/><text x="1.3287%" y="431.50">ahc30_a::Problem::solve_problem</text></g><g><title>ahc30_a::Problem::solve_problem (2,625 samples, 94.39%)</title><rect x="1.0787%" y="405" width="94.3905%" height="15" fill="rgb(208,129,28)" fg:x="30" fg:w="2625"/><text x="1.3287%" y="415.50">ahc30_a::Problem::solve_problem</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="95.4333%" y="389" width="0.0360%" height="15" fill="rgb(229,78,22)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="95.4333%" y="373" width="0.0360%" height="15" fill="rgb(228,187,13)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="95.4333%" y="357" width="0.0360%" height="15" fill="rgb(240,119,24)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="95.4333%" y="341" width="0.0360%" height="15" fill="rgb(209,194,42)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="95.4333%" y="325" width="0.0360%" height="15" fill="rgb(247,200,46)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="95.4333%" y="309" width="0.0360%" height="15" fill="rgb(218,76,16)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="95.4333%" y="293" width="0.0360%" height="15" fill="rgb(225,21,48)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="303.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="95.4333%" y="277" width="0.0360%" height="15" fill="rgb(239,223,50)" fg:x="2654" fg:w="1"/><text x="95.6833%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.32%)</title><rect x="95.4693%" y="453" width="0.3236%" height="15" fill="rgb(244,45,21)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.32%)</title><rect x="95.4693%" y="437" width="0.3236%" height="15" fill="rgb(232,33,43)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.32%)</title><rect x="95.4693%" y="421" width="0.3236%" height="15" fill="rgb(209,8,3)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.32%)</title><rect x="95.4693%" y="405" width="0.3236%" height="15" fill="rgb(214,25,53)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.32%)</title><rect x="95.4693%" y="389" width="0.3236%" height="15" fill="rgb(254,186,54)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="399.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.32%)</title><rect x="95.4693%" y="373" width="0.3236%" height="15" fill="rgb(208,174,49)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="383.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.32%)</title><rect x="95.4693%" y="357" width="0.3236%" height="15" fill="rgb(233,191,51)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="367.50"></text></g><g><title>realloc (9 samples, 0.32%)</title><rect x="95.4693%" y="341" width="0.3236%" height="15" fill="rgb(222,134,10)" fg:x="2655" fg:w="9"/><text x="95.7193%" y="351.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="95.6490%" y="325" width="0.1438%" height="15" fill="rgb(230,226,20)" fg:x="2660" fg:w="4"/><text x="95.8990%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="95.6490%" y="309" width="0.1438%" height="15" fill="rgb(251,111,25)" fg:x="2660" fg:w="4"/><text x="95.8990%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.04%)</title><rect x="95.7929%" y="453" width="0.0360%" height="15" fill="rgb(224,40,46)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="95.7929%" y="437" width="0.0360%" height="15" fill="rgb(236,108,47)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="95.7929%" y="421" width="0.0360%" height="15" fill="rgb(234,93,0)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.04%)</title><rect x="95.7929%" y="405" width="0.0360%" height="15" fill="rgb(224,213,32)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="95.7929%" y="389" width="0.0360%" height="15" fill="rgb(251,11,48)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.04%)</title><rect x="95.7929%" y="373" width="0.0360%" height="15" fill="rgb(236,173,5)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="95.7929%" y="357" width="0.0360%" height="15" fill="rgb(230,95,12)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="95.7929%" y="341" width="0.0360%" height="15" fill="rgb(232,209,1)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.04%)</title><rect x="95.7929%" y="325" width="0.0360%" height="15" fill="rgb(232,6,1)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="335.50"></text></g><g><title>ahc30_a::Problem::get_mino_coords::{{closure}} (1 samples, 0.04%)</title><rect x="95.7929%" y="309" width="0.0360%" height="15" fill="rgb(210,224,50)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.04%)</title><rect x="95.7929%" y="293" width="0.0360%" height="15" fill="rgb(228,127,35)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="95.7929%" y="277" width="0.0360%" height="15" fill="rgb(245,102,45)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="95.7929%" y="261" width="0.0360%" height="15" fill="rgb(214,1,49)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="95.7929%" y="245" width="0.0360%" height="15" fill="rgb(226,163,40)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="95.7929%" y="229" width="0.0360%" height="15" fill="rgb(239,212,28)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="95.7929%" y="213" width="0.0360%" height="15" fill="rgb(220,20,13)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="95.7929%" y="197" width="0.0360%" height="15" fill="rgb(210,164,35)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="95.7929%" y="181" width="0.0360%" height="15" fill="rgb(248,109,41)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="95.7929%" y="165" width="0.0360%" height="15" fill="rgb(238,23,50)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="95.7929%" y="149" width="0.0360%" height="15" fill="rgb(211,48,49)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="159.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="95.7929%" y="133" width="0.0360%" height="15" fill="rgb(223,36,21)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="95.7929%" y="117" width="0.0360%" height="15" fill="rgb(207,123,46)" fg:x="2664" fg:w="1"/><text x="96.0429%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(usize,ahc30_a::grid::Coordinate)&gt;&gt;&gt; (3 samples, 0.11%)</title><rect x="95.8288%" y="453" width="0.1079%" height="15" fill="rgb(240,218,32)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="95.8288%" y="437" width="0.1079%" height="15" fill="rgb(252,5,43)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;(usize,ahc30_a::grid::Coordinate)&gt;]&gt; (3 samples, 0.11%)</title><rect x="95.8288%" y="421" width="0.1079%" height="15" fill="rgb(252,84,19)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,ahc30_a::grid::Coordinate)&gt;&gt; (3 samples, 0.11%)</title><rect x="95.8288%" y="405" width="0.1079%" height="15" fill="rgb(243,152,39)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,ahc30_a::grid::Coordinate)&gt;&gt; (3 samples, 0.11%)</title><rect x="95.8288%" y="389" width="0.1079%" height="15" fill="rgb(234,160,15)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="95.8288%" y="373" width="0.1079%" height="15" fill="rgb(237,34,20)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="95.8288%" y="357" width="0.1079%" height="15" fill="rgb(229,97,13)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="95.8288%" y="341" width="0.1079%" height="15" fill="rgb(234,71,50)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="351.50"></text></g><g><title>free (3 samples, 0.11%)</title><rect x="95.8288%" y="325" width="0.1079%" height="15" fill="rgb(253,155,4)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="335.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="95.8288%" y="309" width="0.1079%" height="15" fill="rgb(222,185,37)" fg:x="2665" fg:w="3"/><text x="96.0788%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="95.9008%" y="293" width="0.0360%" height="15" fill="rgb(251,177,13)" fg:x="2667" fg:w="1"/><text x="96.1508%" y="303.50"></text></g><g><title>ahc30_a::Problem::get_mino_coords (2,649 samples, 95.25%)</title><rect x="0.7192%" y="469" width="95.2535%" height="15" fill="rgb(250,179,40)" fg:x="20" fg:w="2649"/><text x="0.9692%" y="479.50">ahc30_a::Problem::get_mino_coords</text></g><g><title>std::io::stdio::_eprint (1 samples, 0.04%)</title><rect x="95.9367%" y="453" width="0.0360%" height="15" fill="rgb(242,44,2)" fg:x="2668" fg:w="1"/><text x="96.1867%" y="463.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.04%)</title><rect x="95.9367%" y="437" width="0.0360%" height="15" fill="rgb(216,177,13)" fg:x="2668" fg:w="1"/><text x="96.1867%" y="447.50"></text></g><g><title>std::io::stdio::print_to_buffer_if_capture_used (1 samples, 0.04%)</title><rect x="95.9367%" y="421" width="0.0360%" height="15" fill="rgb(216,106,43)" fg:x="2668" fg:w="1"/><text x="96.1867%" y="431.50"></text></g><g><title>ahc30_a::Problem::cover_row (1 samples, 0.04%)</title><rect x="96.0086%" y="437" width="0.0360%" height="15" fill="rgb(216,183,2)" fg:x="2670" fg:w="1"/><text x="96.2586%" y="447.50"></text></g><g><title>ahc30_a::Problem::cover (1 samples, 0.04%)</title><rect x="96.0086%" y="421" width="0.0360%" height="15" fill="rgb(249,75,3)" fg:x="2670" fg:w="1"/><text x="96.2586%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="96.0086%" y="405" width="0.0360%" height="15" fill="rgb(219,67,39)" fg:x="2670" fg:w="1"/><text x="96.2586%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="96.0086%" y="389" width="0.0360%" height="15" fill="rgb(253,228,2)" fg:x="2670" fg:w="1"/><text x="96.2586%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="96.0086%" y="373" width="0.0360%" height="15" fill="rgb(235,138,27)" fg:x="2670" fg:w="1"/><text x="96.2586%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.22%)</title><rect x="96.0446%" y="277" width="0.2157%" height="15" fill="rgb(236,97,51)" fg:x="2671" fg:w="6"/><text x="96.2946%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.22%)</title><rect x="96.0446%" y="261" width="0.2157%" height="15" fill="rgb(240,80,30)" fg:x="2671" fg:w="6"/><text x="96.2946%" y="271.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.22%)</title><rect x="96.0446%" y="245" width="0.2157%" height="15" fill="rgb(230,178,19)" fg:x="2671" fg:w="6"/><text x="96.2946%" y="255.50"></text></g><g><title>realloc (6 samples, 0.22%)</title><rect x="96.0446%" y="229" width="0.2157%" height="15" fill="rgb(210,190,27)" fg:x="2671" fg:w="6"/><text x="96.2946%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="96.1165%" y="213" width="0.1438%" height="15" fill="rgb(222,107,31)" fg:x="2673" fg:w="4"/><text x="96.3665%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="96.1165%" y="197" width="0.1438%" height="15" fill="rgb(216,127,34)" fg:x="2673" fg:w="4"/><text x="96.3665%" y="207.50"></text></g><g><title>ahc30_a::Mino::get_blocks (7 samples, 0.25%)</title><rect x="96.0446%" y="357" width="0.2517%" height="15" fill="rgb(234,116,52)" fg:x="2671" fg:w="7"/><text x="96.2946%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.25%)</title><rect x="96.0446%" y="341" width="0.2517%" height="15" fill="rgb(222,124,15)" fg:x="2671" fg:w="7"/><text x="96.2946%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.25%)</title><rect x="96.0446%" y="325" width="0.2517%" height="15" fill="rgb(231,179,28)" fg:x="2671" fg:w="7"/><text x="96.2946%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.25%)</title><rect x="96.0446%" y="309" width="0.2517%" height="15" fill="rgb(226,93,45)" fg:x="2671" fg:w="7"/><text x="96.2946%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.25%)</title><rect x="96.0446%" y="293" width="0.2517%" height="15" fill="rgb(215,8,51)" fg:x="2671" fg:w="7"/><text x="96.2946%" y="303.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="96.2603%" y="277" width="0.0360%" height="15" fill="rgb(223,106,5)" fg:x="2677" fg:w="1"/><text x="96.5103%" y="287.50"></text></g><g><title>ahc30_a::Problem::add_record (10 samples, 0.36%)</title><rect x="95.9727%" y="453" width="0.3596%" height="15" fill="rgb(250,191,5)" fg:x="2669" fg:w="10"/><text x="96.2227%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (8 samples, 0.29%)</title><rect x="96.0446%" y="437" width="0.2877%" height="15" fill="rgb(242,132,44)" fg:x="2671" fg:w="8"/><text x="96.2946%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (8 samples, 0.29%)</title><rect x="96.0446%" y="421" width="0.2877%" height="15" fill="rgb(251,152,29)" fg:x="2671" fg:w="8"/><text x="96.2946%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (8 samples, 0.29%)</title><rect x="96.0446%" y="405" width="0.2877%" height="15" fill="rgb(218,179,5)" fg:x="2671" fg:w="8"/><text x="96.2946%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::{{closure}} (8 samples, 0.29%)</title><rect x="96.0446%" y="389" width="0.2877%" height="15" fill="rgb(227,67,19)" fg:x="2671" fg:w="8"/><text x="96.2946%" y="399.50"></text></g><g><title>ahc30_a::Problem::add_record::{{closure}} (8 samples, 0.29%)</title><rect x="96.0446%" y="373" width="0.2877%" height="15" fill="rgb(233,119,31)" fg:x="2671" fg:w="8"/><text x="96.2946%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (1 samples, 0.04%)</title><rect x="96.2963%" y="357" width="0.0360%" height="15" fill="rgb(241,120,22)" fg:x="2678" fg:w="1"/><text x="96.5463%" y="367.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (1 samples, 0.04%)</title><rect x="96.2963%" y="341" width="0.0360%" height="15" fill="rgb(224,102,30)" fg:x="2678" fg:w="1"/><text x="96.5463%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (1 samples, 0.04%)</title><rect x="96.2963%" y="325" width="0.0360%" height="15" fill="rgb(210,164,37)" fg:x="2678" fg:w="1"/><text x="96.5463%" y="335.50"></text></g><g><title>ahc30_a::Solver::filter_candidate (3 samples, 0.11%)</title><rect x="96.3323%" y="453" width="0.1079%" height="15" fill="rgb(226,191,16)" fg:x="2679" fg:w="3"/><text x="96.5823%" y="463.50"></text></g><g><title>ahc30_a::Candidate::get_score_1 (3 samples, 0.11%)</title><rect x="96.3323%" y="437" width="0.1079%" height="15" fill="rgb(214,40,45)" fg:x="2679" fg:w="3"/><text x="96.5823%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.3682%" y="421" width="0.0719%" height="15" fill="rgb(244,29,26)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="431.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.3682%" y="405" width="0.0719%" height="15" fill="rgb(216,16,5)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="415.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.3682%" y="389" width="0.0719%" height="15" fill="rgb(249,76,35)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="399.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.3682%" y="373" width="0.0719%" height="15" fill="rgb(207,11,44)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.3682%" y="357" width="0.0719%" height="15" fill="rgb(228,190,49)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.07%)</title><rect x="96.3682%" y="341" width="0.0719%" height="15" fill="rgb(214,173,12)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.3682%" y="325" width="0.0719%" height="15" fill="rgb(218,26,35)" fg:x="2680" fg:w="2"/><text x="96.6182%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="96.4042%" y="309" width="0.0360%" height="15" fill="rgb(220,200,19)" fg:x="2681" fg:w="1"/><text x="96.6542%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (2 samples, 0.07%)</title><rect x="96.4401%" y="453" width="0.0719%" height="15" fill="rgb(239,95,49)" fg:x="2682" fg:w="2"/><text x="96.6901%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (2 samples, 0.07%)</title><rect x="96.4401%" y="437" width="0.0719%" height="15" fill="rgb(235,85,53)" fg:x="2682" fg:w="2"/><text x="96.6901%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (2 samples, 0.07%)</title><rect x="96.4401%" y="421" width="0.0719%" height="15" fill="rgb(233,133,31)" fg:x="2682" fg:w="2"/><text x="96.6901%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahc30_a::Candidate&gt; (1 samples, 0.04%)</title><rect x="96.4761%" y="405" width="0.0360%" height="15" fill="rgb(218,25,20)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;ahc30_a::grid::Coordinate&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="96.4761%" y="389" width="0.0360%" height="15" fill="rgb(252,210,38)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;ahc30_a::grid::Coordinate&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="96.4761%" y="373" width="0.0360%" height="15" fill="rgb(242,134,21)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="96.4761%" y="357" width="0.0360%" height="15" fill="rgb(213,28,48)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="96.4761%" y="341" width="0.0360%" height="15" fill="rgb(250,196,2)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="96.4761%" y="325" width="0.0360%" height="15" fill="rgb(227,5,17)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="335.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="96.4761%" y="309" width="0.0360%" height="15" fill="rgb(221,226,24)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="96.4761%" y="293" width="0.0360%" height="15" fill="rgb(211,5,48)" fg:x="2683" fg:w="1"/><text x="96.7261%" y="303.50"></text></g><g><title>ahc30_a::Solver::measure (16 samples, 0.58%)</title><rect x="95.9727%" y="469" width="0.5753%" height="15" fill="rgb(219,150,6)" fg:x="2669" fg:w="16"/><text x="96.2227%" y="479.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::new (1 samples, 0.04%)</title><rect x="96.5120%" y="453" width="0.0360%" height="15" fill="rgb(251,46,16)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="463.50"></text></g><g><title>std::io::buffered::bufreader::BufReader&lt;R&gt;::with_capacity (1 samples, 0.04%)</title><rect x="96.5120%" y="437" width="0.0360%" height="15" fill="rgb(220,204,40)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="447.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::with_capacity (1 samples, 0.04%)</title><rect x="96.5120%" y="421" width="0.0360%" height="15" fill="rgb(211,85,2)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;[T]&gt;::new_uninit_slice (1 samples, 0.04%)</title><rect x="96.5120%" y="405" width="0.0360%" height="15" fill="rgb(229,17,7)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (1 samples, 0.04%)</title><rect x="96.5120%" y="389" width="0.0360%" height="15" fill="rgb(239,72,28)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="96.5120%" y="373" width="0.0360%" height="15" fill="rgb(230,47,54)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="96.5120%" y="357" width="0.0360%" height="15" fill="rgb(214,50,8)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="96.5120%" y="341" width="0.0360%" height="15" fill="rgb(216,198,43)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="96.5120%" y="325" width="0.0360%" height="15" fill="rgb(234,20,35)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="96.5120%" y="309" width="0.0360%" height="15" fill="rgb(254,45,19)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="319.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="96.5120%" y="293" width="0.0360%" height="15" fill="rgb(219,14,44)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="96.5120%" y="277" width="0.0360%" height="15" fill="rgb(217,220,26)" fg:x="2684" fg:w="1"/><text x="96.7620%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,usize&gt;&gt; (2 samples, 0.07%)</title><rect x="96.5480%" y="469" width="0.0719%" height="15" fill="rgb(213,158,28)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,usize,std::hash::random::RandomState&gt;&gt; (2 samples, 0.07%)</title><rect x="96.5480%" y="453" width="0.0719%" height="15" fill="rgb(252,51,52)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,usize)&gt;&gt; (2 samples, 0.07%)</title><rect x="96.5480%" y="437" width="0.0719%" height="15" fill="rgb(246,89,16)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="96.5480%" y="421" width="0.0719%" height="15" fill="rgb(216,158,49)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.07%)</title><rect x="96.5480%" y="405" width="0.0719%" height="15" fill="rgb(236,107,19)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.07%)</title><rect x="96.5480%" y="389" width="0.0719%" height="15" fill="rgb(228,185,30)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="96.5480%" y="373" width="0.0719%" height="15" fill="rgb(246,134,8)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="96.5480%" y="357" width="0.0719%" height="15" fill="rgb(214,143,50)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="367.50"></text></g><g><title>free (2 samples, 0.07%)</title><rect x="96.5480%" y="341" width="0.0719%" height="15" fill="rgb(228,75,8)" fg:x="2685" fg:w="2"/><text x="96.7980%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (12 samples, 0.43%)</title><rect x="96.6918%" y="389" width="0.4315%" height="15" fill="rgb(207,175,4)" fg:x="2689" fg:w="12"/><text x="96.9418%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (12 samples, 0.43%)</title><rect x="96.6918%" y="373" width="0.4315%" height="15" fill="rgb(205,108,24)" fg:x="2689" fg:w="12"/><text x="96.9418%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (12 samples, 0.43%)</title><rect x="96.6918%" y="357" width="0.4315%" height="15" fill="rgb(244,120,49)" fg:x="2689" fg:w="12"/><text x="96.9418%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.29%)</title><rect x="96.8357%" y="341" width="0.2877%" height="15" fill="rgb(223,47,38)" fg:x="2693" fg:w="8"/><text x="97.0857%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="97.0514%" y="325" width="0.0719%" height="15" fill="rgb(229,179,11)" fg:x="2699" fg:w="2"/><text x="97.3014%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.18%)</title><rect x="97.3750%" y="277" width="0.1798%" height="15" fill="rgb(231,122,1)" fg:x="2708" fg:w="5"/><text x="97.6250%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.29%)</title><rect x="97.3031%" y="293" width="0.2877%" height="15" fill="rgb(245,119,9)" fg:x="2706" fg:w="8"/><text x="97.5531%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="97.5548%" y="277" width="0.0360%" height="15" fill="rgb(241,163,25)" fg:x="2713" fg:w="1"/><text x="97.8048%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.50%)</title><rect x="97.1233%" y="341" width="0.5034%" height="15" fill="rgb(217,214,3)" fg:x="2701" fg:w="14"/><text x="97.3733%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.50%)</title><rect x="97.1233%" y="325" width="0.5034%" height="15" fill="rgb(240,86,28)" fg:x="2701" fg:w="14"/><text x="97.3733%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.50%)</title><rect x="97.1233%" y="309" width="0.5034%" height="15" fill="rgb(215,47,9)" fg:x="2701" fg:w="14"/><text x="97.3733%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.04%)</title><rect x="97.5908%" y="293" width="0.0360%" height="15" fill="rgb(252,25,45)" fg:x="2714" fg:w="1"/><text x="97.8408%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (31 samples, 1.11%)</title><rect x="96.6199%" y="421" width="1.1147%" height="15" fill="rgb(251,164,9)" fg:x="2687" fg:w="31"/><text x="96.8699%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (31 samples, 1.11%)</title><rect x="96.6199%" y="405" width="1.1147%" height="15" fill="rgb(233,194,0)" fg:x="2687" fg:w="31"/><text x="96.8699%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (17 samples, 0.61%)</title><rect x="97.1233%" y="389" width="0.6113%" height="15" fill="rgb(249,111,24)" fg:x="2701" fg:w="17"/><text x="97.3733%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (17 samples, 0.61%)</title><rect x="97.1233%" y="373" width="0.6113%" height="15" fill="rgb(250,223,3)" fg:x="2701" fg:w="17"/><text x="97.3733%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.61%)</title><rect x="97.1233%" y="357" width="0.6113%" height="15" fill="rgb(236,178,37)" fg:x="2701" fg:w="17"/><text x="97.3733%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.11%)</title><rect x="97.6268%" y="341" width="0.1079%" height="15" fill="rgb(241,158,50)" fg:x="2715" fg:w="3"/><text x="97.8768%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.07%)</title><rect x="97.7346%" y="373" width="0.0719%" height="15" fill="rgb(213,121,41)" fg:x="2718" fg:w="2"/><text x="97.9846%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="97.7346%" y="357" width="0.0719%" height="15" fill="rgb(240,92,3)" fg:x="2718" fg:w="2"/><text x="97.9846%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2 samples, 0.07%)</title><rect x="97.7346%" y="341" width="0.0719%" height="15" fill="rgb(205,123,3)" fg:x="2718" fg:w="2"/><text x="97.9846%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2 samples, 0.07%)</title><rect x="97.7346%" y="325" width="0.0719%" height="15" fill="rgb(205,97,47)" fg:x="2718" fg:w="2"/><text x="97.9846%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.14%)</title><rect x="97.7346%" y="421" width="0.1438%" height="15" fill="rgb(247,152,14)" fg:x="2718" fg:w="4"/><text x="97.9846%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.14%)</title><rect x="97.7346%" y="405" width="0.1438%" height="15" fill="rgb(248,195,53)" fg:x="2718" fg:w="4"/><text x="97.9846%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.14%)</title><rect x="97.7346%" y="389" width="0.1438%" height="15" fill="rgb(226,201,16)" fg:x="2718" fg:w="4"/><text x="97.9846%" y="399.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (2 samples, 0.07%)</title><rect x="97.8065%" y="373" width="0.0719%" height="15" fill="rgb(205,98,0)" fg:x="2720" fg:w="2"/><text x="98.0565%" y="383.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.07%)</title><rect x="97.8065%" y="357" width="0.0719%" height="15" fill="rgb(214,191,48)" fg:x="2720" fg:w="2"/><text x="98.0565%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (39 samples, 1.40%)</title><rect x="96.6199%" y="469" width="1.4024%" height="15" fill="rgb(237,112,39)" fg:x="2687" fg:w="39"/><text x="96.8699%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (39 samples, 1.40%)</title><rect x="96.6199%" y="453" width="1.4024%" height="15" fill="rgb(247,203,27)" fg:x="2687" fg:w="39"/><text x="96.8699%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (39 samples, 1.40%)</title><rect x="96.6199%" y="437" width="1.4024%" height="15" fill="rgb(235,124,28)" fg:x="2687" fg:w="39"/><text x="96.8699%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (4 samples, 0.14%)</title><rect x="97.8785%" y="421" width="0.1438%" height="15" fill="rgb(208,207,46)" fg:x="2722" fg:w="4"/><text x="98.1285%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (4 samples, 0.14%)</title><rect x="97.8785%" y="405" width="0.1438%" height="15" fill="rgb(234,176,4)" fg:x="2722" fg:w="4"/><text x="98.1285%" y="415.50"></text></g><g><title>core::mem::replace (2 samples, 0.07%)</title><rect x="98.2380%" y="437" width="0.0719%" height="15" fill="rgb(230,133,28)" fg:x="2732" fg:w="2"/><text x="98.4880%" y="447.50"></text></g><g><title>core::ptr::read (2 samples, 0.07%)</title><rect x="98.2380%" y="421" width="0.0719%" height="15" fill="rgb(211,137,40)" fg:x="2732" fg:w="2"/><text x="98.4880%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.14%)</title><rect x="98.6336%" y="341" width="0.1438%" height="15" fill="rgb(254,35,13)" fg:x="2743" fg:w="4"/><text x="98.8836%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (18 samples, 0.65%)</title><rect x="98.3459%" y="405" width="0.6472%" height="15" fill="rgb(225,49,51)" fg:x="2735" fg:w="18"/><text x="98.5959%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (18 samples, 0.65%)</title><rect x="98.3459%" y="389" width="0.6472%" height="15" fill="rgb(251,10,15)" fg:x="2735" fg:w="18"/><text x="98.5959%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (18 samples, 0.65%)</title><rect x="98.3459%" y="373" width="0.6472%" height="15" fill="rgb(228,207,15)" fg:x="2735" fg:w="18"/><text x="98.5959%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (12 samples, 0.43%)</title><rect x="98.5617%" y="357" width="0.4315%" height="15" fill="rgb(241,99,19)" fg:x="2741" fg:w="12"/><text x="98.8117%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.22%)</title><rect x="98.7774%" y="341" width="0.2157%" height="15" fill="rgb(207,104,49)" fg:x="2747" fg:w="6"/><text x="99.0274%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.25%)</title><rect x="98.9932%" y="357" width="0.2517%" height="15" fill="rgb(234,99,18)" fg:x="2753" fg:w="7"/><text x="99.2432%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.25%)</title><rect x="98.9932%" y="341" width="0.2517%" height="15" fill="rgb(213,191,49)" fg:x="2753" fg:w="7"/><text x="99.2432%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.25%)</title><rect x="98.9932%" y="325" width="0.2517%" height="15" fill="rgb(210,226,19)" fg:x="2753" fg:w="7"/><text x="99.2432%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.07%)</title><rect x="99.1730%" y="309" width="0.0719%" height="15" fill="rgb(229,97,18)" fg:x="2758" fg:w="2"/><text x="99.4230%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="99.2089%" y="293" width="0.0360%" height="15" fill="rgb(211,167,15)" fg:x="2759" fg:w="1"/><text x="99.4589%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 1.04%)</title><rect x="98.3100%" y="437" width="1.0428%" height="15" fill="rgb(210,169,34)" fg:x="2734" fg:w="29"/><text x="98.5600%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 1.04%)</title><rect x="98.3100%" y="421" width="1.0428%" height="15" fill="rgb(241,121,31)" fg:x="2734" fg:w="29"/><text x="98.5600%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (10 samples, 0.36%)</title><rect x="98.9932%" y="405" width="0.3596%" height="15" fill="rgb(232,40,11)" fg:x="2753" fg:w="10"/><text x="99.2432%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (10 samples, 0.36%)</title><rect x="98.9932%" y="389" width="0.3596%" height="15" fill="rgb(205,86,26)" fg:x="2753" fg:w="10"/><text x="99.2432%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.36%)</title><rect x="98.9932%" y="373" width="0.3596%" height="15" fill="rgb(231,126,28)" fg:x="2753" fg:w="10"/><text x="99.2432%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.11%)</title><rect x="99.2449%" y="357" width="0.1079%" height="15" fill="rgb(219,221,18)" fg:x="2760" fg:w="3"/><text x="99.4949%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (2 samples, 0.07%)</title><rect x="99.3528%" y="437" width="0.0719%" height="15" fill="rgb(211,40,0)" fg:x="2763" fg:w="2"/><text x="99.6028%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="99.3528%" y="421" width="0.0719%" height="15" fill="rgb(239,85,43)" fg:x="2763" fg:w="2"/><text x="99.6028%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="99.3528%" y="405" width="0.0719%" height="15" fill="rgb(231,55,21)" fg:x="2763" fg:w="2"/><text x="99.6028%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="99.3528%" y="389" width="0.0719%" height="15" fill="rgb(225,184,43)" fg:x="2763" fg:w="2"/><text x="99.6028%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="99.6045%" y="405" width="0.1079%" height="15" fill="rgb(251,158,41)" fg:x="2770" fg:w="3"/><text x="99.8545%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.11%)</title><rect x="99.6045%" y="389" width="0.1079%" height="15" fill="rgb(234,159,37)" fg:x="2770" fg:w="3"/><text x="99.8545%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::{{closure}} (3 samples, 0.11%)</title><rect x="99.7123%" y="405" width="0.1079%" height="15" fill="rgb(216,204,22)" fg:x="2773" fg:w="3"/><text x="99.9623%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.11%)</title><rect x="99.7123%" y="389" width="0.1079%" height="15" fill="rgb(214,17,3)" fg:x="2773" fg:w="3"/><text x="99.9623%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (3 samples, 0.11%)</title><rect x="99.7123%" y="373" width="0.1079%" height="15" fill="rgb(212,111,17)" fg:x="2773" fg:w="3"/><text x="99.9623%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.11%)</title><rect x="99.7123%" y="357" width="0.1079%" height="15" fill="rgb(221,157,24)" fg:x="2773" fg:w="3"/><text x="99.9623%" y="367.50"></text></g><g><title>hashbrown::raw::neon::Group::load (1 samples, 0.04%)</title><rect x="99.8202%" y="405" width="0.0360%" height="15" fill="rgb(252,16,13)" fg:x="2776" fg:w="1"/><text x="100.0702%" y="415.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.04%)</title><rect x="99.8202%" y="389" width="0.0360%" height="15" fill="rgb(221,62,2)" fg:x="2776" fg:w="1"/><text x="100.0702%" y="399.50"></text></g><g><title>core::ptr::read_unaligned (1 samples, 0.04%)</title><rect x="99.8202%" y="373" width="0.0360%" height="15" fill="rgb(247,87,22)" fg:x="2776" fg:w="1"/><text x="100.0702%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="99.8202%" y="357" width="0.0360%" height="15" fill="rgb(215,73,9)" fg:x="2776" fg:w="1"/><text x="100.0702%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (53 samples, 1.91%)</title><rect x="98.0223%" y="469" width="1.9058%" height="15" fill="rgb(207,175,33)" fg:x="2726" fg:w="53"/><text x="98.2723%" y="479.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 1.83%)</title><rect x="98.0942%" y="453" width="1.8339%" height="15" fill="rgb(243,129,54)" fg:x="2728" fg:w="51"/><text x="98.3442%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (14 samples, 0.50%)</title><rect x="99.4247%" y="437" width="0.5034%" height="15" fill="rgb(227,119,45)" fg:x="2765" fg:w="14"/><text x="99.6747%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (13 samples, 0.47%)</title><rect x="99.4606%" y="421" width="0.4675%" height="15" fill="rgb(205,109,36)" fg:x="2766" fg:w="13"/><text x="99.7106%" y="431.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (2 samples, 0.07%)</title><rect x="99.8562%" y="405" width="0.0719%" height="15" fill="rgb(205,6,39)" fg:x="2777" fg:w="2"/><text x="100.1062%" y="415.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (2 samples, 0.07%)</title><rect x="99.8562%" y="389" width="0.0719%" height="15" fill="rgb(221,32,16)" fg:x="2777" fg:w="2"/><text x="100.1062%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="99.9281%" y="405" width="0.0360%" height="15" fill="rgb(228,144,50)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="99.9281%" y="389" width="0.0360%" height="15" fill="rgb(229,201,53)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="99.9281%" y="373" width="0.0360%" height="15" fill="rgb(249,153,27)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="383.50"></text></g><g><title>&lt;ahc30_a::grid::Coordinate as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="99.9281%" y="357" width="0.0360%" height="15" fill="rgb(227,106,25)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="99.9281%" y="341" width="0.0360%" height="15" fill="rgb(230,65,29)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="99.9281%" y="325" width="0.0360%" height="15" fill="rgb(221,57,46)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="99.9281%" y="309" width="0.0360%" height="15" fill="rgb(229,161,17)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="99.9281%" y="293" width="0.0360%" height="15" fill="rgb(222,213,11)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="99.9281%" y="277" width="0.0360%" height="15" fill="rgb(235,35,13)" fg:x="2779" fg:w="1"/><text x="100.1781%" y="287.50"></text></g><g><title>all (2,781 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(233,158,34)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="815.50"></text></g><g><title>ahc30_a (2,781 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(215,151,48)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="799.50">ahc30_a</text></g><g><title>_start (2,781 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(229,84,14)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="783.50">_start</text></g><g><title>__libc_start_main (2,781 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(229,68,14)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="767.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,781 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(243,106,26)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="751.50">[libc.so.6]</text></g><g><title>main (2,781 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(206,45,38)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="735.50">main</text></g><g><title>std::rt::lang_start_internal (2,781 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(226,6,15)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="719.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,781 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(232,22,54)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,781 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(229,222,32)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,781 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(228,62,29)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="671.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,781 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(251,103,34)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="655.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,781 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(233,12,30)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,781 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(238,52,0)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,781 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(223,98,5)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="607.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,781 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(228,75,37)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,781 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(205,115,49)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="575.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,781 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(250,154,43)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="559.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,781 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(226,43,29)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="543.50">core::ops::function::FnOnce::call_once</text></g><g><title>ahc30_a::main (2,781 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(249,228,39)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="527.50">ahc30_a::main</text></g><g><title>ahc30_a::solve (2,781 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(216,79,43)" fg:x="0" fg:w="2781"/><text x="0.2500%" y="511.50">ahc30_a::solve</text></g><g><title>ahc30_a::Solver::solve (2,780 samples, 99.96%)</title><rect x="0.0360%" y="485" width="99.9640%" height="15" fill="rgb(228,95,12)" fg:x="1" fg:w="2780"/><text x="0.2860%" y="495.50">ahc30_a::Solver::solve</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2 samples, 0.07%)</title><rect x="99.9281%" y="469" width="0.0719%" height="15" fill="rgb(249,221,15)" fg:x="2779" fg:w="2"/><text x="100.1781%" y="479.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2 samples, 0.07%)</title><rect x="99.9281%" y="453" width="0.0719%" height="15" fill="rgb(233,34,13)" fg:x="2779" fg:w="2"/><text x="100.1781%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.07%)</title><rect x="99.9281%" y="437" width="0.0719%" height="15" fill="rgb(214,103,39)" fg:x="2779" fg:w="2"/><text x="100.1781%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.07%)</title><rect x="99.9281%" y="421" width="0.0719%" height="15" fill="rgb(251,126,39)" fg:x="2779" fg:w="2"/><text x="100.1781%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.04%)</title><rect x="99.9640%" y="405" width="0.0360%" height="15" fill="rgb(214,216,36)" fg:x="2780" fg:w="1"/><text x="100.2140%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="99.9640%" y="389" width="0.0360%" height="15" fill="rgb(220,221,8)" fg:x="2780" fg:w="1"/><text x="100.2140%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="99.9640%" y="373" width="0.0360%" height="15" fill="rgb(240,216,3)" fg:x="2780" fg:w="1"/><text x="100.2140%" y="383.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="99.9640%" y="357" width="0.0360%" height="15" fill="rgb(232,218,17)" fg:x="2780" fg:w="1"/><text x="100.2140%" y="367.50"></text></g></svg></svg>