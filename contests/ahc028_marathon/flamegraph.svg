<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="741.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="741.00"> </text><svg id="frames" x="10" width="1180" total_samples="1551"><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.19%)</title><rect x="0.7737%" y="389" width="0.1934%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="3"/><text x="1.0237%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.06%)</title><rect x="0.9671%" y="389" width="0.0645%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="1"/><text x="1.2171%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.06%)</title><rect x="0.9671%" y="373" width="0.0645%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="1"/><text x="1.2171%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.06%)</title><rect x="0.9671%" y="357" width="0.0645%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="1"/><text x="1.2171%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.29%)</title><rect x="1.0316%" y="389" width="1.2895%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="20"/><text x="1.2816%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.29%)</title><rect x="1.0316%" y="373" width="1.2895%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="20"/><text x="1.2816%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (19 samples, 1.23%)</title><rect x="1.0961%" y="357" width="1.2250%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="19"/><text x="1.3461%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.19%)</title><rect x="2.3211%" y="293" width="0.1934%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="3"/><text x="2.5711%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.19%)</title><rect x="2.3211%" y="277" width="0.1934%" height="15" fill="rgb(218,30,26)" fg:x="36" fg:w="3"/><text x="2.5711%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.19%)</title><rect x="2.3211%" y="261" width="0.1934%" height="15" fill="rgb(220,122,19)" fg:x="36" fg:w="3"/><text x="2.5711%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.19%)</title><rect x="2.3211%" y="245" width="0.1934%" height="15" fill="rgb(250,228,42)" fg:x="36" fg:w="3"/><text x="2.5711%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.06%)</title><rect x="2.4500%" y="229" width="0.0645%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="1"/><text x="2.7000%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.19%)</title><rect x="2.5145%" y="245" width="0.1934%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="3"/><text x="2.7645%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.19%)</title><rect x="2.5145%" y="229" width="0.1934%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="3"/><text x="2.7645%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.19%)</title><rect x="2.5145%" y="213" width="0.1934%" height="15" fill="rgb(217,207,13)" fg:x="39" fg:w="3"/><text x="2.7645%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.06%)</title><rect x="2.6435%" y="197" width="0.0645%" height="15" fill="rgb(231,73,38)" fg:x="41" fg:w="1"/><text x="2.8935%" y="207.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.45%)</title><rect x="2.3211%" y="325" width="0.4513%" height="15" fill="rgb(225,20,46)" fg:x="36" fg:w="7"/><text x="2.5711%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.45%)</title><rect x="2.3211%" y="309" width="0.4513%" height="15" fill="rgb(210,31,41)" fg:x="36" fg:w="7"/><text x="2.5711%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.26%)</title><rect x="2.5145%" y="293" width="0.2579%" height="15" fill="rgb(221,200,47)" fg:x="39" fg:w="4"/><text x="2.7645%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for char&gt;::hash (4 samples, 0.26%)</title><rect x="2.5145%" y="277" width="0.2579%" height="15" fill="rgb(226,26,5)" fg:x="39" fg:w="4"/><text x="2.7645%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u32 (4 samples, 0.26%)</title><rect x="2.5145%" y="261" width="0.2579%" height="15" fill="rgb(249,33,26)" fg:x="39" fg:w="4"/><text x="2.7645%" y="271.50"></text></g><g><title>core::num::&lt;impl u32&gt;::to_ne_bytes (1 samples, 0.06%)</title><rect x="2.7079%" y="245" width="0.0645%" height="15" fill="rgb(235,183,28)" fg:x="42" fg:w="1"/><text x="2.9579%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="2.7724%" y="277" width="0.0645%" height="15" fill="rgb(221,5,38)" fg:x="43" fg:w="1"/><text x="3.0224%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.06%)</title><rect x="2.7724%" y="261" width="0.0645%" height="15" fill="rgb(247,18,42)" fg:x="43" fg:w="1"/><text x="3.0224%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.06%)</title><rect x="2.8369%" y="277" width="0.0645%" height="15" fill="rgb(241,131,45)" fg:x="44" fg:w="1"/><text x="3.0869%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.06%)</title><rect x="2.8369%" y="261" width="0.0645%" height="15" fill="rgb(249,31,29)" fg:x="44" fg:w="1"/><text x="3.0869%" y="271.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.06%)</title><rect x="2.8369%" y="245" width="0.0645%" height="15" fill="rgb(225,111,53)" fg:x="44" fg:w="1"/><text x="3.0869%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.06%)</title><rect x="2.8369%" y="229" width="0.0645%" height="15" fill="rgb(238,160,17)" fg:x="44" fg:w="1"/><text x="3.0869%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.19%)</title><rect x="2.7724%" y="325" width="0.1934%" height="15" fill="rgb(214,148,48)" fg:x="43" fg:w="3"/><text x="3.0224%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.19%)</title><rect x="2.7724%" y="309" width="0.1934%" height="15" fill="rgb(232,36,49)" fg:x="43" fg:w="3"/><text x="3.0224%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.19%)</title><rect x="2.7724%" y="293" width="0.1934%" height="15" fill="rgb(209,103,24)" fg:x="43" fg:w="3"/><text x="3.0224%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.06%)</title><rect x="2.9014%" y="277" width="0.0645%" height="15" fill="rgb(229,88,8)" fg:x="45" fg:w="1"/><text x="3.1514%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (11 samples, 0.71%)</title><rect x="2.3211%" y="389" width="0.7092%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="11"/><text x="2.5711%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (11 samples, 0.71%)</title><rect x="2.3211%" y="373" width="0.7092%" height="15" fill="rgb(254,191,54)" fg:x="36" fg:w="11"/><text x="2.5711%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (11 samples, 0.71%)</title><rect x="2.3211%" y="357" width="0.7092%" height="15" fill="rgb(241,83,37)" fg:x="36" fg:w="11"/><text x="2.5711%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11 samples, 0.71%)</title><rect x="2.3211%" y="341" width="0.7092%" height="15" fill="rgb(233,36,39)" fg:x="36" fg:w="11"/><text x="2.5711%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (1 samples, 0.06%)</title><rect x="2.9658%" y="325" width="0.0645%" height="15" fill="rgb(226,3,54)" fg:x="46" fg:w="1"/><text x="3.2158%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.06%)</title><rect x="2.9658%" y="309" width="0.0645%" height="15" fill="rgb(245,192,40)" fg:x="46" fg:w="1"/><text x="3.2158%" y="319.50"></text></g><g><title>ahc028_a::Pos::dist (1 samples, 0.06%)</title><rect x="3.0303%" y="389" width="0.0645%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="1"/><text x="3.2803%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="3.0948%" y="277" width="0.0645%" height="15" fill="rgb(232,182,51)" fg:x="48" fg:w="1"/><text x="3.3448%" y="287.50"></text></g><g><title>alloc::vec::from_elem (3 samples, 0.19%)</title><rect x="3.0948%" y="389" width="0.1934%" height="15" fill="rgb(231,60,39)" fg:x="48" fg:w="3"/><text x="3.3448%" y="399.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.19%)</title><rect x="3.0948%" y="373" width="0.1934%" height="15" fill="rgb(208,69,12)" fg:x="48" fg:w="3"/><text x="3.3448%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (3 samples, 0.19%)</title><rect x="3.0948%" y="357" width="0.1934%" height="15" fill="rgb(235,93,37)" fg:x="48" fg:w="3"/><text x="3.3448%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.19%)</title><rect x="3.0948%" y="341" width="0.1934%" height="15" fill="rgb(213,116,39)" fg:x="48" fg:w="3"/><text x="3.3448%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (3 samples, 0.19%)</title><rect x="3.0948%" y="325" width="0.1934%" height="15" fill="rgb(222,207,29)" fg:x="48" fg:w="3"/><text x="3.3448%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.19%)</title><rect x="3.0948%" y="309" width="0.1934%" height="15" fill="rgb(206,96,30)" fg:x="48" fg:w="3"/><text x="3.3448%" y="319.50"></text></g><g><title>alloc::alloc::alloc_zeroed (3 samples, 0.19%)</title><rect x="3.0948%" y="293" width="0.1934%" height="15" fill="rgb(218,138,4)" fg:x="48" fg:w="3"/><text x="3.3448%" y="303.50"></text></g><g><title>__libc_calloc (2 samples, 0.13%)</title><rect x="3.1593%" y="277" width="0.1289%" height="15" fill="rgb(250,191,14)" fg:x="49" fg:w="2"/><text x="3.4093%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.13%)</title><rect x="3.1593%" y="261" width="0.1289%" height="15" fill="rgb(239,60,40)" fg:x="49" fg:w="2"/><text x="3.4093%" y="271.50"></text></g><g><title>ahc028_a::Input::read_input (52 samples, 3.35%)</title><rect x="0.0000%" y="405" width="3.3527%" height="15" fill="rgb(206,27,48)" fg:x="0" fg:w="52"/><text x="0.2500%" y="415.50">ahc..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt; (1 samples, 0.06%)</title><rect x="3.2882%" y="389" width="0.0645%" height="15" fill="rgb(225,35,8)" fg:x="51" fg:w="1"/><text x="3.5382%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (1 samples, 0.06%)</title><rect x="3.2882%" y="373" width="0.0645%" height="15" fill="rgb(250,213,24)" fg:x="51" fg:w="1"/><text x="3.5382%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="3.2882%" y="357" width="0.0645%" height="15" fill="rgb(247,123,22)" fg:x="51" fg:w="1"/><text x="3.5382%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="3.4172%" y="357" width="0.0645%" height="15" fill="rgb(231,138,38)" fg:x="53" fg:w="1"/><text x="3.6672%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="3.4172%" y="341" width="0.0645%" height="15" fill="rgb(231,145,46)" fg:x="53" fg:w="1"/><text x="3.6672%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="3.4172%" y="325" width="0.0645%" height="15" fill="rgb(251,118,11)" fg:x="53" fg:w="1"/><text x="3.6672%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="3.4172%" y="309" width="0.0645%" height="15" fill="rgb(217,147,25)" fg:x="53" fg:w="1"/><text x="3.6672%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.06%)</title><rect x="3.4172%" y="293" width="0.0645%" height="15" fill="rgb(247,81,37)" fg:x="53" fg:w="1"/><text x="3.6672%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.06%)</title><rect x="3.4172%" y="277" width="0.0645%" height="15" fill="rgb(209,12,38)" fg:x="53" fg:w="1"/><text x="3.6672%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="3.4172%" y="261" width="0.0645%" height="15" fill="rgb(227,1,9)" fg:x="53" fg:w="1"/><text x="3.6672%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.19%)</title><rect x="3.4816%" y="357" width="0.1934%" height="15" fill="rgb(248,47,43)" fg:x="54" fg:w="3"/><text x="3.7316%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.19%)</title><rect x="3.4816%" y="341" width="0.1934%" height="15" fill="rgb(221,10,30)" fg:x="54" fg:w="3"/><text x="3.7316%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.19%)</title><rect x="3.4816%" y="325" width="0.1934%" height="15" fill="rgb(210,229,1)" fg:x="54" fg:w="3"/><text x="3.7316%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.19%)</title><rect x="3.4816%" y="309" width="0.1934%" height="15" fill="rgb(222,148,37)" fg:x="54" fg:w="3"/><text x="3.7316%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.19%)</title><rect x="3.4816%" y="293" width="0.1934%" height="15" fill="rgb(234,67,33)" fg:x="54" fg:w="3"/><text x="3.7316%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.19%)</title><rect x="3.4816%" y="277" width="0.1934%" height="15" fill="rgb(247,98,35)" fg:x="54" fg:w="3"/><text x="3.7316%" y="287.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.19%)</title><rect x="3.4816%" y="261" width="0.1934%" height="15" fill="rgb(247,138,52)" fg:x="54" fg:w="3"/><text x="3.7316%" y="271.50"></text></g><g><title>realloc (3 samples, 0.19%)</title><rect x="3.4816%" y="245" width="0.1934%" height="15" fill="rgb(213,79,30)" fg:x="54" fg:w="3"/><text x="3.7316%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.19%)</title><rect x="3.4816%" y="229" width="0.1934%" height="15" fill="rgb(246,177,23)" fg:x="54" fg:w="3"/><text x="3.7316%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.19%)</title><rect x="3.4816%" y="213" width="0.1934%" height="15" fill="rgb(230,62,27)" fg:x="54" fg:w="3"/><text x="3.7316%" y="223.50"></text></g><g><title>ahc028_a::State::print (6 samples, 0.39%)</title><rect x="3.3527%" y="389" width="0.3868%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="6"/><text x="3.6027%" y="399.50"></text></g><g><title>ahc028_a::State::solve (6 samples, 0.39%)</title><rect x="3.3527%" y="373" width="0.3868%" height="15" fill="rgb(244,35,45)" fg:x="52" fg:w="6"/><text x="3.6027%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(ahc028_a::Pos,f64,alloc::vec::Vec&lt;ahc028_a::Pos&gt;)&gt; (1 samples, 0.06%)</title><rect x="3.6750%" y="357" width="0.0645%" height="15" fill="rgb(251,115,12)" fg:x="57" fg:w="1"/><text x="3.9250%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ahc028_a::Pos&gt;&gt; (1 samples, 0.06%)</title><rect x="3.6750%" y="341" width="0.0645%" height="15" fill="rgb(240,54,50)" fg:x="57" fg:w="1"/><text x="3.9250%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;ahc028_a::Pos&gt;&gt; (1 samples, 0.06%)</title><rect x="3.6750%" y="325" width="0.0645%" height="15" fill="rgb(233,84,52)" fg:x="57" fg:w="1"/><text x="3.9250%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="3.6750%" y="309" width="0.0645%" height="15" fill="rgb(207,117,47)" fg:x="57" fg:w="1"/><text x="3.9250%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="3.6750%" y="293" width="0.0645%" height="15" fill="rgb(249,43,39)" fg:x="57" fg:w="1"/><text x="3.9250%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="3.6750%" y="277" width="0.0645%" height="15" fill="rgb(209,38,44)" fg:x="57" fg:w="1"/><text x="3.9250%" y="287.50"></text></g><g><title>free (1 samples, 0.06%)</title><rect x="3.6750%" y="261" width="0.0645%" height="15" fill="rgb(236,212,23)" fg:x="57" fg:w="1"/><text x="3.9250%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="3.6750%" y="245" width="0.0645%" height="15" fill="rgb(242,79,21)" fg:x="57" fg:w="1"/><text x="3.9250%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="5.0290%" y="197" width="0.0645%" height="15" fill="rgb(211,96,35)" fg:x="78" fg:w="1"/><text x="5.2790%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.13%)</title><rect x="5.0290%" y="293" width="0.1289%" height="15" fill="rgb(253,215,40)" fg:x="78" fg:w="2"/><text x="5.2790%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.13%)</title><rect x="5.0290%" y="277" width="0.1289%" height="15" fill="rgb(211,81,21)" fg:x="78" fg:w="2"/><text x="5.2790%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.13%)</title><rect x="5.0290%" y="261" width="0.1289%" height="15" fill="rgb(208,190,38)" fg:x="78" fg:w="2"/><text x="5.2790%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.13%)</title><rect x="5.0290%" y="245" width="0.1289%" height="15" fill="rgb(235,213,38)" fg:x="78" fg:w="2"/><text x="5.2790%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.13%)</title><rect x="5.0290%" y="229" width="0.1289%" height="15" fill="rgb(237,122,38)" fg:x="78" fg:w="2"/><text x="5.2790%" y="239.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.13%)</title><rect x="5.0290%" y="213" width="0.1289%" height="15" fill="rgb(244,218,35)" fg:x="78" fg:w="2"/><text x="5.2790%" y="223.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="5.0935%" y="197" width="0.0645%" height="15" fill="rgb(240,68,47)" fg:x="79" fg:w="1"/><text x="5.3435%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="5.0935%" y="181" width="0.0645%" height="15" fill="rgb(210,16,53)" fg:x="79" fg:w="1"/><text x="5.3435%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.39%)</title><rect x="4.9645%" y="357" width="0.3868%" height="15" fill="rgb(235,124,12)" fg:x="77" fg:w="6"/><text x="5.2145%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.39%)</title><rect x="4.9645%" y="341" width="0.3868%" height="15" fill="rgb(224,169,11)" fg:x="77" fg:w="6"/><text x="5.2145%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.39%)</title><rect x="4.9645%" y="325" width="0.3868%" height="15" fill="rgb(250,166,2)" fg:x="77" fg:w="6"/><text x="5.2145%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.39%)</title><rect x="4.9645%" y="309" width="0.3868%" height="15" fill="rgb(242,216,29)" fg:x="77" fg:w="6"/><text x="5.2145%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.19%)</title><rect x="5.1580%" y="293" width="0.1934%" height="15" fill="rgb(230,116,27)" fg:x="80" fg:w="3"/><text x="5.4080%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.19%)</title><rect x="5.1580%" y="277" width="0.1934%" height="15" fill="rgb(228,99,48)" fg:x="80" fg:w="3"/><text x="5.4080%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.19%)</title><rect x="5.1580%" y="261" width="0.1934%" height="15" fill="rgb(253,11,6)" fg:x="80" fg:w="3"/><text x="5.4080%" y="271.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.58%)</title><rect x="5.3514%" y="357" width="0.5803%" height="15" fill="rgb(247,143,39)" fg:x="83" fg:w="9"/><text x="5.6014%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.58%)</title><rect x="5.3514%" y="341" width="0.5803%" height="15" fill="rgb(236,97,10)" fg:x="83" fg:w="9"/><text x="5.6014%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.58%)</title><rect x="5.3514%" y="325" width="0.5803%" height="15" fill="rgb(233,208,19)" fg:x="83" fg:w="9"/><text x="5.6014%" y="335.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.58%)</title><rect x="5.3514%" y="309" width="0.5803%" height="15" fill="rgb(216,164,2)" fg:x="83" fg:w="9"/><text x="5.6014%" y="319.50"></text></g><g><title>malloc (9 samples, 0.58%)</title><rect x="5.3514%" y="293" width="0.5803%" height="15" fill="rgb(220,129,5)" fg:x="83" fg:w="9"/><text x="5.6014%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 1.10%)</title><rect x="5.9961%" y="293" width="1.0961%" height="15" fill="rgb(242,17,10)" fg:x="93" fg:w="17"/><text x="6.2461%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 1.10%)</title><rect x="5.9961%" y="277" width="1.0961%" height="15" fill="rgb(242,107,0)" fg:x="93" fg:w="17"/><text x="6.2461%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 1.10%)</title><rect x="5.9961%" y="261" width="1.0961%" height="15" fill="rgb(251,28,31)" fg:x="93" fg:w="17"/><text x="6.2461%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 1.03%)</title><rect x="6.0606%" y="245" width="1.0316%" height="15" fill="rgb(233,223,10)" fg:x="94" fg:w="16"/><text x="6.3106%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 1.03%)</title><rect x="6.0606%" y="229" width="1.0316%" height="15" fill="rgb(215,21,27)" fg:x="94" fg:w="16"/><text x="6.3106%" y="239.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 1.03%)</title><rect x="6.0606%" y="213" width="1.0316%" height="15" fill="rgb(232,23,21)" fg:x="94" fg:w="16"/><text x="6.3106%" y="223.50"></text></g><g><title>malloc (16 samples, 1.03%)</title><rect x="6.0606%" y="197" width="1.0316%" height="15" fill="rgb(244,5,23)" fg:x="94" fg:w="16"/><text x="6.3106%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="7.0277%" y="181" width="0.0645%" height="15" fill="rgb(226,81,46)" fg:x="109" fg:w="1"/><text x="7.2777%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (36 samples, 2.32%)</title><rect x="5.9317%" y="357" width="2.3211%" height="15" fill="rgb(247,70,30)" fg:x="92" fg:w="36"/><text x="6.1817%" y="367.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (36 samples, 2.32%)</title><rect x="5.9317%" y="341" width="2.3211%" height="15" fill="rgb(212,68,19)" fg:x="92" fg:w="36"/><text x="6.1817%" y="351.50">a..</text></g><g><title>alloc::slice::hack::to_vec (36 samples, 2.32%)</title><rect x="5.9317%" y="325" width="2.3211%" height="15" fill="rgb(240,187,13)" fg:x="92" fg:w="36"/><text x="6.1817%" y="335.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (36 samples, 2.32%)</title><rect x="5.9317%" y="309" width="2.3211%" height="15" fill="rgb(223,113,26)" fg:x="92" fg:w="36"/><text x="6.1817%" y="319.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (18 samples, 1.16%)</title><rect x="7.0922%" y="293" width="1.1605%" height="15" fill="rgb(206,192,2)" fg:x="110" fg:w="18"/><text x="7.3422%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 1.16%)</title><rect x="7.0922%" y="277" width="1.1605%" height="15" fill="rgb(241,108,4)" fg:x="110" fg:w="18"/><text x="7.3422%" y="287.50"></text></g><g><title>[libc.so.6] (18 samples, 1.16%)</title><rect x="7.0922%" y="261" width="1.1605%" height="15" fill="rgb(247,173,49)" fg:x="110" fg:w="18"/><text x="7.3422%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.06%)</title><rect x="8.3172%" y="325" width="0.0645%" height="15" fill="rgb(224,114,35)" fg:x="129" fg:w="1"/><text x="8.5672%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.06%)</title><rect x="8.3172%" y="309" width="0.0645%" height="15" fill="rgb(245,159,27)" fg:x="129" fg:w="1"/><text x="8.5672%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (17 samples, 1.10%)</title><rect x="8.3817%" y="325" width="1.0961%" height="15" fill="rgb(245,172,44)" fg:x="130" fg:w="17"/><text x="8.6317%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 1.10%)</title><rect x="8.3817%" y="309" width="1.0961%" height="15" fill="rgb(236,23,11)" fg:x="130" fg:w="17"/><text x="8.6317%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 1.10%)</title><rect x="8.3817%" y="293" width="1.0961%" height="15" fill="rgb(205,117,38)" fg:x="130" fg:w="17"/><text x="8.6317%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 1.03%)</title><rect x="8.4462%" y="277" width="1.0316%" height="15" fill="rgb(237,72,25)" fg:x="131" fg:w="16"/><text x="8.6962%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 1.03%)</title><rect x="8.4462%" y="261" width="1.0316%" height="15" fill="rgb(244,70,9)" fg:x="131" fg:w="16"/><text x="8.6962%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.97%)</title><rect x="8.5106%" y="245" width="0.9671%" height="15" fill="rgb(217,125,39)" fg:x="132" fg:w="15"/><text x="8.7606%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.97%)</title><rect x="8.5106%" y="229" width="0.9671%" height="15" fill="rgb(235,36,10)" fg:x="132" fg:w="15"/><text x="8.7606%" y="239.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.97%)</title><rect x="8.5106%" y="213" width="0.9671%" height="15" fill="rgb(251,123,47)" fg:x="132" fg:w="15"/><text x="8.7606%" y="223.50"></text></g><g><title>realloc (15 samples, 0.97%)</title><rect x="8.5106%" y="197" width="0.9671%" height="15" fill="rgb(221,13,13)" fg:x="132" fg:w="15"/><text x="8.7606%" y="207.50"></text></g><g><title>[libc.so.6] (10 samples, 0.64%)</title><rect x="8.8330%" y="181" width="0.6447%" height="15" fill="rgb(238,131,9)" fg:x="137" fg:w="10"/><text x="9.0830%" y="191.50"></text></g><g><title>[libc.so.6] (9 samples, 0.58%)</title><rect x="8.8975%" y="165" width="0.5803%" height="15" fill="rgb(211,50,8)" fg:x="138" fg:w="9"/><text x="9.1475%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="9.4133%" y="149" width="0.0645%" height="15" fill="rgb(245,182,24)" fg:x="146" fg:w="1"/><text x="9.6633%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (30 samples, 1.93%)</title><rect x="8.2527%" y="357" width="1.9342%" height="15" fill="rgb(242,14,37)" fg:x="128" fg:w="30"/><text x="8.5027%" y="367.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (30 samples, 1.93%)</title><rect x="8.2527%" y="341" width="1.9342%" height="15" fill="rgb(246,228,12)" fg:x="128" fg:w="30"/><text x="8.5027%" y="351.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.71%)</title><rect x="9.4778%" y="325" width="0.7092%" height="15" fill="rgb(213,55,15)" fg:x="147" fg:w="11"/><text x="9.7278%" y="335.50"></text></g><g><title>[libc.so.6] (11 samples, 0.71%)</title><rect x="9.4778%" y="309" width="0.7092%" height="15" fill="rgb(209,9,3)" fg:x="147" fg:w="11"/><text x="9.7278%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (19 samples, 1.23%)</title><rect x="10.1870%" y="357" width="1.2250%" height="15" fill="rgb(230,59,30)" fg:x="158" fg:w="19"/><text x="10.4370%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (19 samples, 1.23%)</title><rect x="10.1870%" y="341" width="1.2250%" height="15" fill="rgb(209,121,21)" fg:x="158" fg:w="19"/><text x="10.4370%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.23%)</title><rect x="10.1870%" y="325" width="1.2250%" height="15" fill="rgb(220,109,13)" fg:x="158" fg:w="19"/><text x="10.4370%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 1.23%)</title><rect x="10.1870%" y="309" width="1.2250%" height="15" fill="rgb(232,18,1)" fg:x="158" fg:w="19"/><text x="10.4370%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 1.23%)</title><rect x="10.1870%" y="293" width="1.2250%" height="15" fill="rgb(215,41,42)" fg:x="158" fg:w="19"/><text x="10.4370%" y="303.50"></text></g><g><title>free (19 samples, 1.23%)</title><rect x="10.1870%" y="277" width="1.2250%" height="15" fill="rgb(224,123,36)" fg:x="158" fg:w="19"/><text x="10.4370%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.13%)</title><rect x="11.2830%" y="261" width="0.1289%" height="15" fill="rgb(240,125,3)" fg:x="175" fg:w="2"/><text x="11.5330%" y="271.50"></text></g><g><title>rand_chacha::guts::diagonalize (3 samples, 0.19%)</title><rect x="12.1857%" y="165" width="0.1934%" height="15" fill="rgb(205,98,50)" fg:x="189" fg:w="3"/><text x="12.4357%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.19%)</title><rect x="12.1857%" y="149" width="0.1934%" height="15" fill="rgb(205,185,37)" fg:x="189" fg:w="3"/><text x="12.4357%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.19%)</title><rect x="12.1857%" y="133" width="0.1934%" height="15" fill="rgb(238,207,15)" fg:x="189" fg:w="3"/><text x="12.4357%" y="143.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Words4&gt;::shuffle2301 (3 samples, 0.19%)</title><rect x="12.1857%" y="117" width="0.1934%" height="15" fill="rgb(213,199,42)" fg:x="189" fg:w="3"/><text x="12.4357%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Swap64&gt;::swap64 (3 samples, 0.19%)</title><rect x="12.1857%" y="101" width="0.1934%" height="15" fill="rgb(235,201,11)" fg:x="189" fg:w="3"/><text x="12.4357%" y="111.50"></text></g><g><title>ppv_lite86::generic::omap (3 samples, 0.19%)</title><rect x="12.1857%" y="85" width="0.1934%" height="15" fill="rgb(207,46,11)" fg:x="189" fg:w="3"/><text x="12.4357%" y="95.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Swap64&gt;::swap64::{{closure}} (3 samples, 0.19%)</title><rect x="12.1857%" y="69" width="0.1934%" height="15" fill="rgb(241,35,35)" fg:x="189" fg:w="3"/><text x="12.4357%" y="79.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.32%)</title><rect x="12.3791%" y="149" width="0.3224%" height="15" fill="rgb(243,32,47)" fg:x="192" fg:w="5"/><text x="12.6291%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::AddAssign&gt;::add_assign (5 samples, 0.32%)</title><rect x="12.3791%" y="133" width="0.3224%" height="15" fill="rgb(247,202,23)" fg:x="192" fg:w="5"/><text x="12.6291%" y="143.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::Add&gt;::add (5 samples, 0.32%)</title><rect x="12.3791%" y="117" width="0.3224%" height="15" fill="rgb(219,102,11)" fg:x="192" fg:w="5"/><text x="12.6291%" y="127.50"></text></g><g><title>ppv_lite86::generic::dmap2 (5 samples, 0.32%)</title><rect x="12.3791%" y="101" width="0.3224%" height="15" fill="rgb(243,110,44)" fg:x="192" fg:w="5"/><text x="12.6291%" y="111.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::Add&gt;::add::{{closure}} (5 samples, 0.32%)</title><rect x="12.3791%" y="85" width="0.3224%" height="15" fill="rgb(222,74,54)" fg:x="192" fg:w="5"/><text x="12.6291%" y="95.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (5 samples, 0.32%)</title><rect x="12.3791%" y="69" width="0.3224%" height="15" fill="rgb(216,99,12)" fg:x="192" fg:w="5"/><text x="12.6291%" y="79.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as core::ops::bit::BitXor&gt;::bitxor (60 samples, 3.87%)</title><rect x="12.7015%" y="149" width="3.8685%" height="15" fill="rgb(226,22,26)" fg:x="197" fg:w="60"/><text x="12.9515%" y="159.50">&lt;ppv..</text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor (60 samples, 3.87%)</title><rect x="12.7015%" y="133" width="3.8685%" height="15" fill="rgb(217,163,10)" fg:x="197" fg:w="60"/><text x="12.9515%" y="143.50">&lt;ppv..</text></g><g><title>ppv_lite86::generic::omap2 (60 samples, 3.87%)</title><rect x="12.7015%" y="117" width="3.8685%" height="15" fill="rgb(213,25,53)" fg:x="197" fg:w="60"/><text x="12.9515%" y="127.50">ppv_..</text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor::{{closure}} (60 samples, 3.87%)</title><rect x="12.7015%" y="101" width="3.8685%" height="15" fill="rgb(252,105,26)" fg:x="197" fg:w="60"/><text x="12.9515%" y="111.50">&lt;ppv..</text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (1 samples, 0.06%)</title><rect x="16.5700%" y="149" width="0.0645%" height="15" fill="rgb(220,39,43)" fg:x="257" fg:w="1"/><text x="16.8200%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (1 samples, 0.06%)</title><rect x="16.5700%" y="133" width="0.0645%" height="15" fill="rgb(229,68,48)" fg:x="257" fg:w="1"/><text x="16.8200%" y="143.50"></text></g><g><title>ppv_lite86::generic::dmap (1 samples, 0.06%)</title><rect x="16.5700%" y="117" width="0.0645%" height="15" fill="rgb(252,8,32)" fg:x="257" fg:w="1"/><text x="16.8200%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16::{{closure}} (1 samples, 0.06%)</title><rect x="16.5700%" y="101" width="0.0645%" height="15" fill="rgb(223,20,43)" fg:x="257" fg:w="1"/><text x="16.8200%" y="111.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.06%)</title><rect x="16.5700%" y="85" width="0.0645%" height="15" fill="rgb(229,81,49)" fg:x="257" fg:w="1"/><text x="16.8200%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (1 samples, 0.06%)</title><rect x="16.6344%" y="149" width="0.0645%" height="15" fill="rgb(236,28,36)" fg:x="258" fg:w="1"/><text x="16.8844%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (1 samples, 0.06%)</title><rect x="16.6344%" y="133" width="0.0645%" height="15" fill="rgb(249,185,26)" fg:x="258" fg:w="1"/><text x="16.8844%" y="143.50"></text></g><g><title>ppv_lite86::generic::dmap (1 samples, 0.06%)</title><rect x="16.6344%" y="117" width="0.0645%" height="15" fill="rgb(249,174,33)" fg:x="258" fg:w="1"/><text x="16.8844%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20::{{closure}} (1 samples, 0.06%)</title><rect x="16.6344%" y="101" width="0.0645%" height="15" fill="rgb(233,201,37)" fg:x="258" fg:w="1"/><text x="16.8844%" y="111.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.06%)</title><rect x="16.6344%" y="85" width="0.0645%" height="15" fill="rgb(221,78,26)" fg:x="258" fg:w="1"/><text x="16.8844%" y="95.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.13%)</title><rect x="16.6989%" y="149" width="0.1289%" height="15" fill="rgb(250,127,30)" fg:x="259" fg:w="2"/><text x="16.9489%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.13%)</title><rect x="16.6989%" y="133" width="0.1289%" height="15" fill="rgb(230,49,44)" fg:x="259" fg:w="2"/><text x="16.9489%" y="143.50"></text></g><g><title>ppv_lite86::generic::dmap (2 samples, 0.13%)</title><rect x="16.6989%" y="117" width="0.1289%" height="15" fill="rgb(229,67,23)" fg:x="259" fg:w="2"/><text x="16.9489%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24::{{closure}} (2 samples, 0.13%)</title><rect x="16.6989%" y="101" width="0.1289%" height="15" fill="rgb(249,83,47)" fg:x="259" fg:w="2"/><text x="16.9489%" y="111.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (2 samples, 0.13%)</title><rect x="16.6989%" y="85" width="0.1289%" height="15" fill="rgb(215,43,3)" fg:x="259" fg:w="2"/><text x="16.9489%" y="95.50"></text></g><g><title>rand_chacha::guts::round (86 samples, 5.54%)</title><rect x="12.3791%" y="165" width="5.5448%" height="15" fill="rgb(238,154,13)" fg:x="192" fg:w="86"/><text x="12.6291%" y="175.50">rand_ch..</text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (17 samples, 1.10%)</title><rect x="16.8279%" y="149" width="1.0961%" height="15" fill="rgb(219,56,2)" fg:x="261" fg:w="17"/><text x="17.0779%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (6 samples, 0.39%)</title><rect x="17.5371%" y="133" width="0.3868%" height="15" fill="rgb(233,0,4)" fg:x="272" fg:w="6"/><text x="17.7871%" y="143.50"></text></g><g><title>ppv_lite86::generic::dmap (6 samples, 0.39%)</title><rect x="17.5371%" y="117" width="0.3868%" height="15" fill="rgb(235,30,7)" fg:x="272" fg:w="6"/><text x="17.7871%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25::{{closure}} (6 samples, 0.39%)</title><rect x="17.5371%" y="101" width="0.3868%" height="15" fill="rgb(250,79,13)" fg:x="272" fg:w="6"/><text x="17.7871%" y="111.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (6 samples, 0.39%)</title><rect x="17.5371%" y="85" width="0.3868%" height="15" fill="rgb(211,146,34)" fg:x="272" fg:w="6"/><text x="17.7871%" y="95.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Core as rand_core::block::BlockRngCore&gt;::generate (91 samples, 5.87%)</title><rect x="12.1212%" y="245" width="5.8672%" height="15" fill="rgb(228,22,38)" fg:x="188" fg:w="91"/><text x="12.3712%" y="255.50">&lt;rand_c..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (91 samples, 5.87%)</title><rect x="12.1212%" y="229" width="5.8672%" height="15" fill="rgb(235,168,5)" fg:x="188" fg:w="91"/><text x="12.3712%" y="239.50">rand_ch..</text></g><g><title>rand_chacha::guts::refill_wide (91 samples, 5.87%)</title><rect x="12.1212%" y="213" width="5.8672%" height="15" fill="rgb(221,155,16)" fg:x="188" fg:w="91"/><text x="12.3712%" y="223.50">rand_ch..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (91 samples, 5.87%)</title><rect x="12.1212%" y="197" width="5.8672%" height="15" fill="rgb(215,215,53)" fg:x="188" fg:w="91"/><text x="12.3712%" y="207.50">rand_ch..</text></g><g><title>rand_chacha::guts::refill_wide_impl (91 samples, 5.87%)</title><rect x="12.1212%" y="181" width="5.8672%" height="15" fill="rgb(223,4,10)" fg:x="188" fg:w="91"/><text x="12.3712%" y="191.50">rand_ch..</text></g><g><title>rand_chacha::guts::undiagonalize (1 samples, 0.06%)</title><rect x="17.9239%" y="165" width="0.0645%" height="15" fill="rgb(234,103,6)" fg:x="278" fg:w="1"/><text x="18.1739%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (1 samples, 0.06%)</title><rect x="17.9239%" y="149" width="0.0645%" height="15" fill="rgb(227,97,0)" fg:x="278" fg:w="1"/><text x="18.1739%" y="159.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (1 samples, 0.06%)</title><rect x="17.9239%" y="133" width="0.0645%" height="15" fill="rgb(234,150,53)" fg:x="278" fg:w="1"/><text x="18.1739%" y="143.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Words4&gt;::shuffle2301 (1 samples, 0.06%)</title><rect x="17.9239%" y="117" width="0.0645%" height="15" fill="rgb(228,201,54)" fg:x="278" fg:w="1"/><text x="18.1739%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Swap64&gt;::swap64 (1 samples, 0.06%)</title><rect x="17.9239%" y="101" width="0.0645%" height="15" fill="rgb(222,22,37)" fg:x="278" fg:w="1"/><text x="18.1739%" y="111.50"></text></g><g><title>ppv_lite86::generic::omap (1 samples, 0.06%)</title><rect x="17.9239%" y="85" width="0.0645%" height="15" fill="rgb(237,53,32)" fg:x="278" fg:w="1"/><text x="18.1739%" y="95.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Store&lt;ppv_lite86::generic::vec128_storage&gt;&gt;::unpack (1 samples, 0.06%)</title><rect x="17.9239%" y="69" width="0.0645%" height="15" fill="rgb(233,25,53)" fg:x="278" fg:w="1"/><text x="18.1739%" y="79.50"></text></g><g><title>rand::Rng::gen (103 samples, 6.64%)</title><rect x="11.4120%" y="357" width="6.6409%" height="15" fill="rgb(210,40,34)" fg:x="177" fg:w="103"/><text x="11.6620%" y="367.50">rand::Rng..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (103 samples, 6.64%)</title><rect x="11.4120%" y="341" width="6.6409%" height="15" fill="rgb(241,220,44)" fg:x="177" fg:w="103"/><text x="11.6620%" y="351.50">rand::dis..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (103 samples, 6.64%)</title><rect x="11.4120%" y="325" width="6.6409%" height="15" fill="rgb(235,28,35)" fg:x="177" fg:w="103"/><text x="11.6620%" y="335.50">&lt;rand::rn..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (103 samples, 6.64%)</title><rect x="11.4120%" y="309" width="6.6409%" height="15" fill="rgb(210,56,17)" fg:x="177" fg:w="103"/><text x="11.6620%" y="319.50">&lt;rand::rn..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (103 samples, 6.64%)</title><rect x="11.4120%" y="293" width="6.6409%" height="15" fill="rgb(224,130,29)" fg:x="177" fg:w="103"/><text x="11.6620%" y="303.50">&lt;rand_cor..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (92 samples, 5.93%)</title><rect x="12.1212%" y="277" width="5.9317%" height="15" fill="rgb(235,212,8)" fg:x="188" fg:w="92"/><text x="12.3712%" y="287.50">rand_cor..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (92 samples, 5.93%)</title><rect x="12.1212%" y="261" width="5.9317%" height="15" fill="rgb(223,33,50)" fg:x="188" fg:w="92"/><text x="12.3712%" y="271.50">&lt;rand::r..</text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (1 samples, 0.06%)</title><rect x="17.9884%" y="245" width="0.0645%" height="15" fill="rgb(219,149,13)" fg:x="279" fg:w="1"/><text x="18.2384%" y="255.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (1 samples, 0.06%)</title><rect x="17.9884%" y="229" width="0.0645%" height="15" fill="rgb(250,156,29)" fg:x="279" fg:w="1"/><text x="18.2384%" y="239.50"></text></g><g><title>rand_core::SeedableRng::from_rng (1 samples, 0.06%)</title><rect x="17.9884%" y="213" width="0.0645%" height="15" fill="rgb(216,193,19)" fg:x="279" fg:w="1"/><text x="18.2384%" y="223.50"></text></g><g><title>ahc028_a::State::get_neighbor (214 samples, 13.80%)</title><rect x="4.3198%" y="373" width="13.7975%" height="15" fill="rgb(216,135,14)" fg:x="67" fg:w="214"/><text x="4.5698%" y="383.50">ahc028_a::State::get_..</text></g><g><title>rand::rngs::thread::thread_rng (1 samples, 0.06%)</title><rect x="18.0529%" y="357" width="0.0645%" height="15" fill="rgb(241,47,5)" fg:x="280" fg:w="1"/><text x="18.3029%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.06%)</title><rect x="18.0529%" y="341" width="0.0645%" height="15" fill="rgb(233,42,35)" fg:x="280" fg:w="1"/><text x="18.3029%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.06%)</title><rect x="18.0529%" y="325" width="0.0645%" height="15" fill="rgb(231,13,6)" fg:x="280" fg:w="1"/><text x="18.3029%" y="335.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (1 samples, 0.06%)</title><rect x="18.0529%" y="309" width="0.0645%" height="15" fill="rgb(207,181,40)" fg:x="280" fg:w="1"/><text x="18.3029%" y="319.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="18.0529%" y="293" width="0.0645%" height="15" fill="rgb(254,173,49)" fg:x="280" fg:w="1"/><text x="18.3029%" y="303.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (1 samples, 0.06%)</title><rect x="18.0529%" y="277" width="0.0645%" height="15" fill="rgb(221,1,38)" fg:x="280" fg:w="1"/><text x="18.3029%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.06%)</title><rect x="18.0529%" y="261" width="0.0645%" height="15" fill="rgb(206,124,46)" fg:x="280" fg:w="1"/><text x="18.3029%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (99 samples, 6.38%)</title><rect x="76.7892%" y="357" width="6.3830%" height="15" fill="rgb(249,21,11)" fg:x="1191" fg:w="99"/><text x="77.0392%" y="367.50">&lt;alloc::..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (99 samples, 6.38%)</title><rect x="76.7892%" y="341" width="6.3830%" height="15" fill="rgb(222,201,40)" fg:x="1191" fg:w="99"/><text x="77.0392%" y="351.50">core::sl..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (99 samples, 6.38%)</title><rect x="76.7892%" y="325" width="6.3830%" height="15" fill="rgb(235,61,29)" fg:x="1191" fg:w="99"/><text x="77.0392%" y="335.50">&lt;usize a..</text></g><g><title>ahc028_a::State::get_score (1,029 samples, 66.34%)</title><rect x="18.1173%" y="373" width="66.3443%" height="15" fill="rgb(219,207,3)" fg:x="281" fg:w="1029"/><text x="18.3673%" y="383.50">ahc028_a::State::get_score</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 1.29%)</title><rect x="83.1721%" y="357" width="1.2895%" height="15" fill="rgb(222,56,46)" fg:x="1290" fg:w="20"/><text x="83.4221%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.39%)</title><rect x="84.5261%" y="293" width="0.3868%" height="15" fill="rgb(239,76,54)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.39%)</title><rect x="84.5261%" y="277" width="0.3868%" height="15" fill="rgb(231,124,27)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.39%)</title><rect x="84.5261%" y="261" width="0.3868%" height="15" fill="rgb(249,195,6)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.39%)</title><rect x="84.5261%" y="245" width="0.3868%" height="15" fill="rgb(237,174,47)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.39%)</title><rect x="84.5261%" y="229" width="0.3868%" height="15" fill="rgb(206,201,31)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="239.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.39%)</title><rect x="84.5261%" y="213" width="0.3868%" height="15" fill="rgb(231,57,52)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="223.50"></text></g><g><title>malloc (6 samples, 0.39%)</title><rect x="84.5261%" y="197" width="0.3868%" height="15" fill="rgb(248,177,22)" fg:x="1311" fg:w="6"/><text x="84.7761%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.19%)</title><rect x="84.7195%" y="181" width="0.1934%" height="15" fill="rgb(215,211,37)" fg:x="1314" fg:w="3"/><text x="84.9695%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 1.10%)</title><rect x="84.5261%" y="357" width="1.0961%" height="15" fill="rgb(241,128,51)" fg:x="1311" fg:w="17"/><text x="84.7761%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 1.10%)</title><rect x="84.5261%" y="341" width="1.0961%" height="15" fill="rgb(227,165,31)" fg:x="1311" fg:w="17"/><text x="84.7761%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 1.10%)</title><rect x="84.5261%" y="325" width="1.0961%" height="15" fill="rgb(228,167,24)" fg:x="1311" fg:w="17"/><text x="84.7761%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 1.10%)</title><rect x="84.5261%" y="309" width="1.0961%" height="15" fill="rgb(228,143,12)" fg:x="1311" fg:w="17"/><text x="84.7761%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.71%)</title><rect x="84.9130%" y="293" width="0.7092%" height="15" fill="rgb(249,149,8)" fg:x="1317" fg:w="11"/><text x="85.1630%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.71%)</title><rect x="84.9130%" y="277" width="0.7092%" height="15" fill="rgb(243,35,44)" fg:x="1317" fg:w="11"/><text x="85.1630%" y="287.50"></text></g><g><title>[libc.so.6] (11 samples, 0.71%)</title><rect x="84.9130%" y="261" width="0.7092%" height="15" fill="rgb(246,89,9)" fg:x="1317" fg:w="11"/><text x="85.1630%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.06%)</title><rect x="85.6222%" y="341" width="0.0645%" height="15" fill="rgb(233,213,13)" fg:x="1328" fg:w="1"/><text x="85.8722%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.06%)</title><rect x="85.6222%" y="325" width="0.0645%" height="15" fill="rgb(233,141,41)" fg:x="1328" fg:w="1"/><text x="85.8722%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (24 samples, 1.55%)</title><rect x="85.6222%" y="357" width="1.5474%" height="15" fill="rgb(239,167,4)" fg:x="1328" fg:w="24"/><text x="85.8722%" y="367.50"></text></g><g><title>core::intrinsics::copy (23 samples, 1.48%)</title><rect x="85.6867%" y="341" width="1.4829%" height="15" fill="rgb(209,217,16)" fg:x="1329" fg:w="23"/><text x="85.9367%" y="351.50"></text></g><g><title>[libc.so.6] (23 samples, 1.48%)</title><rect x="85.6867%" y="325" width="1.4829%" height="15" fill="rgb(219,88,35)" fg:x="1329" fg:w="23"/><text x="85.9367%" y="335.50"></text></g><g><title>[libc.so.6] (13 samples, 0.84%)</title><rect x="87.1696%" y="325" width="0.8382%" height="15" fill="rgb(220,193,23)" fg:x="1352" fg:w="13"/><text x="87.4196%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (14 samples, 0.90%)</title><rect x="87.1696%" y="357" width="0.9026%" height="15" fill="rgb(230,90,52)" fg:x="1352" fg:w="14"/><text x="87.4196%" y="367.50"></text></g><g><title>core::intrinsics::copy (14 samples, 0.90%)</title><rect x="87.1696%" y="341" width="0.9026%" height="15" fill="rgb(252,106,19)" fg:x="1352" fg:w="14"/><text x="87.4196%" y="351.50"></text></g><g><title>memmove@plt (1 samples, 0.06%)</title><rect x="88.0077%" y="325" width="0.0645%" height="15" fill="rgb(206,74,20)" fg:x="1365" fg:w="1"/><text x="88.2577%" y="335.50"></text></g><g><title>ahc028_a::State::undo (58 samples, 3.74%)</title><rect x="84.4616%" y="373" width="3.7395%" height="15" fill="rgb(230,138,44)" fg:x="1310" fg:w="58"/><text x="84.7116%" y="383.50">ahc0..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.13%)</title><rect x="88.0722%" y="357" width="0.1289%" height="15" fill="rgb(235,182,43)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.13%)</title><rect x="88.0722%" y="341" width="0.1289%" height="15" fill="rgb(242,16,51)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.13%)</title><rect x="88.0722%" y="325" width="0.1289%" height="15" fill="rgb(248,9,4)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.13%)</title><rect x="88.0722%" y="309" width="0.1289%" height="15" fill="rgb(210,31,22)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.13%)</title><rect x="88.0722%" y="293" width="0.1289%" height="15" fill="rgb(239,54,39)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="303.50"></text></g><g><title>free (2 samples, 0.13%)</title><rect x="88.0722%" y="277" width="0.1289%" height="15" fill="rgb(230,99,41)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.13%)</title><rect x="88.0722%" y="261" width="0.1289%" height="15" fill="rgb(253,106,12)" fg:x="1366" fg:w="2"/><text x="88.3222%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.06%)</title><rect x="88.2012%" y="197" width="0.0645%" height="15" fill="rgb(213,46,41)" fg:x="1368" fg:w="1"/><text x="88.4512%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.06%)</title><rect x="88.2012%" y="181" width="0.0645%" height="15" fill="rgb(215,133,35)" fg:x="1368" fg:w="1"/><text x="88.4512%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.32%)</title><rect x="88.2012%" y="293" width="0.3224%" height="15" fill="rgb(213,28,5)" fg:x="1368" fg:w="5"/><text x="88.4512%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.32%)</title><rect x="88.2012%" y="277" width="0.3224%" height="15" fill="rgb(215,77,49)" fg:x="1368" fg:w="5"/><text x="88.4512%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.32%)</title><rect x="88.2012%" y="261" width="0.3224%" height="15" fill="rgb(248,100,22)" fg:x="1368" fg:w="5"/><text x="88.4512%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.32%)</title><rect x="88.2012%" y="245" width="0.3224%" height="15" fill="rgb(208,67,9)" fg:x="1368" fg:w="5"/><text x="88.4512%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.32%)</title><rect x="88.2012%" y="229" width="0.3224%" height="15" fill="rgb(219,133,21)" fg:x="1368" fg:w="5"/><text x="88.4512%" y="239.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.32%)</title><rect x="88.2012%" y="213" width="0.3224%" height="15" fill="rgb(246,46,29)" fg:x="1368" fg:w="5"/><text x="88.4512%" y="223.50"></text></g><g><title>malloc (4 samples, 0.26%)</title><rect x="88.2656%" y="197" width="0.2579%" height="15" fill="rgb(246,185,52)" fg:x="1369" fg:w="4"/><text x="88.5156%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.19%)</title><rect x="88.3301%" y="181" width="0.1934%" height="15" fill="rgb(252,136,11)" fg:x="1370" fg:w="3"/><text x="88.5801%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (9 samples, 0.58%)</title><rect x="88.2012%" y="357" width="0.5803%" height="15" fill="rgb(219,138,53)" fg:x="1368" fg:w="9"/><text x="88.4512%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.58%)</title><rect x="88.2012%" y="341" width="0.5803%" height="15" fill="rgb(211,51,23)" fg:x="1368" fg:w="9"/><text x="88.4512%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.58%)</title><rect x="88.2012%" y="325" width="0.5803%" height="15" fill="rgb(247,221,28)" fg:x="1368" fg:w="9"/><text x="88.4512%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.58%)</title><rect x="88.2012%" y="309" width="0.5803%" height="15" fill="rgb(251,222,45)" fg:x="1368" fg:w="9"/><text x="88.4512%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.26%)</title><rect x="88.5235%" y="293" width="0.2579%" height="15" fill="rgb(217,162,53)" fg:x="1373" fg:w="4"/><text x="88.7735%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.26%)</title><rect x="88.5235%" y="277" width="0.2579%" height="15" fill="rgb(229,93,14)" fg:x="1373" fg:w="4"/><text x="88.7735%" y="287.50"></text></g><g><title>[libc.so.6] (4 samples, 0.26%)</title><rect x="88.5235%" y="261" width="0.2579%" height="15" fill="rgb(209,67,49)" fg:x="1373" fg:w="4"/><text x="88.7735%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::insert (7 samples, 0.45%)</title><rect x="88.7814%" y="357" width="0.4513%" height="15" fill="rgb(213,87,29)" fg:x="1377" fg:w="7"/><text x="89.0314%" y="367.50"></text></g><g><title>core::intrinsics::copy (7 samples, 0.45%)</title><rect x="88.7814%" y="341" width="0.4513%" height="15" fill="rgb(205,151,52)" fg:x="1377" fg:w="7"/><text x="89.0314%" y="351.50"></text></g><g><title>[libc.so.6] (7 samples, 0.45%)</title><rect x="88.7814%" y="325" width="0.4513%" height="15" fill="rgb(253,215,39)" fg:x="1377" fg:w="7"/><text x="89.0314%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.06%)</title><rect x="89.2328%" y="341" width="0.0645%" height="15" fill="rgb(221,220,41)" fg:x="1384" fg:w="1"/><text x="89.4828%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (15 samples, 0.97%)</title><rect x="89.2328%" y="357" width="0.9671%" height="15" fill="rgb(218,133,21)" fg:x="1384" fg:w="15"/><text x="89.4828%" y="367.50"></text></g><g><title>core::intrinsics::copy (14 samples, 0.90%)</title><rect x="89.2972%" y="341" width="0.9026%" height="15" fill="rgb(221,193,43)" fg:x="1385" fg:w="14"/><text x="89.5472%" y="351.50"></text></g><g><title>[libc.so.6] (14 samples, 0.90%)</title><rect x="89.2972%" y="325" width="0.9026%" height="15" fill="rgb(240,128,52)" fg:x="1385" fg:w="14"/><text x="89.5472%" y="335.50"></text></g><g><title>ahc028_a::State::update (38 samples, 2.45%)</title><rect x="88.2012%" y="373" width="2.4500%" height="15" fill="rgb(253,114,12)" fg:x="1368" fg:w="38"/><text x="88.4512%" y="383.50">ah..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (7 samples, 0.45%)</title><rect x="90.1999%" y="357" width="0.4513%" height="15" fill="rgb(215,223,47)" fg:x="1399" fg:w="7"/><text x="90.4499%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (7 samples, 0.45%)</title><rect x="90.1999%" y="341" width="0.4513%" height="15" fill="rgb(248,225,23)" fg:x="1399" fg:w="7"/><text x="90.4499%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.45%)</title><rect x="90.1999%" y="325" width="0.4513%" height="15" fill="rgb(250,108,0)" fg:x="1399" fg:w="7"/><text x="90.4499%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.45%)</title><rect x="90.1999%" y="309" width="0.4513%" height="15" fill="rgb(228,208,7)" fg:x="1399" fg:w="7"/><text x="90.4499%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.45%)</title><rect x="90.1999%" y="293" width="0.4513%" height="15" fill="rgb(244,45,10)" fg:x="1399" fg:w="7"/><text x="90.4499%" y="303.50"></text></g><g><title>free (7 samples, 0.45%)</title><rect x="90.1999%" y="277" width="0.4513%" height="15" fill="rgb(207,125,25)" fg:x="1399" fg:w="7"/><text x="90.4499%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.19%)</title><rect x="90.4578%" y="261" width="0.1934%" height="15" fill="rgb(210,195,18)" fg:x="1403" fg:w="3"/><text x="90.7078%" y="271.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.06%)</title><rect x="90.6512%" y="277" width="0.0645%" height="15" fill="rgb(249,80,12)" fg:x="1406" fg:w="1"/><text x="90.9012%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.06%)</title><rect x="90.6512%" y="261" width="0.0645%" height="15" fill="rgb(221,65,9)" fg:x="1406" fg:w="1"/><text x="90.9012%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;ahc028_a::Neighbor&gt; (11 samples, 0.71%)</title><rect x="90.6512%" y="373" width="0.7092%" height="15" fill="rgb(235,49,36)" fg:x="1406" fg:w="11"/><text x="90.9012%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (11 samples, 0.71%)</title><rect x="90.6512%" y="357" width="0.7092%" height="15" fill="rgb(225,32,20)" fg:x="1406" fg:w="11"/><text x="90.9012%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (11 samples, 0.71%)</title><rect x="90.6512%" y="341" width="0.7092%" height="15" fill="rgb(215,141,46)" fg:x="1406" fg:w="11"/><text x="90.9012%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.71%)</title><rect x="90.6512%" y="325" width="0.7092%" height="15" fill="rgb(250,160,47)" fg:x="1406" fg:w="11"/><text x="90.9012%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.71%)</title><rect x="90.6512%" y="309" width="0.7092%" height="15" fill="rgb(216,222,40)" fg:x="1406" fg:w="11"/><text x="90.9012%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.71%)</title><rect x="90.6512%" y="293" width="0.7092%" height="15" fill="rgb(234,217,39)" fg:x="1406" fg:w="11"/><text x="90.9012%" y="303.50"></text></g><g><title>free (10 samples, 0.64%)</title><rect x="90.7157%" y="277" width="0.6447%" height="15" fill="rgb(207,178,40)" fg:x="1407" fg:w="10"/><text x="90.9657%" y="287.50"></text></g><g><title>[libc.so.6] (8 samples, 0.52%)</title><rect x="90.8446%" y="261" width="0.5158%" height="15" fill="rgb(221,136,13)" fg:x="1409" fg:w="8"/><text x="91.0946%" y="271.50"></text></g><g><title>core::time::Duration::as_secs_f64 (1 samples, 0.06%)</title><rect x="91.3604%" y="373" width="0.0645%" height="15" fill="rgb(249,199,10)" fg:x="1417" fg:w="1"/><text x="91.6104%" y="383.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.06%)</title><rect x="95.0355%" y="117" width="0.0645%" height="15" fill="rgb(249,222,13)" fg:x="1474" fg:w="1"/><text x="95.2855%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.06%)</title><rect x="95.0355%" y="101" width="0.0645%" height="15" fill="rgb(244,185,38)" fg:x="1474" fg:w="1"/><text x="95.2855%" y="111.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::Add&gt;::add (1 samples, 0.06%)</title><rect x="95.0355%" y="85" width="0.0645%" height="15" fill="rgb(236,202,9)" fg:x="1474" fg:w="1"/><text x="95.2855%" y="95.50"></text></g><g><title>ppv_lite86::generic::dmap2 (1 samples, 0.06%)</title><rect x="95.0355%" y="69" width="0.0645%" height="15" fill="rgb(250,229,37)" fg:x="1474" fg:w="1"/><text x="95.2855%" y="79.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::arith::Add&gt;::add::{{closure}} (1 samples, 0.06%)</title><rect x="95.0355%" y="53" width="0.0645%" height="15" fill="rgb(206,174,23)" fg:x="1474" fg:w="1"/><text x="95.2855%" y="63.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.06%)</title><rect x="95.0355%" y="37" width="0.0645%" height="15" fill="rgb(211,33,43)" fg:x="1474" fg:w="1"/><text x="95.2855%" y="47.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as core::ops::bit::BitXor&gt;::bitxor (8 samples, 0.52%)</title><rect x="95.0999%" y="117" width="0.5158%" height="15" fill="rgb(245,58,50)" fg:x="1475" fg:w="8"/><text x="95.3499%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor (8 samples, 0.52%)</title><rect x="95.0999%" y="101" width="0.5158%" height="15" fill="rgb(244,68,36)" fg:x="1475" fg:w="8"/><text x="95.3499%" y="111.50"></text></g><g><title>ppv_lite86::generic::omap2 (8 samples, 0.52%)</title><rect x="95.0999%" y="85" width="0.5158%" height="15" fill="rgb(232,229,15)" fg:x="1475" fg:w="8"/><text x="95.3499%" y="95.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as core::ops::bit::BitXor&gt;::bitxor::{{closure}} (8 samples, 0.52%)</title><rect x="95.0999%" y="69" width="0.5158%" height="15" fill="rgb(254,30,23)" fg:x="1475" fg:w="8"/><text x="95.3499%" y="79.50"></text></g><g><title>rand_chacha::guts::round (14 samples, 0.90%)</title><rect x="95.0355%" y="133" width="0.9026%" height="15" fill="rgb(235,160,14)" fg:x="1474" fg:w="14"/><text x="95.2855%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (5 samples, 0.32%)</title><rect x="95.6157%" y="117" width="0.3224%" height="15" fill="rgb(212,155,44)" fg:x="1483" fg:w="5"/><text x="95.8657%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (1 samples, 0.06%)</title><rect x="95.8736%" y="101" width="0.0645%" height="15" fill="rgb(226,2,50)" fg:x="1487" fg:w="1"/><text x="96.1236%" y="111.50"></text></g><g><title>ppv_lite86::generic::dmap (1 samples, 0.06%)</title><rect x="95.8736%" y="85" width="0.0645%" height="15" fill="rgb(234,177,6)" fg:x="1487" fg:w="1"/><text x="96.1236%" y="95.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25::{{closure}} (1 samples, 0.06%)</title><rect x="95.8736%" y="69" width="0.0645%" height="15" fill="rgb(217,24,9)" fg:x="1487" fg:w="1"/><text x="96.1236%" y="79.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.06%)</title><rect x="95.8736%" y="53" width="0.0645%" height="15" fill="rgb(220,13,46)" fg:x="1487" fg:w="1"/><text x="96.1236%" y="63.50"></text></g><g><title>rand::Rng::sample (71 samples, 4.58%)</title><rect x="91.4249%" y="357" width="4.5777%" height="15" fill="rgb(239,221,27)" fg:x="1418" fg:w="71"/><text x="91.6749%" y="367.50">rand:..</text></g><g><title>&lt;rand::distributions::bernoulli::Bernoulli as rand::distributions::Distribution&lt;bool&gt;&gt;::sample (71 samples, 4.58%)</title><rect x="91.4249%" y="341" width="4.5777%" height="15" fill="rgb(222,198,25)" fg:x="1418" fg:w="71"/><text x="91.6749%" y="351.50">&lt;rand..</text></g><g><title>rand::Rng::gen (16 samples, 1.03%)</title><rect x="94.9710%" y="325" width="1.0316%" height="15" fill="rgb(211,99,13)" fg:x="1473" fg:w="16"/><text x="95.2210%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (16 samples, 1.03%)</title><rect x="94.9710%" y="309" width="1.0316%" height="15" fill="rgb(232,111,31)" fg:x="1473" fg:w="16"/><text x="95.2210%" y="319.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (16 samples, 1.03%)</title><rect x="94.9710%" y="293" width="1.0316%" height="15" fill="rgb(245,82,37)" fg:x="1473" fg:w="16"/><text x="95.2210%" y="303.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (16 samples, 1.03%)</title><rect x="94.9710%" y="277" width="1.0316%" height="15" fill="rgb(227,149,46)" fg:x="1473" fg:w="16"/><text x="95.2210%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (16 samples, 1.03%)</title><rect x="94.9710%" y="261" width="1.0316%" height="15" fill="rgb(218,36,50)" fg:x="1473" fg:w="16"/><text x="95.2210%" y="271.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (15 samples, 0.97%)</title><rect x="95.0355%" y="245" width="0.9671%" height="15" fill="rgb(226,80,48)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="255.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (15 samples, 0.97%)</title><rect x="95.0355%" y="229" width="0.9671%" height="15" fill="rgb(238,224,15)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="239.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha20Core as rand_core::block::BlockRngCore&gt;::generate (15 samples, 0.97%)</title><rect x="95.0355%" y="213" width="0.9671%" height="15" fill="rgb(241,136,10)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (15 samples, 0.97%)</title><rect x="95.0355%" y="197" width="0.9671%" height="15" fill="rgb(208,32,45)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide (15 samples, 0.97%)</title><rect x="95.0355%" y="181" width="0.9671%" height="15" fill="rgb(207,135,9)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (15 samples, 0.97%)</title><rect x="95.0355%" y="165" width="0.9671%" height="15" fill="rgb(206,86,44)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (15 samples, 0.97%)</title><rect x="95.0355%" y="149" width="0.9671%" height="15" fill="rgb(245,177,15)" fg:x="1474" fg:w="15"/><text x="95.2855%" y="159.50"></text></g><g><title>rand_chacha::guts::undiagonalize (1 samples, 0.06%)</title><rect x="95.9381%" y="133" width="0.0645%" height="15" fill="rgb(206,64,50)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x4&lt;W&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (1 samples, 0.06%)</title><rect x="95.9381%" y="117" width="0.0645%" height="15" fill="rgb(234,36,40)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="127.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (1 samples, 0.06%)</title><rect x="95.9381%" y="101" width="0.0645%" height="15" fill="rgb(213,64,8)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="111.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Words4&gt;::shuffle2301 (1 samples, 0.06%)</title><rect x="95.9381%" y="85" width="0.0645%" height="15" fill="rgb(210,75,36)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="95.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Swap64&gt;::swap64 (1 samples, 0.06%)</title><rect x="95.9381%" y="69" width="0.0645%" height="15" fill="rgb(229,88,21)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="79.50"></text></g><g><title>ppv_lite86::generic::omap (1 samples, 0.06%)</title><rect x="95.9381%" y="53" width="0.0645%" height="15" fill="rgb(252,204,47)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="63.50"></text></g><g><title>&lt;ppv_lite86::generic::u32x4_generic as ppv_lite86::types::Store&lt;ppv_lite86::generic::vec128_storage&gt;&gt;::unpack (1 samples, 0.06%)</title><rect x="95.9381%" y="37" width="0.0645%" height="15" fill="rgb(208,77,27)" fg:x="1488" fg:w="1"/><text x="96.1881%" y="47.50"></text></g><g><title>rand::Rng::gen_bool (74 samples, 4.77%)</title><rect x="91.4249%" y="373" width="4.7711%" height="15" fill="rgb(221,76,26)" fg:x="1418" fg:w="74"/><text x="91.6749%" y="383.50">rand::..</text></g><g><title>rand::distributions::bernoulli::Bernoulli::new (3 samples, 0.19%)</title><rect x="96.0026%" y="357" width="0.1934%" height="15" fill="rgb(225,139,18)" fg:x="1489" fg:w="3"/><text x="96.2526%" y="367.50"></text></g><g><title>exp (25 samples, 1.61%)</title><rect x="96.1960%" y="357" width="1.6119%" height="15" fill="rgb(230,137,11)" fg:x="1492" fg:w="25"/><text x="96.4460%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (27 samples, 1.74%)</title><rect x="96.1960%" y="373" width="1.7408%" height="15" fill="rgb(212,28,1)" fg:x="1492" fg:w="27"/><text x="96.4460%" y="383.50"></text></g><g><title>exp@plt (2 samples, 0.13%)</title><rect x="97.8079%" y="357" width="0.1289%" height="15" fill="rgb(248,164,17)" fg:x="1517" fg:w="2"/><text x="98.0579%" y="367.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (3 samples, 0.19%)</title><rect x="98.0013%" y="357" width="0.1934%" height="15" fill="rgb(222,171,42)" fg:x="1520" fg:w="3"/><text x="98.2513%" y="367.50"></text></g><g><title>std::time::Instant::duration_since (3 samples, 0.19%)</title><rect x="98.0013%" y="341" width="0.1934%" height="15" fill="rgb(243,84,45)" fg:x="1520" fg:w="3"/><text x="98.2513%" y="351.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.19%)</title><rect x="98.0013%" y="325" width="0.1934%" height="15" fill="rgb(252,49,23)" fg:x="1520" fg:w="3"/><text x="98.2513%" y="335.50"></text></g><g><title>std::sys::unix::time::Instant::checked_sub_instant (3 samples, 0.19%)</title><rect x="98.0013%" y="309" width="0.1934%" height="15" fill="rgb(215,19,7)" fg:x="1520" fg:w="3"/><text x="98.2513%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.19%)</title><rect x="98.0013%" y="293" width="0.1934%" height="15" fill="rgb(238,81,41)" fg:x="1520" fg:w="3"/><text x="98.2513%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (1 samples, 0.06%)</title><rect x="98.1302%" y="277" width="0.0645%" height="15" fill="rgb(210,199,37)" fg:x="1522" fg:w="1"/><text x="98.3802%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.06%)</title><rect x="98.1302%" y="261" width="0.0645%" height="15" fill="rgb(244,192,49)" fg:x="1522" fg:w="1"/><text x="98.3802%" y="271.50"></text></g><g><title>ahc028_a::solve (1,498 samples, 96.58%)</title><rect x="3.3527%" y="405" width="96.5828%" height="15" fill="rgb(226,211,11)" fg:x="52" fg:w="1498"/><text x="3.6027%" y="415.50">ahc028_a::solve</text></g><g><title>ahc028_a::simanneal (1,492 samples, 96.20%)</title><rect x="3.7395%" y="389" width="96.1960%" height="15" fill="rgb(236,162,54)" fg:x="58" fg:w="1492"/><text x="3.9895%" y="399.50">ahc028_a::simanneal</text></g><g><title>std::time::Instant::elapsed (31 samples, 2.00%)</title><rect x="97.9368%" y="373" width="1.9987%" height="15" fill="rgb(220,229,9)" fg:x="1519" fg:w="31"/><text x="98.1868%" y="383.50">s..</text></g><g><title>std::time::Instant::now (27 samples, 1.74%)</title><rect x="98.1947%" y="357" width="1.7408%" height="15" fill="rgb(250,87,22)" fg:x="1523" fg:w="27"/><text x="98.4447%" y="367.50"></text></g><g><title>std::sys::unix::time::Instant::now (27 samples, 1.74%)</title><rect x="98.1947%" y="341" width="1.7408%" height="15" fill="rgb(239,43,17)" fg:x="1523" fg:w="27"/><text x="98.4447%" y="351.50"></text></g><g><title>std::sys::unix::time::Timespec::now (27 samples, 1.74%)</title><rect x="98.1947%" y="325" width="1.7408%" height="15" fill="rgb(231,177,25)" fg:x="1523" fg:w="27"/><text x="98.4447%" y="335.50"></text></g><g><title>__clock_gettime (27 samples, 1.74%)</title><rect x="98.1947%" y="309" width="1.7408%" height="15" fill="rgb(219,179,1)" fg:x="1523" fg:w="27"/><text x="98.4447%" y="319.50"></text></g><g><title>__kernel_clock_gettime (20 samples, 1.29%)</title><rect x="98.6460%" y="293" width="1.2895%" height="15" fill="rgb(238,219,53)" fg:x="1530" fg:w="20"/><text x="98.8960%" y="303.50"></text></g><g><title>all (1,551 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="719.50"></text></g><g><title>ahc028_a (1,551 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="703.50">ahc028_a</text></g><g><title>_start (1,551 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="687.50">_start</text></g><g><title>__libc_start_main (1,551 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="671.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,551 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="655.50">[libc.so.6]</text></g><g><title>main (1,551 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="639.50">main</text></g><g><title>std::rt::lang_start_internal (1,551 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="623.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,551 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,551 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,551 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="575.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,551 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="559.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,551 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,551 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,551 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="511.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,551 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="495.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,551 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,551 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,551 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="447.50">core::ops::function::FnOnce::call_once</text></g><g><title>ahc028_a::main (1,551 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="1551"/><text x="0.2500%" y="431.50">ahc028_a::main</text></g><g><title>core::ptr::drop_in_place&lt;ahc028_a::Input&gt; (1 samples, 0.06%)</title><rect x="99.9355%" y="405" width="0.0645%" height="15" fill="rgb(245,203,43)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.9355%" y="389" width="0.0645%" height="15" fill="rgb(238,205,33)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.9355%" y="373" width="0.0645%" height="15" fill="rgb(231,56,7)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;]&gt; (1 samples, 0.06%)</title><rect x="99.9355%" y="357" width="0.0645%" height="15" fill="rgb(244,186,29)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.9355%" y="341" width="0.0645%" height="15" fill="rgb(234,111,31)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="99.9355%" y="325" width="0.0645%" height="15" fill="rgb(241,149,10)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="99.9355%" y="309" width="0.0645%" height="15" fill="rgb(249,206,44)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.06%)</title><rect x="99.9355%" y="293" width="0.0645%" height="15" fill="rgb(251,153,30)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.06%)</title><rect x="99.9355%" y="277" width="0.0645%" height="15" fill="rgb(239,152,38)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="287.50"></text></g><g><title>free (1 samples, 0.06%)</title><rect x="99.9355%" y="261" width="0.0645%" height="15" fill="rgb(249,139,47)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.9355%" y="245" width="0.0645%" height="15" fill="rgb(244,64,35)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.9355%" y="229" width="0.0645%" height="15" fill="rgb(216,46,15)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.06%)</title><rect x="99.9355%" y="213" width="0.0645%" height="15" fill="rgb(250,74,19)" fg:x="1550" fg:w="1"/><text x="100.1855%" y="223.50"></text></g></svg></svg>