<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="2519"><g><title>ahc033_a::State::init_state (1 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0397%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>ahc033_a::State::get_order (1 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0397%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0397%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0397%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="0.0000%" y="373" width="0.0397%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0397%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="0.0000%" y="341" width="0.0397%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="0.0000%" y="325" width="0.0397%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="0.0000%" y="309" width="0.0397%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.04%)</title><rect x="0.0000%" y="293" width="0.0397%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (1 samples, 0.04%)</title><rect x="0.0000%" y="277" width="0.0397%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (1 samples, 0.04%)</title><rect x="0.0000%" y="261" width="0.0397%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.04%)</title><rect x="0.0000%" y="245" width="0.0397%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>core::ptr::read_unaligned (1 samples, 0.04%)</title><rect x="0.0000%" y="229" width="0.0397%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="0.0000%" y="213" width="0.0397%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>ahc033_a::State::print (1 samples, 0.04%)</title><rect x="0.0397%" y="437" width="0.0397%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2897%" y="447.50"></text></g><g><title>ahc033_a::State::simulate (1 samples, 0.04%)</title><rect x="0.0397%" y="421" width="0.0397%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2897%" y="431.50"></text></g><g><title>ahc033_a::TaskAssigner::simulate (1 samples, 0.04%)</title><rect x="0.0397%" y="405" width="0.0397%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2897%" y="415.50"></text></g><g><title>ahc033_a::TaskAssigner::task_assign (1 samples, 0.04%)</title><rect x="0.0397%" y="389" width="0.0397%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2897%" y="399.50"></text></g><g><title>ahc033_a::TaskAssigner::get_min_dist (1 samples, 0.04%)</title><rect x="0.0397%" y="373" width="0.0397%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2897%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.04%)</title><rect x="0.0397%" y="357" width="0.0397%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.2897%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.04%)</title><rect x="0.0397%" y="341" width="0.0397%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.2897%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="0.0397%" y="325" width="0.0397%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.2897%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="0.0397%" y="309" width="0.0397%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.2897%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="0.0397%" y="293" width="0.0397%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.2897%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="0.0397%" y="277" width="0.0397%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.2897%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="0.0397%" y="261" width="0.0397%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.2897%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="0.0794%" y="373" width="0.0397%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="0.3294%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="0.0794%" y="357" width="0.0397%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="0.3294%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="0.0794%" y="341" width="0.0397%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="0.3294%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="0.1191%" y="373" width="0.0397%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="1"/><text x="0.3691%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="0.1191%" y="357" width="0.0397%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="1"/><text x="0.3691%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="0.1191%" y="341" width="0.0397%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="0.3691%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="0.1191%" y="325" width="0.0397%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="0.3691%" y="335.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="0.1191%" y="309" width="0.0397%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="0.3691%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="0.1588%" y="325" width="0.0397%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.4088%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="0.1588%" y="309" width="0.0397%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.4088%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="0.1588%" y="293" width="0.0397%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.4088%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="0.1588%" y="277" width="0.0397%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.4088%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="0.1588%" y="261" width="0.0397%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.4088%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.04%)</title><rect x="0.1588%" y="245" width="0.0397%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="0.4088%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="0.1588%" y="229" width="0.0397%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1"/><text x="0.4088%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="0.1985%" y="309" width="0.0397%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.4485%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="0.1985%" y="293" width="0.0397%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.4485%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="0.1985%" y="277" width="0.0397%" height="15" fill="rgb(222,207,29)" fg:x="5" fg:w="1"/><text x="0.4485%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.04%)</title><rect x="0.1985%" y="261" width="0.0397%" height="15" fill="rgb(206,96,30)" fg:x="5" fg:w="1"/><text x="0.4485%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.04%)</title><rect x="0.1985%" y="245" width="0.0397%" height="15" fill="rgb(218,138,4)" fg:x="5" fg:w="1"/><text x="0.4485%" y="255.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.1985%" y="229" width="0.0397%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="1"/><text x="0.4485%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (1 samples, 0.04%)</title><rect x="0.1985%" y="213" width="0.0397%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="1"/><text x="0.4485%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.04%)</title><rect x="0.1985%" y="197" width="0.0397%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="1"/><text x="0.4485%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="0.1985%" y="181" width="0.0397%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="1"/><text x="0.4485%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="0.1985%" y="165" width="0.0397%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="1"/><text x="0.4485%" y="175.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="0.1985%" y="149" width="0.0397%" height="15" fill="rgb(247,123,22)" fg:x="5" fg:w="1"/><text x="0.4485%" y="159.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.12%)</title><rect x="0.1588%" y="373" width="0.1191%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="3"/><text x="0.4088%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.12%)</title><rect x="0.1588%" y="357" width="0.1191%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="3"/><text x="0.4088%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.12%)</title><rect x="0.1588%" y="341" width="0.1191%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="3"/><text x="0.4088%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.08%)</title><rect x="0.1985%" y="325" width="0.0794%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="2"/><text x="0.4485%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="0.2382%" y="309" width="0.0397%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="0.4882%" y="319.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="0.2382%" y="293" width="0.0397%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="0.4882%" y="303.50"></text></g><g><title>ahc033_a::State::get_order (6 samples, 0.24%)</title><rect x="0.0794%" y="389" width="0.2382%" height="15" fill="rgb(227,1,9)" fg:x="2" fg:w="6"/><text x="0.3294%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::remove (1 samples, 0.04%)</title><rect x="0.2779%" y="373" width="0.0397%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="1"/><text x="0.5279%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::remove (1 samples, 0.04%)</title><rect x="0.2779%" y="357" width="0.0397%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="1"/><text x="0.5279%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.04%)</title><rect x="0.2779%" y="341" width="0.0397%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="1"/><text x="0.5279%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.04%)</title><rect x="0.2779%" y="325" width="0.0397%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="1"/><text x="0.5279%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.04%)</title><rect x="0.2779%" y="309" width="0.0397%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="1"/><text x="0.5279%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove (1 samples, 0.04%)</title><rect x="0.2779%" y="293" width="0.0397%" height="15" fill="rgb(247,98,35)" fg:x="7" fg:w="1"/><text x="0.5279%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::erase_no_drop (1 samples, 0.04%)</title><rect x="0.2779%" y="277" width="0.0397%" height="15" fill="rgb(247,138,52)" fg:x="7" fg:w="1"/><text x="0.5279%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::erase (1 samples, 0.04%)</title><rect x="0.2779%" y="261" width="0.0397%" height="15" fill="rgb(213,79,30)" fg:x="7" fg:w="1"/><text x="0.5279%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="0.3176%" y="373" width="0.0397%" height="15" fill="rgb(246,177,23)" fg:x="8" fg:w="1"/><text x="0.5676%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="0.3176%" y="357" width="0.0397%" height="15" fill="rgb(230,62,27)" fg:x="8" fg:w="1"/><text x="0.5676%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="0.3176%" y="341" width="0.0397%" height="15" fill="rgb(216,154,8)" fg:x="8" fg:w="1"/><text x="0.5676%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="0.3176%" y="325" width="0.0397%" height="15" fill="rgb(244,35,45)" fg:x="8" fg:w="1"/><text x="0.5676%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="0.3176%" y="309" width="0.0397%" height="15" fill="rgb(251,115,12)" fg:x="8" fg:w="1"/><text x="0.5676%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="0.3176%" y="293" width="0.0397%" height="15" fill="rgb(240,54,50)" fg:x="8" fg:w="1"/><text x="0.5676%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="0.3176%" y="277" width="0.0397%" height="15" fill="rgb(233,84,52)" fg:x="8" fg:w="1"/><text x="0.5676%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="0.3176%" y="261" width="0.0397%" height="15" fill="rgb(207,117,47)" fg:x="8" fg:w="1"/><text x="0.5676%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="0.3176%" y="245" width="0.0397%" height="15" fill="rgb(249,43,39)" fg:x="8" fg:w="1"/><text x="0.5676%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="0.3176%" y="229" width="0.0397%" height="15" fill="rgb(209,38,44)" fg:x="8" fg:w="1"/><text x="0.5676%" y="239.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="0.3176%" y="213" width="0.0397%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="1"/><text x="0.5676%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.04%)</title><rect x="0.3573%" y="341" width="0.0397%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="1"/><text x="0.6073%" y="351.50"></text></g><g><title>core::slice::sort::merge (1 samples, 0.04%)</title><rect x="0.3573%" y="325" width="0.0397%" height="15" fill="rgb(211,96,35)" fg:x="9" fg:w="1"/><text x="0.6073%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (2 samples, 0.08%)</title><rect x="0.3573%" y="373" width="0.0794%" height="15" fill="rgb(253,215,40)" fg:x="9" fg:w="2"/><text x="0.6073%" y="383.50"></text></g><g><title>alloc::slice::stable_sort (2 samples, 0.08%)</title><rect x="0.3573%" y="357" width="0.0794%" height="15" fill="rgb(211,81,21)" fg:x="9" fg:w="2"/><text x="0.6073%" y="367.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="0.3970%" y="341" width="0.0397%" height="15" fill="rgb(208,190,38)" fg:x="10" fg:w="1"/><text x="0.6470%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="0.4367%" y="373" width="0.0397%" height="15" fill="rgb(235,213,38)" fg:x="11" fg:w="1"/><text x="0.6867%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="0.4367%" y="357" width="0.0397%" height="15" fill="rgb(237,122,38)" fg:x="11" fg:w="1"/><text x="0.6867%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="0.4367%" y="341" width="0.0397%" height="15" fill="rgb(244,218,35)" fg:x="11" fg:w="1"/><text x="0.6867%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="0.4367%" y="325" width="0.0397%" height="15" fill="rgb(240,68,47)" fg:x="11" fg:w="1"/><text x="0.6867%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="0.4367%" y="309" width="0.0397%" height="15" fill="rgb(210,16,53)" fg:x="11" fg:w="1"/><text x="0.6867%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="0.4367%" y="293" width="0.0397%" height="15" fill="rgb(235,124,12)" fg:x="11" fg:w="1"/><text x="0.6867%" y="303.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="0.4367%" y="277" width="0.0397%" height="15" fill="rgb(224,169,11)" fg:x="11" fg:w="1"/><text x="0.6867%" y="287.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="0.4367%" y="261" width="0.0397%" height="15" fill="rgb(250,166,2)" fg:x="11" fg:w="1"/><text x="0.6867%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 0.12%)</title><rect x="0.4764%" y="341" width="0.1191%" height="15" fill="rgb(242,216,29)" fg:x="12" fg:w="3"/><text x="0.7264%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.12%)</title><rect x="0.4764%" y="325" width="0.1191%" height="15" fill="rgb(230,116,27)" fg:x="12" fg:w="3"/><text x="0.7264%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.12%)</title><rect x="0.4764%" y="309" width="0.1191%" height="15" fill="rgb(228,99,48)" fg:x="12" fg:w="3"/><text x="0.7264%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.12%)</title><rect x="0.4764%" y="293" width="0.1191%" height="15" fill="rgb(253,11,6)" fg:x="12" fg:w="3"/><text x="0.7264%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.12%)</title><rect x="0.4764%" y="277" width="0.1191%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="3"/><text x="0.7264%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.12%)</title><rect x="0.4764%" y="261" width="0.1191%" height="15" fill="rgb(236,97,10)" fg:x="12" fg:w="3"/><text x="0.7264%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.12%)</title><rect x="0.4764%" y="245" width="0.1191%" height="15" fill="rgb(233,208,19)" fg:x="12" fg:w="3"/><text x="0.7264%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.12%)</title><rect x="0.4764%" y="229" width="0.1191%" height="15" fill="rgb(216,164,2)" fg:x="12" fg:w="3"/><text x="0.7264%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.12%)</title><rect x="0.4764%" y="213" width="0.1191%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="3"/><text x="0.7264%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.12%)</title><rect x="0.4764%" y="197" width="0.1191%" height="15" fill="rgb(242,17,10)" fg:x="12" fg:w="3"/><text x="0.7264%" y="207.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.12%)</title><rect x="0.4764%" y="181" width="0.1191%" height="15" fill="rgb(242,107,0)" fg:x="12" fg:w="3"/><text x="0.7264%" y="191.50"></text></g><g><title>malloc (3 samples, 0.12%)</title><rect x="0.4764%" y="165" width="0.1191%" height="15" fill="rgb(251,28,31)" fg:x="12" fg:w="3"/><text x="0.7264%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="0.5161%" y="149" width="0.0794%" height="15" fill="rgb(233,223,10)" fg:x="13" fg:w="2"/><text x="0.7661%" y="159.50"></text></g><g><title>alloc::vec::from_elem (6 samples, 0.24%)</title><rect x="0.4764%" y="373" width="0.2382%" height="15" fill="rgb(215,21,27)" fg:x="12" fg:w="6"/><text x="0.7264%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (6 samples, 0.24%)</title><rect x="0.4764%" y="357" width="0.2382%" height="15" fill="rgb(232,23,21)" fg:x="12" fg:w="6"/><text x="0.7264%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.12%)</title><rect x="0.5955%" y="341" width="0.1191%" height="15" fill="rgb(244,5,23)" fg:x="15" fg:w="3"/><text x="0.8455%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.12%)</title><rect x="0.5955%" y="325" width="0.1191%" height="15" fill="rgb(226,81,46)" fg:x="15" fg:w="3"/><text x="0.8455%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.12%)</title><rect x="0.5955%" y="309" width="0.1191%" height="15" fill="rgb(247,70,30)" fg:x="15" fg:w="3"/><text x="0.8455%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.12%)</title><rect x="0.5955%" y="293" width="0.1191%" height="15" fill="rgb(212,68,19)" fg:x="15" fg:w="3"/><text x="0.8455%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.12%)</title><rect x="0.5955%" y="277" width="0.1191%" height="15" fill="rgb(240,187,13)" fg:x="15" fg:w="3"/><text x="0.8455%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.12%)</title><rect x="0.5955%" y="261" width="0.1191%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="3"/><text x="0.8455%" y="271.50"></text></g><g><title>malloc (3 samples, 0.12%)</title><rect x="0.5955%" y="245" width="0.1191%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="3"/><text x="0.8455%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.12%)</title><rect x="0.5955%" y="229" width="0.1191%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="3"/><text x="0.8455%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="0.6352%" y="213" width="0.0794%" height="15" fill="rgb(247,173,49)" fg:x="16" fg:w="2"/><text x="0.8852%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.6749%" y="197" width="0.0397%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="1"/><text x="0.9249%" y="207.50"></text></g><g><title>ahc033_a::TaskAssigner::new (11 samples, 0.44%)</title><rect x="0.3176%" y="389" width="0.4367%" height="15" fill="rgb(245,159,27)" fg:x="8" fg:w="11"/><text x="0.5676%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(usize,usize)&gt;&gt; (1 samples, 0.04%)</title><rect x="0.7146%" y="373" width="0.0397%" height="15" fill="rgb(245,172,44)" fg:x="18" fg:w="1"/><text x="0.9646%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.7146%" y="357" width="0.0397%" height="15" fill="rgb(236,23,11)" fg:x="18" fg:w="1"/><text x="0.9646%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(usize,usize),alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="0.7146%" y="341" width="0.0397%" height="15" fill="rgb(205,117,38)" fg:x="18" fg:w="1"/><text x="0.9646%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.7146%" y="325" width="0.0397%" height="15" fill="rgb(237,72,25)" fg:x="18" fg:w="1"/><text x="0.9646%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (1 samples, 0.04%)</title><rect x="0.7146%" y="309" width="0.0397%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="1"/><text x="0.9646%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="0.7146%" y="293" width="0.0397%" height="15" fill="rgb(217,125,39)" fg:x="18" fg:w="1"/><text x="0.9646%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="0.7146%" y="277" width="0.0397%" height="15" fill="rgb(235,36,10)" fg:x="18" fg:w="1"/><text x="0.9646%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="0.7146%" y="261" width="0.0397%" height="15" fill="rgb(251,123,47)" fg:x="18" fg:w="1"/><text x="0.9646%" y="271.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="0.7146%" y="245" width="0.0397%" height="15" fill="rgb(221,13,13)" fg:x="18" fg:w="1"/><text x="0.9646%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.7146%" y="229" width="0.0397%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="1"/><text x="0.9646%" y="239.50"></text></g><g><title>&lt;ahc033_a::OPS2COODINATEDIFF2 as core::ops::deref::Deref&gt;::deref (3 samples, 0.12%)</title><rect x="1.4291%" y="341" width="0.1191%" height="15" fill="rgb(211,50,8)" fg:x="36" fg:w="3"/><text x="1.6791%" y="351.50"></text></g><g><title>&lt;ahc033_a::OPS2COODINATEDIFF2 as core::ops::deref::Deref&gt;::deref::__stability (3 samples, 0.12%)</title><rect x="1.4291%" y="325" width="0.1191%" height="15" fill="rgb(245,182,24)" fg:x="36" fg:w="3"/><text x="1.6791%" y="335.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (3 samples, 0.12%)</title><rect x="1.4291%" y="309" width="0.1191%" height="15" fill="rgb(242,14,37)" fg:x="36" fg:w="3"/><text x="1.6791%" y="319.50"></text></g><g><title>std::sync::once::Once::call_once (3 samples, 0.12%)</title><rect x="1.4291%" y="293" width="0.1191%" height="15" fill="rgb(246,228,12)" fg:x="36" fg:w="3"/><text x="1.6791%" y="303.50"></text></g><g><title>std::sys_common::once::futex::Once::is_completed (1 samples, 0.04%)</title><rect x="1.5085%" y="277" width="0.0397%" height="15" fill="rgb(213,55,15)" fg:x="38" fg:w="1"/><text x="1.7585%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.04%)</title><rect x="1.5085%" y="261" width="0.0397%" height="15" fill="rgb(209,9,3)" fg:x="38" fg:w="1"/><text x="1.7585%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.04%)</title><rect x="1.5085%" y="245" width="0.0397%" height="15" fill="rgb(230,59,30)" fg:x="38" fg:w="1"/><text x="1.7585%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.28%)</title><rect x="1.5482%" y="341" width="0.2779%" height="15" fill="rgb(209,121,21)" fg:x="39" fg:w="7"/><text x="1.7982%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.08%)</title><rect x="2.2628%" y="325" width="0.0794%" height="15" fill="rgb(220,109,13)" fg:x="57" fg:w="2"/><text x="2.5128%" y="335.50"></text></g><g><title>ahc033_a::TaskAssigner::has_container2 (14 samples, 0.56%)</title><rect x="1.8261%" y="341" width="0.5558%" height="15" fill="rgb(232,18,1)" fg:x="46" fg:w="14"/><text x="2.0761%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="2.3422%" y="325" width="0.0397%" height="15" fill="rgb(215,41,42)" fg:x="59" fg:w="1"/><text x="2.5922%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="2.3422%" y="309" width="0.0397%" height="15" fill="rgb(224,123,36)" fg:x="59" fg:w="1"/><text x="2.5922%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (6 samples, 0.24%)</title><rect x="2.3819%" y="341" width="0.2382%" height="15" fill="rgb(240,125,3)" fg:x="60" fg:w="6"/><text x="2.6319%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (2 samples, 0.08%)</title><rect x="2.6201%" y="341" width="0.0794%" height="15" fill="rgb(205,98,50)" fg:x="66" fg:w="2"/><text x="2.8701%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (1 samples, 0.04%)</title><rect x="2.6598%" y="325" width="0.0397%" height="15" fill="rgb(205,185,37)" fg:x="67" fg:w="1"/><text x="2.9098%" y="335.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="2.6598%" y="309" width="0.0397%" height="15" fill="rgb(238,207,15)" fg:x="67" fg:w="1"/><text x="2.9098%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::handle_capacity_increase (1 samples, 0.04%)</title><rect x="2.8583%" y="309" width="0.0397%" height="15" fill="rgb(213,199,42)" fg:x="72" fg:w="1"/><text x="3.1083%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::copy (1 samples, 0.04%)</title><rect x="2.8583%" y="293" width="0.0397%" height="15" fill="rgb(235,201,11)" fg:x="72" fg:w="1"/><text x="3.1083%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="2.8583%" y="277" width="0.0397%" height="15" fill="rgb(207,46,11)" fg:x="72" fg:w="1"/><text x="3.1083%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="2.8583%" y="261" width="0.0397%" height="15" fill="rgb(241,35,35)" fg:x="72" fg:w="1"/><text x="3.1083%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (9 samples, 0.36%)</title><rect x="2.8186%" y="325" width="0.3573%" height="15" fill="rgb(243,32,47)" fg:x="71" fg:w="9"/><text x="3.0686%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.28%)</title><rect x="2.8980%" y="309" width="0.2779%" height="15" fill="rgb(247,202,23)" fg:x="73" fg:w="7"/><text x="3.1480%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.24%)</title><rect x="2.9377%" y="293" width="0.2382%" height="15" fill="rgb(219,102,11)" fg:x="74" fg:w="6"/><text x="3.1877%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.24%)</title><rect x="2.9377%" y="277" width="0.2382%" height="15" fill="rgb(243,110,44)" fg:x="74" fg:w="6"/><text x="3.1877%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.20%)</title><rect x="2.9774%" y="261" width="0.1985%" height="15" fill="rgb(222,74,54)" fg:x="75" fg:w="5"/><text x="3.2274%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.20%)</title><rect x="2.9774%" y="245" width="0.1985%" height="15" fill="rgb(216,99,12)" fg:x="75" fg:w="5"/><text x="3.2274%" y="255.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.20%)</title><rect x="2.9774%" y="229" width="0.1985%" height="15" fill="rgb(226,22,26)" fg:x="75" fg:w="5"/><text x="3.2274%" y="239.50"></text></g><g><title>realloc (5 samples, 0.20%)</title><rect x="2.9774%" y="213" width="0.1985%" height="15" fill="rgb(217,163,10)" fg:x="75" fg:w="5"/><text x="3.2274%" y="223.50"></text></g><g><title>[libc.so.6] (4 samples, 0.16%)</title><rect x="3.0171%" y="197" width="0.1588%" height="15" fill="rgb(213,25,53)" fg:x="76" fg:w="4"/><text x="3.2671%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.16%)</title><rect x="3.0171%" y="181" width="0.1588%" height="15" fill="rgb(252,105,26)" fg:x="76" fg:w="4"/><text x="3.2671%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (13 samples, 0.52%)</title><rect x="2.6995%" y="341" width="0.5161%" height="15" fill="rgb(220,39,43)" fg:x="68" fg:w="13"/><text x="2.9495%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (1 samples, 0.04%)</title><rect x="3.1759%" y="325" width="0.0397%" height="15" fill="rgb(229,68,48)" fg:x="80" fg:w="1"/><text x="3.4259%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (1 samples, 0.04%)</title><rect x="3.2156%" y="341" width="0.0397%" height="15" fill="rgb(252,8,32)" fg:x="81" fg:w="1"/><text x="3.4656%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse::revswap (1 samples, 0.04%)</title><rect x="3.2156%" y="325" width="0.0397%" height="15" fill="rgb(223,20,43)" fg:x="81" fg:w="1"/><text x="3.4656%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="3.6919%" y="229" width="0.0794%" height="15" fill="rgb(229,81,49)" fg:x="93" fg:w="2"/><text x="3.9419%" y="239.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1 samples, 0.04%)</title><rect x="3.7316%" y="213" width="0.0397%" height="15" fill="rgb(236,28,36)" fg:x="94" fg:w="1"/><text x="3.9816%" y="223.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (1 samples, 0.04%)</title><rect x="3.7316%" y="197" width="0.0397%" height="15" fill="rgb(249,185,26)" fg:x="94" fg:w="1"/><text x="3.9816%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.04%)</title><rect x="3.7316%" y="181" width="0.0397%" height="15" fill="rgb(249,174,33)" fg:x="94" fg:w="1"/><text x="3.9816%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (1 samples, 0.04%)</title><rect x="3.7316%" y="165" width="0.0397%" height="15" fill="rgb(233,201,37)" fg:x="94" fg:w="1"/><text x="3.9816%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="3.7316%" y="149" width="0.0397%" height="15" fill="rgb(221,78,26)" fg:x="94" fg:w="1"/><text x="3.9816%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.08%)</title><rect x="3.7713%" y="229" width="0.0794%" height="15" fill="rgb(250,127,30)" fg:x="95" fg:w="2"/><text x="4.0213%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.04%)</title><rect x="3.8507%" y="229" width="0.0397%" height="15" fill="rgb(230,49,44)" fg:x="97" fg:w="1"/><text x="4.1007%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="3.8507%" y="213" width="0.0397%" height="15" fill="rgb(229,67,23)" fg:x="97" fg:w="1"/><text x="4.1007%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (1 samples, 0.04%)</title><rect x="3.8507%" y="197" width="0.0397%" height="15" fill="rgb(249,83,47)" fg:x="97" fg:w="1"/><text x="4.1007%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.04%)</title><rect x="3.8507%" y="181" width="0.0397%" height="15" fill="rgb(215,43,3)" fg:x="97" fg:w="1"/><text x="4.1007%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="3.8507%" y="165" width="0.0397%" height="15" fill="rgb(238,154,13)" fg:x="97" fg:w="1"/><text x="4.1007%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="3.8507%" y="149" width="0.0397%" height="15" fill="rgb(219,56,2)" fg:x="97" fg:w="1"/><text x="4.1007%" y="159.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="3.8507%" y="133" width="0.0397%" height="15" fill="rgb(233,0,4)" fg:x="97" fg:w="1"/><text x="4.1007%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="3.8507%" y="117" width="0.0397%" height="15" fill="rgb(235,30,7)" fg:x="97" fg:w="1"/><text x="4.1007%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.08%)</title><rect x="4.0492%" y="101" width="0.0794%" height="15" fill="rgb(250,79,13)" fg:x="102" fg:w="2"/><text x="4.2992%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (11 samples, 0.44%)</title><rect x="3.8904%" y="229" width="0.4367%" height="15" fill="rgb(211,146,34)" fg:x="98" fg:w="11"/><text x="4.1404%" y="239.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (11 samples, 0.44%)</title><rect x="3.8904%" y="213" width="0.4367%" height="15" fill="rgb(228,22,38)" fg:x="98" fg:w="11"/><text x="4.1404%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.44%)</title><rect x="3.8904%" y="197" width="0.4367%" height="15" fill="rgb(235,168,5)" fg:x="98" fg:w="11"/><text x="4.1404%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.44%)</title><rect x="3.8904%" y="181" width="0.4367%" height="15" fill="rgb(221,155,16)" fg:x="98" fg:w="11"/><text x="4.1404%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (11 samples, 0.44%)</title><rect x="3.8904%" y="165" width="0.4367%" height="15" fill="rgb(215,215,53)" fg:x="98" fg:w="11"/><text x="4.1404%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (11 samples, 0.44%)</title><rect x="3.8904%" y="149" width="0.4367%" height="15" fill="rgb(223,4,10)" fg:x="98" fg:w="11"/><text x="4.1404%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (11 samples, 0.44%)</title><rect x="3.8904%" y="133" width="0.4367%" height="15" fill="rgb(234,103,6)" fg:x="98" fg:w="11"/><text x="4.1404%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (9 samples, 0.36%)</title><rect x="3.9698%" y="117" width="0.3573%" height="15" fill="rgb(227,97,0)" fg:x="100" fg:w="9"/><text x="4.2198%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (5 samples, 0.20%)</title><rect x="4.1286%" y="101" width="0.1985%" height="15" fill="rgb(234,150,53)" fg:x="104" fg:w="5"/><text x="4.3786%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="4.3271%" y="181" width="0.0397%" height="15" fill="rgb(228,201,54)" fg:x="109" fg:w="1"/><text x="4.5771%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (11 samples, 0.44%)</title><rect x="4.3271%" y="197" width="0.4367%" height="15" fill="rgb(222,22,37)" fg:x="109" fg:w="11"/><text x="4.5771%" y="207.50"></text></g><g><title>hashbrown::raw::neon::Group::match_empty_or_deleted (10 samples, 0.40%)</title><rect x="4.3668%" y="181" width="0.3970%" height="15" fill="rgb(237,53,32)" fg:x="110" fg:w="10"/><text x="4.6168%" y="191.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (10 samples, 0.40%)</title><rect x="4.3668%" y="165" width="0.3970%" height="15" fill="rgb(233,25,53)" fg:x="110" fg:w="10"/><text x="4.6168%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.12%)</title><rect x="4.7638%" y="197" width="0.1191%" height="15" fill="rgb(210,40,34)" fg:x="120" fg:w="3"/><text x="5.0138%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.12%)</title><rect x="4.7638%" y="181" width="0.1191%" height="15" fill="rgb(241,220,44)" fg:x="120" fg:w="3"/><text x="5.0138%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (17 samples, 0.67%)</title><rect x="4.3271%" y="229" width="0.6749%" height="15" fill="rgb(235,28,35)" fg:x="109" fg:w="17"/><text x="4.5771%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (17 samples, 0.67%)</title><rect x="4.3271%" y="213" width="0.6749%" height="15" fill="rgb(210,56,17)" fg:x="109" fg:w="17"/><text x="4.5771%" y="223.50"></text></g><g><title>hashbrown::raw::neon::Group::load (3 samples, 0.12%)</title><rect x="4.8829%" y="197" width="0.1191%" height="15" fill="rgb(224,130,29)" fg:x="123" fg:w="3"/><text x="5.1329%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (3 samples, 0.12%)</title><rect x="4.8829%" y="181" width="0.1191%" height="15" fill="rgb(235,212,8)" fg:x="123" fg:w="3"/><text x="5.1329%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (3 samples, 0.12%)</title><rect x="4.8829%" y="165" width="0.1191%" height="15" fill="rgb(223,33,50)" fg:x="123" fg:w="3"/><text x="5.1329%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.12%)</title><rect x="4.8829%" y="149" width="0.1191%" height="15" fill="rgb(219,149,13)" fg:x="123" fg:w="3"/><text x="5.1329%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.04%)</title><rect x="5.0020%" y="197" width="0.0397%" height="15" fill="rgb(250,156,29)" fg:x="126" fg:w="1"/><text x="5.2520%" y="207.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.04%)</title><rect x="5.0020%" y="181" width="0.0397%" height="15" fill="rgb(216,193,19)" fg:x="126" fg:w="1"/><text x="5.2520%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="5.0020%" y="165" width="0.0397%" height="15" fill="rgb(216,135,14)" fg:x="126" fg:w="1"/><text x="5.2520%" y="175.50"></text></g><g><title>malloc (3 samples, 0.12%)</title><rect x="5.0417%" y="117" width="0.1191%" height="15" fill="rgb(241,47,5)" fg:x="127" fg:w="3"/><text x="5.2917%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="5.0814%" y="101" width="0.0794%" height="15" fill="rgb(233,42,35)" fg:x="128" fg:w="2"/><text x="5.3314%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="5.1211%" y="85" width="0.0397%" height="15" fill="rgb(231,13,6)" fg:x="129" fg:w="1"/><text x="5.3711%" y="95.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.16%)</title><rect x="5.0417%" y="181" width="0.1588%" height="15" fill="rgb(207,181,40)" fg:x="127" fg:w="4"/><text x="5.2917%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.16%)</title><rect x="5.0417%" y="165" width="0.1588%" height="15" fill="rgb(254,173,49)" fg:x="127" fg:w="4"/><text x="5.2917%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.16%)</title><rect x="5.0417%" y="149" width="0.1588%" height="15" fill="rgb(221,1,38)" fg:x="127" fg:w="4"/><text x="5.2917%" y="159.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.16%)</title><rect x="5.0417%" y="133" width="0.1588%" height="15" fill="rgb(206,124,46)" fg:x="127" fg:w="4"/><text x="5.2917%" y="143.50"></text></g><g><title>malloc@plt (1 samples, 0.04%)</title><rect x="5.1608%" y="117" width="0.0397%" height="15" fill="rgb(249,21,11)" fg:x="130" fg:w="1"/><text x="5.4108%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (43 samples, 1.71%)</title><rect x="3.5331%" y="309" width="1.7070%" height="15" fill="rgb(222,201,40)" fg:x="89" fg:w="43"/><text x="3.7831%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (43 samples, 1.71%)</title><rect x="3.5331%" y="293" width="1.7070%" height="15" fill="rgb(235,61,29)" fg:x="89" fg:w="43"/><text x="3.7831%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (39 samples, 1.55%)</title><rect x="3.6919%" y="277" width="1.5482%" height="15" fill="rgb(219,207,3)" fg:x="93" fg:w="39"/><text x="3.9419%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (39 samples, 1.55%)</title><rect x="3.6919%" y="261" width="1.5482%" height="15" fill="rgb(222,56,46)" fg:x="93" fg:w="39"/><text x="3.9419%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (39 samples, 1.55%)</title><rect x="3.6919%" y="245" width="1.5482%" height="15" fill="rgb(239,76,54)" fg:x="93" fg:w="39"/><text x="3.9419%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (6 samples, 0.24%)</title><rect x="5.0020%" y="229" width="0.2382%" height="15" fill="rgb(231,124,27)" fg:x="126" fg:w="6"/><text x="5.2520%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (6 samples, 0.24%)</title><rect x="5.0020%" y="213" width="0.2382%" height="15" fill="rgb(249,195,6)" fg:x="126" fg:w="6"/><text x="5.2520%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.20%)</title><rect x="5.0417%" y="197" width="0.1985%" height="15" fill="rgb(237,174,47)" fg:x="127" fg:w="5"/><text x="5.2917%" y="207.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.04%)</title><rect x="5.2005%" y="181" width="0.0397%" height="15" fill="rgb(206,201,31)" fg:x="131" fg:w="1"/><text x="5.4505%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.08%)</title><rect x="5.3990%" y="229" width="0.0794%" height="15" fill="rgb(231,57,52)" fg:x="136" fg:w="2"/><text x="5.6490%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.08%)</title><rect x="5.7960%" y="213" width="0.0794%" height="15" fill="rgb(248,177,22)" fg:x="146" fg:w="2"/><text x="6.0460%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (19 samples, 0.75%)</title><rect x="5.2402%" y="277" width="0.7543%" height="15" fill="rgb(215,211,37)" fg:x="132" fg:w="19"/><text x="5.4902%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (19 samples, 0.75%)</title><rect x="5.2402%" y="261" width="0.7543%" height="15" fill="rgb(241,128,51)" fg:x="132" fg:w="19"/><text x="5.4902%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (19 samples, 0.75%)</title><rect x="5.2402%" y="245" width="0.7543%" height="15" fill="rgb(227,165,31)" fg:x="132" fg:w="19"/><text x="5.4902%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (13 samples, 0.52%)</title><rect x="5.4784%" y="229" width="0.5161%" height="15" fill="rgb(228,167,24)" fg:x="138" fg:w="13"/><text x="5.7284%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.12%)</title><rect x="5.8753%" y="213" width="0.1191%" height="15" fill="rgb(228,143,12)" fg:x="148" fg:w="3"/><text x="6.1253%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="5.9944%" y="277" width="0.0397%" height="15" fill="rgb(249,149,8)" fg:x="151" fg:w="1"/><text x="6.2444%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="5.9944%" y="261" width="0.0397%" height="15" fill="rgb(243,35,44)" fg:x="151" fg:w="1"/><text x="6.2444%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="5.9944%" y="245" width="0.0397%" height="15" fill="rgb(246,89,9)" fg:x="151" fg:w="1"/><text x="6.2444%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="5.9944%" y="229" width="0.0397%" height="15" fill="rgb(233,213,13)" fg:x="151" fg:w="1"/><text x="6.2444%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.87%)</title><rect x="5.2402%" y="309" width="0.8734%" height="15" fill="rgb(233,141,41)" fg:x="132" fg:w="22"/><text x="5.4902%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.87%)</title><rect x="5.2402%" y="293" width="0.8734%" height="15" fill="rgb(239,167,4)" fg:x="132" fg:w="22"/><text x="5.4902%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.08%)</title><rect x="6.0341%" y="277" width="0.0794%" height="15" fill="rgb(209,217,16)" fg:x="152" fg:w="2"/><text x="6.2841%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.08%)</title><rect x="6.0341%" y="261" width="0.0794%" height="15" fill="rgb(219,88,35)" fg:x="152" fg:w="2"/><text x="6.2841%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.08%)</title><rect x="6.0341%" y="245" width="0.0794%" height="15" fill="rgb(220,193,23)" fg:x="152" fg:w="2"/><text x="6.2841%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.08%)</title><rect x="6.0341%" y="229" width="0.0794%" height="15" fill="rgb(230,90,52)" fg:x="152" fg:w="2"/><text x="6.2841%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.08%)</title><rect x="6.0341%" y="213" width="0.0794%" height="15" fill="rgb(252,106,19)" fg:x="152" fg:w="2"/><text x="6.2841%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.08%)</title><rect x="6.0341%" y="197" width="0.0794%" height="15" fill="rgb(206,74,20)" fg:x="152" fg:w="2"/><text x="6.2841%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.08%)</title><rect x="6.0341%" y="181" width="0.0794%" height="15" fill="rgb(230,138,44)" fg:x="152" fg:w="2"/><text x="6.2841%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 1.07%)</title><rect x="6.2326%" y="277" width="1.0719%" height="15" fill="rgb(235,182,43)" fg:x="157" fg:w="27"/><text x="6.4826%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (23 samples, 0.91%)</title><rect x="6.3914%" y="261" width="0.9131%" height="15" fill="rgb(242,16,51)" fg:x="161" fg:w="23"/><text x="6.6414%" y="271.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (14 samples, 0.56%)</title><rect x="7.3045%" y="277" width="0.5558%" height="15" fill="rgb(248,9,4)" fg:x="184" fg:w="14"/><text x="7.5545%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (5 samples, 0.20%)</title><rect x="7.8603%" y="277" width="0.1985%" height="15" fill="rgb(210,31,22)" fg:x="198" fg:w="5"/><text x="8.1103%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (32 samples, 1.27%)</title><rect x="8.0588%" y="277" width="1.2703%" height="15" fill="rgb(239,54,39)" fg:x="203" fg:w="32"/><text x="8.3088%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.12%)</title><rect x="9.3291%" y="277" width="0.1191%" height="15" fill="rgb(230,99,41)" fg:x="235" fg:w="3"/><text x="9.5791%" y="287.50"></text></g><g><title>hashbrown::raw::neon::Group::load (6 samples, 0.24%)</title><rect x="9.4482%" y="277" width="0.2382%" height="15" fill="rgb(253,106,12)" fg:x="238" fg:w="6"/><text x="9.6982%" y="287.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (6 samples, 0.24%)</title><rect x="9.4482%" y="261" width="0.2382%" height="15" fill="rgb(213,46,41)" fg:x="238" fg:w="6"/><text x="9.6982%" y="271.50"></text></g><g><title>core::ptr::read_unaligned (6 samples, 0.24%)</title><rect x="9.4482%" y="245" width="0.2382%" height="15" fill="rgb(215,133,35)" fg:x="238" fg:w="6"/><text x="9.6982%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.24%)</title><rect x="9.4482%" y="229" width="0.2382%" height="15" fill="rgb(213,28,5)" fg:x="238" fg:w="6"/><text x="9.6982%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (167 samples, 6.63%)</title><rect x="3.3744%" y="325" width="6.6296%" height="15" fill="rgb(215,77,49)" fg:x="85" fg:w="167"/><text x="3.6244%" y="335.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (98 samples, 3.89%)</title><rect x="6.1135%" y="309" width="3.8904%" height="15" fill="rgb(248,100,22)" fg:x="154" fg:w="98"/><text x="6.3635%" y="319.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (95 samples, 3.77%)</title><rect x="6.2326%" y="293" width="3.7713%" height="15" fill="rgb(208,67,9)" fg:x="157" fg:w="95"/><text x="6.4826%" y="303.50">hash..</text></g><g><title>hashbrown::raw::neon::Group::match_byte (8 samples, 0.32%)</title><rect x="9.6864%" y="277" width="0.3176%" height="15" fill="rgb(219,133,21)" fg:x="244" fg:w="8"/><text x="9.9364%" y="287.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (8 samples, 0.32%)</title><rect x="9.6864%" y="261" width="0.3176%" height="15" fill="rgb(246,46,29)" fg:x="244" fg:w="8"/><text x="9.9364%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (172 samples, 6.83%)</title><rect x="3.2553%" y="341" width="6.8281%" height="15" fill="rgb(246,185,52)" fg:x="82" fg:w="172"/><text x="3.5053%" y="351.50">std::coll..</text></g><g><title>std::collections::hash::map::map_entry (2 samples, 0.08%)</title><rect x="10.0040%" y="325" width="0.0794%" height="15" fill="rgb(252,136,11)" fg:x="252" fg:w="2"/><text x="10.2540%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="10.0834%" y="293" width="0.0397%" height="15" fill="rgb(219,138,53)" fg:x="254" fg:w="1"/><text x="10.3334%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="10.0834%" y="277" width="0.0397%" height="15" fill="rgb(211,51,23)" fg:x="254" fg:w="1"/><text x="10.3334%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="10.0834%" y="261" width="0.0397%" height="15" fill="rgb(247,221,28)" fg:x="254" fg:w="1"/><text x="10.3334%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="10.0834%" y="245" width="0.0397%" height="15" fill="rgb(251,222,45)" fg:x="254" fg:w="1"/><text x="10.3334%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="10.0834%" y="229" width="0.0397%" height="15" fill="rgb(217,162,53)" fg:x="254" fg:w="1"/><text x="10.3334%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.04%)</title><rect x="10.0834%" y="213" width="0.0397%" height="15" fill="rgb(229,93,14)" fg:x="254" fg:w="1"/><text x="10.3334%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="10.0834%" y="197" width="0.0397%" height="15" fill="rgb(209,67,49)" fg:x="254" fg:w="1"/><text x="10.3334%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="10.1231%" y="245" width="0.0397%" height="15" fill="rgb(213,87,29)" fg:x="255" fg:w="1"/><text x="10.3731%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="10.1231%" y="229" width="0.0397%" height="15" fill="rgb(205,151,52)" fg:x="255" fg:w="1"/><text x="10.3731%" y="239.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="10.1628%" y="245" width="0.0397%" height="15" fill="rgb(253,215,39)" fg:x="256" fg:w="1"/><text x="10.4128%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.04%)</title><rect x="10.2025%" y="245" width="0.0397%" height="15" fill="rgb(221,220,41)" fg:x="257" fg:w="1"/><text x="10.4525%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.20%)</title><rect x="10.0834%" y="341" width="0.1985%" height="15" fill="rgb(218,133,21)" fg:x="254" fg:w="5"/><text x="10.3334%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.20%)</title><rect x="10.0834%" y="325" width="0.1985%" height="15" fill="rgb(221,193,43)" fg:x="254" fg:w="5"/><text x="10.3334%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.20%)</title><rect x="10.0834%" y="309" width="0.1985%" height="15" fill="rgb(240,128,52)" fg:x="254" fg:w="5"/><text x="10.3334%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.16%)</title><rect x="10.1231%" y="293" width="0.1588%" height="15" fill="rgb(253,114,12)" fg:x="255" fg:w="4"/><text x="10.3731%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.16%)</title><rect x="10.1231%" y="277" width="0.1588%" height="15" fill="rgb(215,223,47)" fg:x="255" fg:w="4"/><text x="10.3731%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.16%)</title><rect x="10.1231%" y="261" width="0.1588%" height="15" fill="rgb(248,225,23)" fg:x="255" fg:w="4"/><text x="10.3731%" y="271.50"></text></g><g><title>hashbrown::raw::neon::Group::match_byte (1 samples, 0.04%)</title><rect x="10.2422%" y="245" width="0.0397%" height="15" fill="rgb(250,108,0)" fg:x="258" fg:w="1"/><text x="10.4922%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (1 samples, 0.04%)</title><rect x="10.2422%" y="229" width="0.0397%" height="15" fill="rgb(228,208,7)" fg:x="258" fg:w="1"/><text x="10.4922%" y="239.50"></text></g><g><title>ahc033_a::TaskAssigner::get_min_dist (242 samples, 9.61%)</title><rect x="0.7543%" y="357" width="9.6070%" height="15" fill="rgb(244,45,10)" fg:x="19" fg:w="242"/><text x="1.0043%" y="367.50">ahc033_a::Task..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.08%)</title><rect x="10.2819%" y="341" width="0.0794%" height="15" fill="rgb(207,125,25)" fg:x="259" fg:w="2"/><text x="10.5319%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.08%)</title><rect x="10.2819%" y="325" width="0.0794%" height="15" fill="rgb(210,195,18)" fg:x="259" fg:w="2"/><text x="10.5319%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.08%)</title><rect x="10.2819%" y="309" width="0.0794%" height="15" fill="rgb(249,80,12)" fg:x="259" fg:w="2"/><text x="10.5319%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="10.3216%" y="293" width="0.0397%" height="15" fill="rgb(221,65,9)" fg:x="260" fg:w="1"/><text x="10.5716%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.04%)</title><rect x="10.3216%" y="277" width="0.0397%" height="15" fill="rgb(235,49,36)" fg:x="260" fg:w="1"/><text x="10.5716%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="10.3216%" y="261" width="0.0397%" height="15" fill="rgb(225,32,20)" fg:x="260" fg:w="1"/><text x="10.5716%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="10.3216%" y="245" width="0.0397%" height="15" fill="rgb(215,141,46)" fg:x="260" fg:w="1"/><text x="10.5716%" y="255.50"></text></g><g><title>&lt;ahc033_a::MINDIST_CANDIDATE as core::ops::deref::Deref&gt;::deref (13 samples, 0.52%)</title><rect x="18.2612%" y="341" width="0.5161%" height="15" fill="rgb(250,160,47)" fg:x="460" fg:w="13"/><text x="18.5112%" y="351.50"></text></g><g><title>&lt;ahc033_a::MINDIST_CANDIDATE as core::ops::deref::Deref&gt;::deref::__stability (13 samples, 0.52%)</title><rect x="18.2612%" y="325" width="0.5161%" height="15" fill="rgb(216,222,40)" fg:x="460" fg:w="13"/><text x="18.5112%" y="335.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (13 samples, 0.52%)</title><rect x="18.2612%" y="309" width="0.5161%" height="15" fill="rgb(234,217,39)" fg:x="460" fg:w="13"/><text x="18.5112%" y="319.50"></text></g><g><title>std::sync::once::Once::call_once (13 samples, 0.52%)</title><rect x="18.2612%" y="293" width="0.5161%" height="15" fill="rgb(207,178,40)" fg:x="460" fg:w="13"/><text x="18.5112%" y="303.50"></text></g><g><title>&lt;ahc033_a::OPS2COODINATEDIFF2 as core::ops::deref::Deref&gt;::deref (23 samples, 0.91%)</title><rect x="18.7773%" y="341" width="0.9131%" height="15" fill="rgb(221,136,13)" fg:x="473" fg:w="23"/><text x="19.0273%" y="351.50"></text></g><g><title>&lt;ahc033_a::OPS2COODINATEDIFF2 as core::ops::deref::Deref&gt;::deref::__stability (23 samples, 0.91%)</title><rect x="18.7773%" y="325" width="0.9131%" height="15" fill="rgb(249,199,10)" fg:x="473" fg:w="23"/><text x="19.0273%" y="335.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (23 samples, 0.91%)</title><rect x="18.7773%" y="309" width="0.9131%" height="15" fill="rgb(249,222,13)" fg:x="473" fg:w="23"/><text x="19.0273%" y="319.50"></text></g><g><title>std::sync::once::Once::call_once (23 samples, 0.91%)</title><rect x="18.7773%" y="293" width="0.9131%" height="15" fill="rgb(244,185,38)" fg:x="473" fg:w="23"/><text x="19.0273%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="19.6904%" y="341" width="0.0397%" height="15" fill="rgb(236,202,9)" fg:x="496" fg:w="1"/><text x="19.9404%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="19.7301%" y="341" width="0.0397%" height="15" fill="rgb(250,229,37)" fg:x="497" fg:w="1"/><text x="19.9801%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="19.7301%" y="325" width="0.0397%" height="15" fill="rgb(206,174,23)" fg:x="497" fg:w="1"/><text x="19.9801%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="19.7301%" y="309" width="0.0397%" height="15" fill="rgb(211,33,43)" fg:x="497" fg:w="1"/><text x="19.9801%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.87%)</title><rect x="19.7697%" y="341" width="0.8734%" height="15" fill="rgb(245,58,50)" fg:x="498" fg:w="22"/><text x="20.0197%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.36%)</title><rect x="24.3351%" y="325" width="0.3573%" height="15" fill="rgb(244,68,36)" fg:x="613" fg:w="9"/><text x="24.5851%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="24.6923%" y="325" width="0.0397%" height="15" fill="rgb(232,229,15)" fg:x="622" fg:w="1"/><text x="24.9423%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="24.6923%" y="309" width="0.0397%" height="15" fill="rgb(254,30,23)" fg:x="622" fg:w="1"/><text x="24.9423%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="24.6923%" y="293" width="0.0397%" height="15" fill="rgb(235,160,14)" fg:x="622" fg:w="1"/><text x="24.9423%" y="303.50"></text></g><g><title>ahc033_a::TaskAssigner::has_container2 (127 samples, 5.04%)</title><rect x="20.6431%" y="341" width="5.0417%" height="15" fill="rgb(212,155,44)" fg:x="520" fg:w="127"/><text x="20.8931%" y="351.50">ahc033..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.95%)</title><rect x="24.7320%" y="325" width="0.9528%" height="15" fill="rgb(226,2,50)" fg:x="623" fg:w="24"/><text x="24.9820%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (24 samples, 0.95%)</title><rect x="24.7320%" y="309" width="0.9528%" height="15" fill="rgb(234,177,6)" fg:x="623" fg:w="24"/><text x="24.9820%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.04%)</title><rect x="25.6848%" y="341" width="0.0397%" height="15" fill="rgb(217,24,9)" fg:x="647" fg:w="1"/><text x="25.9348%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="25.6848%" y="325" width="0.0397%" height="15" fill="rgb(220,13,46)" fg:x="647" fg:w="1"/><text x="25.9348%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="25.6848%" y="309" width="0.0397%" height="15" fill="rgb(239,221,27)" fg:x="647" fg:w="1"/><text x="25.9348%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="25.6848%" y="293" width="0.0397%" height="15" fill="rgb(222,198,25)" fg:x="647" fg:w="1"/><text x="25.9348%" y="303.50"></text></g><g><title>malloc@plt (1 samples, 0.04%)</title><rect x="25.6848%" y="277" width="0.0397%" height="15" fill="rgb(211,99,13)" fg:x="647" fg:w="1"/><text x="25.9348%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (15 samples, 0.60%)</title><rect x="25.7245%" y="341" width="0.5955%" height="15" fill="rgb(232,111,31)" fg:x="648" fg:w="15"/><text x="25.9745%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_front (15 samples, 0.60%)</title><rect x="26.3200%" y="341" width="0.5955%" height="15" fill="rgb(245,82,37)" fg:x="663" fg:w="15"/><text x="26.5700%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_read (11 samples, 0.44%)</title><rect x="26.4788%" y="325" width="0.4367%" height="15" fill="rgb(227,149,46)" fg:x="667" fg:w="11"/><text x="26.7288%" y="335.50"></text></g><g><title>core::ptr::read (11 samples, 0.44%)</title><rect x="26.4788%" y="309" width="0.4367%" height="15" fill="rgb(218,36,50)" fg:x="667" fg:w="11"/><text x="26.7288%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (3 samples, 0.12%)</title><rect x="27.3918%" y="325" width="0.1191%" height="15" fill="rgb(226,80,48)" fg:x="690" fg:w="3"/><text x="27.6418%" y="335.50"></text></g><g><title>core::ptr::write (3 samples, 0.12%)</title><rect x="27.3918%" y="309" width="0.1191%" height="15" fill="rgb(238,224,15)" fg:x="690" fg:w="3"/><text x="27.6418%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (3 samples, 0.12%)</title><rect x="27.5109%" y="325" width="0.1191%" height="15" fill="rgb(241,136,10)" fg:x="693" fg:w="3"/><text x="27.7609%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.12%)</title><rect x="27.5109%" y="309" width="0.1191%" height="15" fill="rgb(208,32,45)" fg:x="693" fg:w="3"/><text x="27.7609%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.12%)</title><rect x="27.5109%" y="293" width="0.1191%" height="15" fill="rgb(207,135,9)" fg:x="693" fg:w="3"/><text x="27.7609%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.12%)</title><rect x="27.5109%" y="277" width="0.1191%" height="15" fill="rgb(206,86,44)" fg:x="693" fg:w="3"/><text x="27.7609%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.12%)</title><rect x="27.5109%" y="261" width="0.1191%" height="15" fill="rgb(245,177,15)" fg:x="693" fg:w="3"/><text x="27.7609%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.12%)</title><rect x="27.5109%" y="245" width="0.1191%" height="15" fill="rgb(206,64,50)" fg:x="693" fg:w="3"/><text x="27.7609%" y="255.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.12%)</title><rect x="27.5109%" y="229" width="0.1191%" height="15" fill="rgb(234,36,40)" fg:x="693" fg:w="3"/><text x="27.7609%" y="239.50"></text></g><g><title>realloc (3 samples, 0.12%)</title><rect x="27.5109%" y="213" width="0.1191%" height="15" fill="rgb(213,64,8)" fg:x="693" fg:w="3"/><text x="27.7609%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="27.5903%" y="197" width="0.0397%" height="15" fill="rgb(210,75,36)" fg:x="695" fg:w="1"/><text x="27.8403%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="27.5903%" y="181" width="0.0397%" height="15" fill="rgb(229,88,21)" fg:x="695" fg:w="1"/><text x="27.8403%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (31 samples, 1.23%)</title><rect x="26.9154%" y="341" width="1.2306%" height="15" fill="rgb(252,204,47)" fg:x="678" fg:w="31"/><text x="27.1654%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_full (13 samples, 0.52%)</title><rect x="27.6300%" y="325" width="0.5161%" height="15" fill="rgb(208,77,27)" fg:x="696" fg:w="13"/><text x="27.8800%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (2 samples, 0.08%)</title><rect x="28.0667%" y="309" width="0.0794%" height="15" fill="rgb(221,76,26)" fg:x="707" fg:w="2"/><text x="28.3167%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.08%)</title><rect x="28.0667%" y="293" width="0.0794%" height="15" fill="rgb(225,139,18)" fg:x="707" fg:w="2"/><text x="28.3167%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="28.1461%" y="341" width="0.0397%" height="15" fill="rgb(230,137,11)" fg:x="709" fg:w="1"/><text x="28.3961%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="28.1461%" y="325" width="0.0397%" height="15" fill="rgb(212,28,1)" fg:x="709" fg:w="1"/><text x="28.3961%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="28.1461%" y="309" width="0.0397%" height="15" fill="rgb(248,164,17)" fg:x="709" fg:w="1"/><text x="28.3961%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="28.1461%" y="293" width="0.0397%" height="15" fill="rgb(222,171,42)" fg:x="709" fg:w="1"/><text x="28.3961%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="28.1461%" y="277" width="0.0397%" height="15" fill="rgb(243,84,45)" fg:x="709" fg:w="1"/><text x="28.3961%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="28.1461%" y="261" width="0.0397%" height="15" fill="rgb(252,49,23)" fg:x="709" fg:w="1"/><text x="28.3961%" y="271.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="28.1461%" y="245" width="0.0397%" height="15" fill="rgb(215,19,7)" fg:x="709" fg:w="1"/><text x="28.3961%" y="255.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="28.1461%" y="229" width="0.0397%" height="15" fill="rgb(238,81,41)" fg:x="709" fg:w="1"/><text x="28.3961%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="28.1461%" y="213" width="0.0397%" height="15" fill="rgb(210,199,37)" fg:x="709" fg:w="1"/><text x="28.3961%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="28.1461%" y="197" width="0.0397%" height="15" fill="rgb(244,192,49)" fg:x="709" fg:w="1"/><text x="28.3961%" y="207.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.04%)</title><rect x="28.1858%" y="341" width="0.0397%" height="15" fill="rgb(226,211,11)" fg:x="710" fg:w="1"/><text x="28.4358%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.04%)</title><rect x="28.1858%" y="325" width="0.0397%" height="15" fill="rgb(236,162,54)" fg:x="710" fg:w="1"/><text x="28.4358%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="28.1858%" y="309" width="0.0397%" height="15" fill="rgb(220,229,9)" fg:x="710" fg:w="1"/><text x="28.4358%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="28.1858%" y="293" width="0.0397%" height="15" fill="rgb(250,87,22)" fg:x="710" fg:w="1"/><text x="28.4358%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="28.1858%" y="277" width="0.0397%" height="15" fill="rgb(239,43,17)" fg:x="710" fg:w="1"/><text x="28.4358%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="28.1858%" y="261" width="0.0397%" height="15" fill="rgb(231,177,25)" fg:x="710" fg:w="1"/><text x="28.4358%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="28.1858%" y="245" width="0.0397%" height="15" fill="rgb(219,179,1)" fg:x="710" fg:w="1"/><text x="28.4358%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="28.1858%" y="229" width="0.0397%" height="15" fill="rgb(238,219,53)" fg:x="710" fg:w="1"/><text x="28.4358%" y="239.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="28.1858%" y="213" width="0.0397%" height="15" fill="rgb(232,167,36)" fg:x="710" fg:w="1"/><text x="28.4358%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="28.2255%" y="341" width="0.0397%" height="15" fill="rgb(244,19,51)" fg:x="711" fg:w="1"/><text x="28.4755%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="28.2255%" y="325" width="0.0397%" height="15" fill="rgb(224,6,22)" fg:x="711" fg:w="1"/><text x="28.4755%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="28.2255%" y="309" width="0.0397%" height="15" fill="rgb(224,145,5)" fg:x="711" fg:w="1"/><text x="28.4755%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="28.2255%" y="293" width="0.0397%" height="15" fill="rgb(234,130,49)" fg:x="711" fg:w="1"/><text x="28.4755%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="28.2255%" y="277" width="0.0397%" height="15" fill="rgb(254,6,2)" fg:x="711" fg:w="1"/><text x="28.4755%" y="287.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="28.2255%" y="261" width="0.0397%" height="15" fill="rgb(208,96,46)" fg:x="711" fg:w="1"/><text x="28.4755%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="28.2255%" y="245" width="0.0397%" height="15" fill="rgb(239,3,39)" fg:x="711" fg:w="1"/><text x="28.4755%" y="255.50"></text></g><g><title>hashbrown::raw::neon::Group::load_aligned (17 samples, 0.67%)</title><rect x="35.0536%" y="197" width="0.6749%" height="15" fill="rgb(233,210,1)" fg:x="883" fg:w="17"/><text x="35.3036%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (17 samples, 0.67%)</title><rect x="35.0536%" y="181" width="0.6749%" height="15" fill="rgb(244,137,37)" fg:x="883" fg:w="17"/><text x="35.3036%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (17 samples, 0.67%)</title><rect x="35.0536%" y="165" width="0.6749%" height="15" fill="rgb(240,136,2)" fg:x="883" fg:w="17"/><text x="35.3036%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.67%)</title><rect x="35.0536%" y="149" width="0.6749%" height="15" fill="rgb(239,18,37)" fg:x="883" fg:w="17"/><text x="35.3036%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.99%)</title><rect x="34.8551%" y="229" width="0.9925%" height="15" fill="rgb(218,185,22)" fg:x="878" fg:w="25"/><text x="35.1051%" y="239.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (20 samples, 0.79%)</title><rect x="35.0536%" y="213" width="0.7940%" height="15" fill="rgb(225,218,4)" fg:x="883" fg:w="20"/><text x="35.3036%" y="223.50"></text></g><g><title>hashbrown::raw::neon::Group::match_full (3 samples, 0.12%)</title><rect x="35.7285%" y="197" width="0.1191%" height="15" fill="rgb(230,182,32)" fg:x="900" fg:w="3"/><text x="35.9785%" y="207.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (3 samples, 0.12%)</title><rect x="35.7285%" y="181" width="0.1191%" height="15" fill="rgb(242,56,43)" fg:x="900" fg:w="3"/><text x="35.9785%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 2.82%)</title><rect x="35.8476%" y="229" width="2.8186%" height="15" fill="rgb(233,99,24)" fg:x="903" fg:w="71"/><text x="36.0976%" y="239.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3 samples, 0.12%)</title><rect x="38.6661%" y="229" width="0.1191%" height="15" fill="rgb(234,209,42)" fg:x="974" fg:w="3"/><text x="38.9161%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.12%)</title><rect x="38.6661%" y="213" width="0.1191%" height="15" fill="rgb(227,7,12)" fg:x="974" fg:w="3"/><text x="38.9161%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::{{closure}} (3 samples, 0.12%)</title><rect x="38.6661%" y="197" width="0.1191%" height="15" fill="rgb(245,203,43)" fg:x="974" fg:w="3"/><text x="38.9161%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.12%)</title><rect x="38.6661%" y="181" width="0.1191%" height="15" fill="rgb(238,205,33)" fg:x="974" fg:w="3"/><text x="38.9161%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.12%)</title><rect x="38.6661%" y="165" width="0.1191%" height="15" fill="rgb(231,56,7)" fg:x="974" fg:w="3"/><text x="38.9161%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.12%)</title><rect x="38.6661%" y="149" width="0.1191%" height="15" fill="rgb(244,186,29)" fg:x="974" fg:w="3"/><text x="38.9161%" y="159.50"></text></g><g><title>free (3 samples, 0.12%)</title><rect x="38.6661%" y="133" width="0.1191%" height="15" fill="rgb(234,111,31)" fg:x="974" fg:w="3"/><text x="38.9161%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.16%)</title><rect x="39.9365%" y="101" width="0.1588%" height="15" fill="rgb(241,149,10)" fg:x="1006" fg:w="4"/><text x="40.1865%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.24%)</title><rect x="39.8968%" y="117" width="0.2382%" height="15" fill="rgb(249,206,44)" fg:x="1005" fg:w="6"/><text x="40.1468%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="40.0953%" y="101" width="0.0397%" height="15" fill="rgb(251,153,30)" fg:x="1010" fg:w="1"/><text x="40.3453%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 1.07%)</title><rect x="41.3656%" y="101" width="1.0719%" height="15" fill="rgb(239,152,38)" fg:x="1042" fg:w="27"/><text x="41.6156%" y="111.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (133 samples, 5.28%)</title><rect x="38.7852%" y="165" width="5.2799%" height="15" fill="rgb(249,139,47)" fg:x="977" fg:w="133"/><text x="39.0352%" y="175.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (133 samples, 5.28%)</title><rect x="38.7852%" y="149" width="5.2799%" height="15" fill="rgb(244,64,35)" fg:x="977" fg:w="133"/><text x="39.0352%" y="159.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (133 samples, 5.28%)</title><rect x="38.7852%" y="133" width="5.2799%" height="15" fill="rgb(216,46,15)" fg:x="977" fg:w="133"/><text x="39.0352%" y="143.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (99 samples, 3.93%)</title><rect x="40.1350%" y="117" width="3.9301%" height="15" fill="rgb(250,74,19)" fg:x="1011" fg:w="99"/><text x="40.3850%" y="127.50">&lt;cor..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (41 samples, 1.63%)</title><rect x="42.4375%" y="101" width="1.6276%" height="15" fill="rgb(249,42,33)" fg:x="1069" fg:w="41"/><text x="42.6875%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (136 samples, 5.40%)</title><rect x="38.7852%" y="229" width="5.3990%" height="15" fill="rgb(242,149,17)" fg:x="977" fg:w="136"/><text x="39.0352%" y="239.50">hashbro..</text></g><g><title>hashbrown::map::make_hasher::{{closure}} (136 samples, 5.40%)</title><rect x="38.7852%" y="213" width="5.3990%" height="15" fill="rgb(244,29,21)" fg:x="977" fg:w="136"/><text x="39.0352%" y="223.50">hashbro..</text></g><g><title>hashbrown::map::make_hash (136 samples, 5.40%)</title><rect x="38.7852%" y="197" width="5.3990%" height="15" fill="rgb(220,130,37)" fg:x="977" fg:w="136"/><text x="39.0352%" y="207.50">hashbro..</text></g><g><title>core::hash::BuildHasher::hash_one (136 samples, 5.40%)</title><rect x="38.7852%" y="181" width="5.3990%" height="15" fill="rgb(211,67,2)" fg:x="977" fg:w="136"/><text x="39.0352%" y="191.50">core::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.12%)</title><rect x="44.0651%" y="165" width="0.1191%" height="15" fill="rgb(235,68,52)" fg:x="1110" fg:w="3"/><text x="44.3151%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="44.1445%" y="149" width="0.0397%" height="15" fill="rgb(246,142,3)" fg:x="1112" fg:w="1"/><text x="44.3945%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="44.1445%" y="133" width="0.0397%" height="15" fill="rgb(241,25,7)" fg:x="1112" fg:w="1"/><text x="44.3945%" y="143.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="44.1445%" y="117" width="0.0397%" height="15" fill="rgb(242,119,39)" fg:x="1112" fg:w="1"/><text x="44.3945%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="44.1445%" y="101" width="0.0397%" height="15" fill="rgb(241,98,45)" fg:x="1112" fg:w="1"/><text x="44.3945%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="44.1445%" y="85" width="0.0397%" height="15" fill="rgb(254,28,30)" fg:x="1112" fg:w="1"/><text x="44.3945%" y="95.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.12%)</title><rect x="44.3430%" y="181" width="0.1191%" height="15" fill="rgb(241,142,54)" fg:x="1117" fg:w="3"/><text x="44.5930%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (122 samples, 4.84%)</title><rect x="44.3430%" y="197" width="4.8432%" height="15" fill="rgb(222,85,15)" fg:x="1117" fg:w="122"/><text x="44.5930%" y="207.50">hashbr..</text></g><g><title>hashbrown::raw::neon::Group::match_empty_or_deleted (119 samples, 4.72%)</title><rect x="44.4621%" y="181" width="4.7241%" height="15" fill="rgb(210,85,47)" fg:x="1120" fg:w="119"/><text x="44.7121%" y="191.50">hashbr..</text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (119 samples, 4.72%)</title><rect x="44.4621%" y="165" width="4.7241%" height="15" fill="rgb(224,206,25)" fg:x="1120" fg:w="119"/><text x="44.7121%" y="175.50">core::..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (25 samples, 0.99%)</title><rect x="49.1862%" y="197" width="0.9925%" height="15" fill="rgb(243,201,19)" fg:x="1239" fg:w="25"/><text x="49.4362%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (25 samples, 0.99%)</title><rect x="49.1862%" y="181" width="0.9925%" height="15" fill="rgb(236,59,4)" fg:x="1239" fg:w="25"/><text x="49.4362%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="50.1786%" y="197" width="0.0397%" height="15" fill="rgb(254,179,45)" fg:x="1264" fg:w="1"/><text x="50.4286%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (169 samples, 6.71%)</title><rect x="44.1842%" y="213" width="6.7090%" height="15" fill="rgb(226,14,10)" fg:x="1113" fg:w="169"/><text x="44.4342%" y="223.50">hashbrown..</text></g><g><title>hashbrown::raw::neon::Group::load (17 samples, 0.67%)</title><rect x="50.2183%" y="197" width="0.6749%" height="15" fill="rgb(244,27,41)" fg:x="1265" fg:w="17"/><text x="50.4683%" y="207.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (17 samples, 0.67%)</title><rect x="50.2183%" y="181" width="0.6749%" height="15" fill="rgb(235,35,32)" fg:x="1265" fg:w="17"/><text x="50.4683%" y="191.50"></text></g><g><title>core::ptr::read_unaligned (17 samples, 0.67%)</title><rect x="50.2183%" y="165" width="0.6749%" height="15" fill="rgb(218,68,31)" fg:x="1265" fg:w="17"/><text x="50.4683%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.67%)</title><rect x="50.2183%" y="149" width="0.6749%" height="15" fill="rgb(207,120,37)" fg:x="1265" fg:w="17"/><text x="50.4683%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (171 samples, 6.79%)</title><rect x="44.1842%" y="229" width="6.7884%" height="15" fill="rgb(227,98,0)" fg:x="1113" fg:w="171"/><text x="44.4342%" y="239.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (2 samples, 0.08%)</title><rect x="50.8932%" y="213" width="0.0794%" height="15" fill="rgb(207,7,3)" fg:x="1282" fg:w="2"/><text x="51.1432%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (2 samples, 0.08%)</title><rect x="50.8932%" y="197" width="0.0794%" height="15" fill="rgb(206,98,19)" fg:x="1282" fg:w="2"/><text x="51.1432%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.08%)</title><rect x="50.8932%" y="181" width="0.0794%" height="15" fill="rgb(217,5,26)" fg:x="1282" fg:w="2"/><text x="51.1432%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.04%)</title><rect x="50.9726%" y="197" width="0.0397%" height="15" fill="rgb(235,190,38)" fg:x="1284" fg:w="1"/><text x="51.2226%" y="207.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.04%)</title><rect x="50.9726%" y="181" width="0.0397%" height="15" fill="rgb(247,86,24)" fg:x="1284" fg:w="1"/><text x="51.2226%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="50.9726%" y="165" width="0.0397%" height="15" fill="rgb(205,101,16)" fg:x="1284" fg:w="1"/><text x="51.2226%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (505 samples, 20.05%)</title><rect x="31.2426%" y="309" width="20.0476%" height="15" fill="rgb(246,168,33)" fg:x="787" fg:w="505"/><text x="31.4926%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (505 samples, 20.05%)</title><rect x="31.2426%" y="293" width="20.0476%" height="15" fill="rgb(231,114,1)" fg:x="787" fg:w="505"/><text x="31.4926%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (414 samples, 16.44%)</title><rect x="34.8551%" y="277" width="16.4351%" height="15" fill="rgb(207,184,53)" fg:x="878" fg:w="414"/><text x="35.1051%" y="287.50">hashbrown::raw::RawTable&lt;..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (414 samples, 16.44%)</title><rect x="34.8551%" y="261" width="16.4351%" height="15" fill="rgb(224,95,51)" fg:x="878" fg:w="414"/><text x="35.1051%" y="271.50">hashbrown::raw::RawTableI..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (414 samples, 16.44%)</title><rect x="34.8551%" y="245" width="16.4351%" height="15" fill="rgb(212,188,45)" fg:x="878" fg:w="414"/><text x="35.1051%" y="255.50">hashbrown::raw::RawTableI..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (8 samples, 0.32%)</title><rect x="50.9726%" y="229" width="0.3176%" height="15" fill="rgb(223,154,38)" fg:x="1284" fg:w="8"/><text x="51.2226%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (8 samples, 0.32%)</title><rect x="50.9726%" y="213" width="0.3176%" height="15" fill="rgb(251,22,52)" fg:x="1284" fg:w="8"/><text x="51.2226%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (7 samples, 0.28%)</title><rect x="51.0123%" y="197" width="0.2779%" height="15" fill="rgb(229,209,22)" fg:x="1285" fg:w="7"/><text x="51.2623%" y="207.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 0.28%)</title><rect x="51.0123%" y="181" width="0.2779%" height="15" fill="rgb(234,138,34)" fg:x="1285" fg:w="7"/><text x="51.2623%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.28%)</title><rect x="51.0123%" y="165" width="0.2779%" height="15" fill="rgb(212,95,11)" fg:x="1285" fg:w="7"/><text x="51.2623%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.28%)</title><rect x="51.0123%" y="149" width="0.2779%" height="15" fill="rgb(240,179,47)" fg:x="1285" fg:w="7"/><text x="51.2623%" y="159.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.28%)</title><rect x="51.0123%" y="133" width="0.2779%" height="15" fill="rgb(240,163,11)" fg:x="1285" fg:w="7"/><text x="51.2623%" y="143.50"></text></g><g><title>malloc (7 samples, 0.28%)</title><rect x="51.0123%" y="117" width="0.2779%" height="15" fill="rgb(236,37,12)" fg:x="1285" fg:w="7"/><text x="51.2623%" y="127.50"></text></g><g><title>[libc.so.6] (6 samples, 0.24%)</title><rect x="51.0520%" y="101" width="0.2382%" height="15" fill="rgb(232,164,16)" fg:x="1286" fg:w="6"/><text x="51.3020%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.12%)</title><rect x="51.1711%" y="85" width="0.1191%" height="15" fill="rgb(244,205,15)" fg:x="1289" fg:w="3"/><text x="51.4211%" y="95.50"></text></g><g><title>__default_morecore (1 samples, 0.04%)</title><rect x="51.2505%" y="69" width="0.0397%" height="15" fill="rgb(223,117,47)" fg:x="1291" fg:w="1"/><text x="51.5005%" y="79.50"></text></g><g><title>sbrk (1 samples, 0.04%)</title><rect x="51.2505%" y="53" width="0.0397%" height="15" fill="rgb(244,107,35)" fg:x="1291" fg:w="1"/><text x="51.5005%" y="63.50"></text></g><g><title>brk (1 samples, 0.04%)</title><rect x="51.2505%" y="37" width="0.0397%" height="15" fill="rgb(205,140,8)" fg:x="1291" fg:w="1"/><text x="51.5005%" y="47.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.48%)</title><rect x="54.1485%" y="213" width="0.4764%" height="15" fill="rgb(228,84,46)" fg:x="1364" fg:w="12"/><text x="54.3985%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (52 samples, 2.06%)</title><rect x="53.1163%" y="229" width="2.0643%" height="15" fill="rgb(254,188,9)" fg:x="1338" fg:w="52"/><text x="53.3663%" y="239.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.56%)</title><rect x="54.6249%" y="213" width="0.5558%" height="15" fill="rgb(206,112,54)" fg:x="1376" fg:w="14"/><text x="54.8749%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (42 samples, 1.67%)</title><rect x="57.0861%" y="213" width="1.6673%" height="15" fill="rgb(216,84,49)" fg:x="1438" fg:w="42"/><text x="57.3361%" y="223.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (248 samples, 9.85%)</title><rect x="51.8063%" y="277" width="9.8452%" height="15" fill="rgb(214,194,35)" fg:x="1305" fg:w="248"/><text x="52.0563%" y="287.50">&lt;std::hash::ra..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (248 samples, 9.85%)</title><rect x="51.8063%" y="261" width="9.8452%" height="15" fill="rgb(249,28,3)" fg:x="1305" fg:w="248"/><text x="52.0563%" y="271.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (248 samples, 9.85%)</title><rect x="51.8063%" y="245" width="9.8452%" height="15" fill="rgb(222,56,52)" fg:x="1305" fg:w="248"/><text x="52.0563%" y="255.50">&lt;core::hash::s..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (163 samples, 6.47%)</title><rect x="55.1806%" y="229" width="6.4708%" height="15" fill="rgb(245,217,50)" fg:x="1390" fg:w="163"/><text x="55.4306%" y="239.50">&lt;core::h..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (73 samples, 2.90%)</title><rect x="58.7535%" y="213" width="2.8980%" height="15" fill="rgb(213,201,24)" fg:x="1480" fg:w="73"/><text x="59.0035%" y="223.50">co..</text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.16%)</title><rect x="61.6514%" y="277" width="0.1588%" height="15" fill="rgb(248,116,28)" fg:x="1553" fg:w="4"/><text x="61.9014%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.16%)</title><rect x="61.6514%" y="261" width="0.1588%" height="15" fill="rgb(219,72,43)" fg:x="1553" fg:w="4"/><text x="61.9014%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.16%)</title><rect x="61.6514%" y="245" width="0.1588%" height="15" fill="rgb(209,138,14)" fg:x="1553" fg:w="4"/><text x="61.9014%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.16%)</title><rect x="61.6514%" y="229" width="0.1588%" height="15" fill="rgb(222,18,33)" fg:x="1553" fg:w="4"/><text x="61.9014%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.20%)</title><rect x="62.8821%" y="165" width="0.1985%" height="15" fill="rgb(213,199,7)" fg:x="1584" fg:w="5"/><text x="63.1321%" y="175.50"></text></g><g><title>hashbrown::map::make_hash (313 samples, 12.43%)</title><rect x="51.2902%" y="309" width="12.4256%" height="15" fill="rgb(250,110,10)" fg:x="1292" fg:w="313"/><text x="51.5402%" y="319.50">hashbrown::map::mak..</text></g><g><title>core::hash::BuildHasher::hash_one (313 samples, 12.43%)</title><rect x="51.2902%" y="293" width="12.4256%" height="15" fill="rgb(248,123,6)" fg:x="1292" fg:w="313"/><text x="51.5402%" y="303.50">core::hash::BuildHa..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (48 samples, 1.91%)</title><rect x="61.8102%" y="277" width="1.9055%" height="15" fill="rgb(206,91,31)" fg:x="1557" fg:w="48"/><text x="62.0602%" y="287.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (48 samples, 1.91%)</title><rect x="61.8102%" y="261" width="1.9055%" height="15" fill="rgb(211,154,13)" fg:x="1557" fg:w="48"/><text x="62.0602%" y="271.50">c..</text></g><g><title>core::hash::Hasher::write_usize (48 samples, 1.91%)</title><rect x="61.8102%" y="245" width="1.9055%" height="15" fill="rgb(225,148,7)" fg:x="1557" fg:w="48"/><text x="62.0602%" y="255.50">c..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 1.91%)</title><rect x="61.8102%" y="229" width="1.9055%" height="15" fill="rgb(220,160,43)" fg:x="1557" fg:w="48"/><text x="62.0602%" y="239.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (48 samples, 1.91%)</title><rect x="61.8102%" y="213" width="1.9055%" height="15" fill="rgb(213,52,39)" fg:x="1557" fg:w="48"/><text x="62.0602%" y="223.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (48 samples, 1.91%)</title><rect x="61.8102%" y="197" width="1.9055%" height="15" fill="rgb(243,137,7)" fg:x="1557" fg:w="48"/><text x="62.0602%" y="207.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (41 samples, 1.63%)</title><rect x="62.0881%" y="181" width="1.6276%" height="15" fill="rgb(230,79,13)" fg:x="1564" fg:w="41"/><text x="62.3381%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16 samples, 0.64%)</title><rect x="63.0806%" y="165" width="0.6352%" height="15" fill="rgb(247,105,23)" fg:x="1589" fg:w="16"/><text x="63.3306%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="65.5022%" y="277" width="0.0397%" height="15" fill="rgb(223,179,41)" fg:x="1650" fg:w="1"/><text x="65.7522%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (263 samples, 10.44%)</title><rect x="65.5419%" y="277" width="10.4407%" height="15" fill="rgb(218,9,34)" fg:x="1651" fg:w="263"/><text x="65.7919%" y="287.50">&lt;hashbrown::raw..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (215 samples, 8.54%)</title><rect x="67.4474%" y="261" width="8.5351%" height="15" fill="rgb(222,106,8)" fg:x="1699" fg:w="215"/><text x="67.6974%" y="271.50">hashbrown::r..</text></g><g><title>hashbrown::raw::ProbeSeq::move_next (94 samples, 3.73%)</title><rect x="75.9825%" y="277" width="3.7316%" height="15" fill="rgb(211,220,0)" fg:x="1914" fg:w="94"/><text x="76.2325%" y="287.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (33 samples, 1.31%)</title><rect x="79.7142%" y="277" width="1.3100%" height="15" fill="rgb(229,52,16)" fg:x="2008" fg:w="33"/><text x="79.9642%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (252 samples, 10.00%)</title><rect x="81.0242%" y="277" width="10.0040%" height="15" fill="rgb(212,155,18)" fg:x="2041" fg:w="252"/><text x="81.2742%" y="287.50">hashbrown::raw..</text></g><g><title>hashbrown::raw::h2 (9 samples, 0.36%)</title><rect x="91.0282%" y="277" width="0.3573%" height="15" fill="rgb(242,21,14)" fg:x="2293" fg:w="9"/><text x="91.2782%" y="287.50"></text></g><g><title>hashbrown::raw::neon::Group::load (10 samples, 0.40%)</title><rect x="91.3855%" y="277" width="0.3970%" height="15" fill="rgb(222,19,48)" fg:x="2302" fg:w="10"/><text x="91.6355%" y="287.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (10 samples, 0.40%)</title><rect x="91.3855%" y="261" width="0.3970%" height="15" fill="rgb(232,45,27)" fg:x="2302" fg:w="10"/><text x="91.6355%" y="271.50"></text></g><g><title>core::ptr::read_unaligned (10 samples, 0.40%)</title><rect x="91.3855%" y="245" width="0.3970%" height="15" fill="rgb(249,103,42)" fg:x="2302" fg:w="10"/><text x="91.6355%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.40%)</title><rect x="91.3855%" y="229" width="0.3970%" height="15" fill="rgb(246,81,33)" fg:x="2302" fg:w="10"/><text x="91.6355%" y="239.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vceq_u8 (1 samples, 0.04%)</title><rect x="91.7825%" y="261" width="0.0397%" height="15" fill="rgb(252,33,42)" fg:x="2312" fg:w="1"/><text x="92.0325%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1,701 samples, 67.53%)</title><rect x="29.2973%" y="325" width="67.5268%" height="15" fill="rgb(209,212,41)" fg:x="738" fg:w="1701"/><text x="29.5473%" y="335.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (834 samples, 33.11%)</title><rect x="63.7158%" y="309" width="33.1084%" height="15" fill="rgb(207,154,6)" fg:x="1605" fg:w="834"/><text x="63.9658%" y="319.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (804 samples, 31.92%)</title><rect x="64.9067%" y="293" width="31.9174%" height="15" fill="rgb(223,64,47)" fg:x="1635" fg:w="804"/><text x="65.1567%" y="303.50">hashbrown::raw::RawTableInner::find_inner</text></g><g><title>hashbrown::raw::neon::Group::match_byte (127 samples, 5.04%)</title><rect x="91.7825%" y="277" width="5.0417%" height="15" fill="rgb(211,161,38)" fg:x="2312" fg:w="127"/><text x="92.0325%" y="287.50">hashbr..</text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (126 samples, 5.00%)</title><rect x="91.8222%" y="261" width="5.0020%" height="15" fill="rgb(219,138,40)" fg:x="2313" fg:w="126"/><text x="92.0722%" y="271.50">core::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1,744 samples, 69.23%)</title><rect x="28.2652%" y="341" width="69.2338%" height="15" fill="rgb(241,228,46)" fg:x="712" fg:w="1744"/><text x="28.5152%" y="351.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (17 samples, 0.67%)</title><rect x="96.8241%" y="325" width="0.6749%" height="15" fill="rgb(223,209,38)" fg:x="2439" fg:w="17"/><text x="97.0741%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.08%)</title><rect x="97.4990%" y="341" width="0.0794%" height="15" fill="rgb(236,164,45)" fg:x="2456" fg:w="2"/><text x="97.7490%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.08%)</title><rect x="97.4990%" y="325" width="0.0794%" height="15" fill="rgb(231,15,5)" fg:x="2456" fg:w="2"/><text x="97.7490%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.08%)</title><rect x="97.4990%" y="309" width="0.0794%" height="15" fill="rgb(252,35,15)" fg:x="2456" fg:w="2"/><text x="97.7490%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.04%)</title><rect x="97.5387%" y="293" width="0.0397%" height="15" fill="rgb(248,181,18)" fg:x="2457" fg:w="1"/><text x="97.7887%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="97.5387%" y="277" width="0.0397%" height="15" fill="rgb(233,39,42)" fg:x="2457" fg:w="1"/><text x="97.7887%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="97.5387%" y="261" width="0.0397%" height="15" fill="rgb(238,110,33)" fg:x="2457" fg:w="1"/><text x="97.7887%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.04%)</title><rect x="97.5387%" y="245" width="0.0397%" height="15" fill="rgb(233,195,10)" fg:x="2457" fg:w="1"/><text x="97.7887%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (2 samples, 0.08%)</title><rect x="97.8166%" y="293" width="0.0794%" height="15" fill="rgb(254,105,3)" fg:x="2464" fg:w="2"/><text x="98.0666%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.08%)</title><rect x="97.8166%" y="277" width="0.0794%" height="15" fill="rgb(221,225,9)" fg:x="2464" fg:w="2"/><text x="98.0666%" y="287.50"></text></g><g><title>core::ptr::write (2 samples, 0.08%)</title><rect x="97.8166%" y="261" width="0.0794%" height="15" fill="rgb(224,227,45)" fg:x="2464" fg:w="2"/><text x="98.0666%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (3 samples, 0.12%)</title><rect x="97.8960%" y="293" width="0.1191%" height="15" fill="rgb(229,198,43)" fg:x="2466" fg:w="3"/><text x="98.1460%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.12%)</title><rect x="97.8960%" y="277" width="0.1191%" height="15" fill="rgb(206,209,35)" fg:x="2466" fg:w="3"/><text x="98.1460%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.12%)</title><rect x="97.8960%" y="261" width="0.1191%" height="15" fill="rgb(245,195,53)" fg:x="2466" fg:w="3"/><text x="98.1460%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.12%)</title><rect x="97.8960%" y="245" width="0.1191%" height="15" fill="rgb(240,92,26)" fg:x="2466" fg:w="3"/><text x="98.1460%" y="255.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (1 samples, 0.04%)</title><rect x="98.0548%" y="261" width="0.0397%" height="15" fill="rgb(207,40,23)" fg:x="2470" fg:w="1"/><text x="98.3048%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.08%)</title><rect x="98.0945%" y="245" width="0.0794%" height="15" fill="rgb(223,111,35)" fg:x="2471" fg:w="2"/><text x="98.3445%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (13 samples, 0.52%)</title><rect x="98.0945%" y="261" width="0.5161%" height="15" fill="rgb(229,147,28)" fg:x="2471" fg:w="13"/><text x="98.3445%" y="271.50"></text></g><g><title>hashbrown::raw::neon::Group::match_empty_or_deleted (11 samples, 0.44%)</title><rect x="98.1739%" y="245" width="0.4367%" height="15" fill="rgb(211,29,28)" fg:x="2473" fg:w="11"/><text x="98.4239%" y="255.50"></text></g><g><title>core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (11 samples, 0.44%)</title><rect x="98.1739%" y="229" width="0.4367%" height="15" fill="rgb(228,72,33)" fg:x="2473" fg:w="11"/><text x="98.4239%" y="239.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (29 samples, 1.15%)</title><rect x="97.5784%" y="341" width="1.1513%" height="15" fill="rgb(205,214,31)" fg:x="2458" fg:w="29"/><text x="97.8284%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (29 samples, 1.15%)</title><rect x="97.5784%" y="325" width="1.1513%" height="15" fill="rgb(224,111,15)" fg:x="2458" fg:w="29"/><text x="97.8284%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (29 samples, 1.15%)</title><rect x="97.5784%" y="309" width="1.1513%" height="15" fill="rgb(253,21,26)" fg:x="2458" fg:w="29"/><text x="97.8284%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (18 samples, 0.71%)</title><rect x="98.0151%" y="293" width="0.7146%" height="15" fill="rgb(245,139,43)" fg:x="2469" fg:w="18"/><text x="98.2651%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (18 samples, 0.71%)</title><rect x="98.0151%" y="277" width="0.7146%" height="15" fill="rgb(252,170,7)" fg:x="2469" fg:w="18"/><text x="98.2651%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.12%)</title><rect x="98.6106%" y="261" width="0.1191%" height="15" fill="rgb(231,118,14)" fg:x="2484" fg:w="3"/><text x="98.8606%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.12%)</title><rect x="98.6106%" y="245" width="0.1191%" height="15" fill="rgb(238,83,0)" fg:x="2484" fg:w="3"/><text x="98.8606%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.12%)</title><rect x="99.0472%" y="277" width="0.1191%" height="15" fill="rgb(221,39,39)" fg:x="2495" fg:w="3"/><text x="99.2972%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.12%)</title><rect x="99.0472%" y="261" width="0.1191%" height="15" fill="rgb(222,119,46)" fg:x="2495" fg:w="3"/><text x="99.2972%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="99.0869%" y="245" width="0.0794%" height="15" fill="rgb(222,165,49)" fg:x="2496" fg:w="2"/><text x="99.3369%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="99.0869%" y="229" width="0.0794%" height="15" fill="rgb(219,113,52)" fg:x="2496" fg:w="2"/><text x="99.3369%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="99.0869%" y="213" width="0.0794%" height="15" fill="rgb(214,7,15)" fg:x="2496" fg:w="2"/><text x="99.3369%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.08%)</title><rect x="99.0869%" y="197" width="0.0794%" height="15" fill="rgb(235,32,4)" fg:x="2496" fg:w="2"/><text x="99.3369%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="99.1266%" y="181" width="0.0397%" height="15" fill="rgb(238,90,54)" fg:x="2497" fg:w="1"/><text x="99.3766%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.04%)</title><rect x="99.1663%" y="277" width="0.0397%" height="15" fill="rgb(213,208,19)" fg:x="2498" fg:w="1"/><text x="99.4163%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="99.1663%" y="261" width="0.0397%" height="15" fill="rgb(233,156,4)" fg:x="2498" fg:w="1"/><text x="99.4163%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="99.1663%" y="245" width="0.0397%" height="15" fill="rgb(207,194,5)" fg:x="2498" fg:w="1"/><text x="99.4163%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.1663%" y="229" width="0.0397%" height="15" fill="rgb(206,111,30)" fg:x="2498" fg:w="1"/><text x="99.4163%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="99.1663%" y="213" width="0.0397%" height="15" fill="rgb(243,70,54)" fg:x="2498" fg:w="1"/><text x="99.4163%" y="223.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (17 samples, 0.67%)</title><rect x="98.7297%" y="341" width="0.6749%" height="15" fill="rgb(242,28,8)" fg:x="2487" fg:w="17"/><text x="98.9797%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (17 samples, 0.67%)</title><rect x="98.7297%" y="325" width="0.6749%" height="15" fill="rgb(219,106,18)" fg:x="2487" fg:w="17"/><text x="98.9797%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (15 samples, 0.60%)</title><rect x="98.8091%" y="309" width="0.5955%" height="15" fill="rgb(244,222,10)" fg:x="2489" fg:w="15"/><text x="99.0591%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.36%)</title><rect x="99.0472%" y="293" width="0.3573%" height="15" fill="rgb(236,179,52)" fg:x="2495" fg:w="9"/><text x="99.2972%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (5 samples, 0.20%)</title><rect x="99.2060%" y="277" width="0.1985%" height="15" fill="rgb(213,23,39)" fg:x="2499" fg:w="5"/><text x="99.4560%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (5 samples, 0.20%)</title><rect x="99.2060%" y="261" width="0.1985%" height="15" fill="rgb(238,48,10)" fg:x="2499" fg:w="5"/><text x="99.4560%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="99.4442%" y="213" width="0.0397%" height="15" fill="rgb(251,196,23)" fg:x="2505" fg:w="1"/><text x="99.6942%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.04%)</title><rect x="99.4442%" y="197" width="0.0397%" height="15" fill="rgb(250,152,24)" fg:x="2505" fg:w="1"/><text x="99.6942%" y="207.50"></text></g><g><title>hashbrown::raw::neon::Group::load (1 samples, 0.04%)</title><rect x="99.4442%" y="181" width="0.0397%" height="15" fill="rgb(209,150,17)" fg:x="2505" fg:w="1"/><text x="99.6942%" y="191.50"></text></g><g><title>core::core_arch::aarch64::neon::vld1_u8 (1 samples, 0.04%)</title><rect x="99.4442%" y="165" width="0.0397%" height="15" fill="rgb(234,202,34)" fg:x="2505" fg:w="1"/><text x="99.6942%" y="175.50"></text></g><g><title>core::ptr::read_unaligned (1 samples, 0.04%)</title><rect x="99.4442%" y="149" width="0.0397%" height="15" fill="rgb(253,148,53)" fg:x="2505" fg:w="1"/><text x="99.6942%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="99.4442%" y="133" width="0.0397%" height="15" fill="rgb(218,129,16)" fg:x="2505" fg:w="1"/><text x="99.6942%" y="143.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (3 samples, 0.12%)</title><rect x="99.4045%" y="341" width="0.1191%" height="15" fill="rgb(216,85,19)" fg:x="2504" fg:w="3"/><text x="99.6545%" y="351.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (3 samples, 0.12%)</title><rect x="99.4045%" y="325" width="0.1191%" height="15" fill="rgb(235,228,7)" fg:x="2504" fg:w="3"/><text x="99.6545%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.12%)</title><rect x="99.4045%" y="309" width="0.1191%" height="15" fill="rgb(245,175,0)" fg:x="2504" fg:w="3"/><text x="99.6545%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.12%)</title><rect x="99.4045%" y="293" width="0.1191%" height="15" fill="rgb(208,168,36)" fg:x="2504" fg:w="3"/><text x="99.6545%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3 samples, 0.12%)</title><rect x="99.4045%" y="277" width="0.1191%" height="15" fill="rgb(246,171,24)" fg:x="2504" fg:w="3"/><text x="99.6545%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.08%)</title><rect x="99.4442%" y="261" width="0.0794%" height="15" fill="rgb(215,142,24)" fg:x="2505" fg:w="2"/><text x="99.6942%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.08%)</title><rect x="99.4442%" y="245" width="0.0794%" height="15" fill="rgb(250,187,7)" fg:x="2505" fg:w="2"/><text x="99.6942%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.08%)</title><rect x="99.4442%" y="229" width="0.0794%" height="15" fill="rgb(228,66,33)" fg:x="2505" fg:w="2"/><text x="99.6942%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.04%)</title><rect x="99.4839%" y="213" width="0.0397%" height="15" fill="rgb(234,215,21)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.04%)</title><rect x="99.4839%" y="197" width="0.0397%" height="15" fill="rgb(222,191,20)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.04%)</title><rect x="99.4839%" y="181" width="0.0397%" height="15" fill="rgb(245,79,54)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="191.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.04%)</title><rect x="99.4839%" y="165" width="0.0397%" height="15" fill="rgb(240,10,37)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="99.4839%" y="149" width="0.0397%" height="15" fill="rgb(214,192,32)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="99.4839%" y="133" width="0.0397%" height="15" fill="rgb(209,36,54)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="99.4839%" y="117" width="0.0397%" height="15" fill="rgb(220,10,11)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="127.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="99.4839%" y="101" width="0.0397%" height="15" fill="rgb(221,106,17)" fg:x="2506" fg:w="1"/><text x="99.7339%" y="111.50"></text></g><g><title>ahc033_a::TaskAssigner::get_min_dist_to_space (2,247 samples, 89.20%)</title><rect x="10.3613%" y="357" width="89.2021%" height="15" fill="rgb(251,142,44)" fg:x="261" fg:w="2247"/><text x="10.6113%" y="367.50">ahc033_a::TaskAssigner::get_min_dist_to_space</text></g><g><title>std::collections::hash::set::HashSet&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="99.5236%" y="341" width="0.0397%" height="15" fill="rgb(238,13,15)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="99.5236%" y="325" width="0.0397%" height="15" fill="rgb(208,107,27)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="335.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="99.5236%" y="309" width="0.0397%" height="15" fill="rgb(205,136,37)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="319.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="99.5236%" y="293" width="0.0397%" height="15" fill="rgb(250,205,27)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="303.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="99.5236%" y="277" width="0.0397%" height="15" fill="rgb(210,80,43)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="287.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.04%)</title><rect x="99.5236%" y="261" width="0.0397%" height="15" fill="rgb(247,160,36)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="99.5236%" y="245" width="0.0397%" height="15" fill="rgb(234,13,49)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="99.5236%" y="229" width="0.0397%" height="15" fill="rgb(234,122,0)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="239.50"></text></g><g><title>std::hash::random::RandomState::new::{{closure}} (1 samples, 0.04%)</title><rect x="99.5236%" y="213" width="0.0397%" height="15" fill="rgb(207,146,38)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="99.5236%" y="197" width="0.0397%" height="15" fill="rgb(207,177,25)" fg:x="2507" fg:w="1"/><text x="99.7736%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.6030%" y="341" width="0.0397%" height="15" fill="rgb(211,178,42)" fg:x="2509" fg:w="1"/><text x="99.8530%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="99.6030%" y="325" width="0.0397%" height="15" fill="rgb(230,69,54)" fg:x="2509" fg:w="1"/><text x="99.8530%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.04%)</title><rect x="99.6824%" y="309" width="0.0397%" height="15" fill="rgb(214,135,41)" fg:x="2511" fg:w="1"/><text x="99.9324%" y="319.50"></text></g><g><title>ahc033_a::TaskAssigner::record_crane_move (5 samples, 0.20%)</title><rect x="99.5633%" y="357" width="0.1985%" height="15" fill="rgb(237,67,25)" fg:x="2508" fg:w="5"/><text x="99.8133%" y="367.50"></text></g><g><title>ahc033_a::Crane::operate (3 samples, 0.12%)</title><rect x="99.6427%" y="341" width="0.1191%" height="15" fill="rgb(222,189,50)" fg:x="2510" fg:w="3"/><text x="99.8927%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.08%)</title><rect x="99.6824%" y="325" width="0.0794%" height="15" fill="rgb(245,148,34)" fg:x="2511" fg:w="2"/><text x="99.9324%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="99.7221%" y="309" width="0.0397%" height="15" fill="rgb(222,29,6)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="99.7221%" y="293" width="0.0397%" height="15" fill="rgb(221,189,43)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="99.7221%" y="277" width="0.0397%" height="15" fill="rgb(207,36,27)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="99.7221%" y="261" width="0.0397%" height="15" fill="rgb(217,90,24)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="99.7221%" y="245" width="0.0397%" height="15" fill="rgb(224,66,35)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="255.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="99.7221%" y="229" width="0.0397%" height="15" fill="rgb(221,13,50)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="239.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="99.7221%" y="213" width="0.0397%" height="15" fill="rgb(236,68,49)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="223.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.7221%" y="197" width="0.0397%" height="15" fill="rgb(229,146,28)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.7221%" y="181" width="0.0397%" height="15" fill="rgb(225,31,38)" fg:x="2512" fg:w="1"/><text x="99.9721%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="99.7618%" y="357" width="0.0397%" height="15" fill="rgb(250,208,3)" fg:x="2513" fg:w="1"/><text x="100.0118%" y="367.50"></text></g><g><title>ahc033_a::TaskAssigner::simulate (2,497 samples, 99.13%)</title><rect x="0.7543%" y="389" width="99.1266%" height="15" fill="rgb(246,54,23)" fg:x="19" fg:w="2497"/><text x="1.0043%" y="399.50">ahc033_a::TaskAssigner::simulate</text></g><g><title>ahc033_a::TaskAssigner::task_assign (2,497 samples, 99.13%)</title><rect x="0.7543%" y="373" width="99.1266%" height="15" fill="rgb(243,76,11)" fg:x="19" fg:w="2497"/><text x="1.0043%" y="383.50">ahc033_a::TaskAssigner::task_assign</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.08%)</title><rect x="99.8015%" y="357" width="0.0794%" height="15" fill="rgb(245,21,50)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.08%)</title><rect x="99.8015%" y="341" width="0.0794%" height="15" fill="rgb(228,9,43)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.08%)</title><rect x="99.8015%" y="325" width="0.0794%" height="15" fill="rgb(208,100,47)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.08%)</title><rect x="99.8015%" y="309" width="0.0794%" height="15" fill="rgb(232,26,8)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.08%)</title><rect x="99.8015%" y="293" width="0.0794%" height="15" fill="rgb(216,166,38)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.08%)</title><rect x="99.8015%" y="277" width="0.0794%" height="15" fill="rgb(251,202,51)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="287.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.08%)</title><rect x="99.8015%" y="261" width="0.0794%" height="15" fill="rgb(254,216,34)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="271.50"></text></g><g><title>realloc (2 samples, 0.08%)</title><rect x="99.8015%" y="245" width="0.0794%" height="15" fill="rgb(251,32,27)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="99.8015%" y="229" width="0.0794%" height="15" fill="rgb(208,127,28)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="99.8015%" y="213" width="0.0794%" height="15" fill="rgb(224,137,22)" fg:x="2514" fg:w="2"/><text x="100.0515%" y="223.50"></text></g><g><title>ahc033_a::State::cal_score (2,515 samples, 99.84%)</title><rect x="0.0794%" y="421" width="99.8412%" height="15" fill="rgb(254,70,32)" fg:x="2" fg:w="2515"/><text x="0.3294%" y="431.50">ahc033_a::State::cal_score</text></g><g><title>ahc033_a::State::simulate (2,515 samples, 99.84%)</title><rect x="0.0794%" y="405" width="99.8412%" height="15" fill="rgb(229,75,37)" fg:x="2" fg:w="2515"/><text x="0.3294%" y="415.50">ahc033_a::State::simulate</text></g><g><title>core::ptr::drop_in_place&lt;ahc033_a::TaskAssigner&gt; (1 samples, 0.04%)</title><rect x="99.8809%" y="389" width="0.0397%" height="15" fill="rgb(252,64,23)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;bool&gt;&gt; (1 samples, 0.04%)</title><rect x="99.8809%" y="373" width="0.0397%" height="15" fill="rgb(232,162,48)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;bool&gt;&gt; (1 samples, 0.04%)</title><rect x="99.8809%" y="357" width="0.0397%" height="15" fill="rgb(246,160,12)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="99.8809%" y="341" width="0.0397%" height="15" fill="rgb(247,166,0)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="99.8809%" y="325" width="0.0397%" height="15" fill="rgb(249,219,21)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="99.8809%" y="309" width="0.0397%" height="15" fill="rgb(205,209,3)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="319.50"></text></g><g><title>free (1 samples, 0.04%)</title><rect x="99.8809%" y="293" width="0.0397%" height="15" fill="rgb(243,44,1)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.8809%" y="277" width="0.0397%" height="15" fill="rgb(206,159,16)" fg:x="2516" fg:w="1"/><text x="100.1309%" y="287.50"></text></g><g><title>ahc033_a::State::get_neighbor (1 samples, 0.04%)</title><rect x="99.9206%" y="421" width="0.0397%" height="15" fill="rgb(244,77,30)" fg:x="2517" fg:w="1"/><text x="100.1706%" y="431.50"></text></g><g><title>all (2,519 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(218,69,12)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="767.50"></text></g><g><title>ahc033_a (2,519 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(212,87,7)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="751.50">ahc033_a</text></g><g><title>_start (2,519 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(245,114,25)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="735.50">_start</text></g><g><title>__libc_start_main (2,519 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(210,61,42)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="719.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,519 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(211,52,33)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="703.50">[libc.so.6]</text></g><g><title>main (2,519 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(234,58,33)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="687.50">main</text></g><g><title>std::rt::lang_start_internal (2,519 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(220,115,36)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="671.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,519 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(243,153,54)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,519 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(251,47,18)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,519 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(242,102,42)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="623.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,519 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(234,31,38)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="607.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,519 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(221,117,51)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="591.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,519 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(212,20,18)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="575.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,519 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(245,133,36)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="559.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,519 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(212,6,19)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="543.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,519 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(218,1,36)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="527.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,519 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(246,84,54)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="511.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,519 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(242,110,6)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="495.50">core::ops::function::FnOnce::call_once</text></g><g><title>ahc033_a::main (2,519 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(214,47,5)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="479.50">ahc033_a::main</text></g><g><title>ahc033_a::solve (2,519 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(218,159,25)" fg:x="0" fg:w="2519"/><text x="0.2500%" y="463.50">ahc033_a::solve</text></g><g><title>ahc033_a::simanneal (2,517 samples, 99.92%)</title><rect x="0.0794%" y="437" width="99.9206%" height="15" fill="rgb(215,211,28)" fg:x="2" fg:w="2517"/><text x="0.3294%" y="447.50">ahc033_a::simanneal</text></g><g><title>std::f64::&lt;impl f64&gt;::exp (1 samples, 0.04%)</title><rect x="99.9603%" y="421" width="0.0397%" height="15" fill="rgb(238,59,32)" fg:x="2518" fg:w="1"/><text x="100.2103%" y="431.50"></text></g><g><title>[libm.so.6] (1 samples, 0.04%)</title><rect x="99.9603%" y="405" width="0.0397%" height="15" fill="rgb(226,82,3)" fg:x="2518" fg:w="1"/><text x="100.2103%" y="415.50"></text></g></svg></svg>